
EEdwardsFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001248  08007274  08007274  00008274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084bc  080084bc  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  080084bc  080084bc  000094bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c4  080084c4  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c4  080084c4  000094c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084c8  080084c8  000094c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080084cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025cb8  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d30  20025d30  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001369d  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c1  00000000  00000000  0001d745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00020808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3e  00000000  00000000  00021bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002708e  00000000  00000000  00022b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185bf  00000000  00000000  00049b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2e7c  00000000  00000000  0006215b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144fd7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a24  00000000  00000000  0014501c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800725c 	.word	0x0800725c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800725c 	.word	0x0800725c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:




void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 f9ec 	bl	8002960 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fac8 	bl	8000b1c <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fa85 	bl	8000a9c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fbde 	bl	8000d58 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fd60 	bl	8001060 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <ApplicationInit+0x2c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000094 	.word	0x20000094

080005b0 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	visualDemo();
 80005b4:	f000 fca2 	bl	8000efc <visualDemo>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_Touch_Polling_Demo>:

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 80005c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fbc7 	bl	8000d58 <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005ca:	4827      	ldr	r0, [pc, #156]	@ (8000668 <LCD_Touch_Polling_Demo+0xac>)
 80005cc:	f000 fd53 	bl	8001076 <returnTouchStateAndLocation>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d117      	bne.n	8000606 <LCD_Touch_Polling_Demo+0x4a>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005d6:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <LCD_Touch_Polling_Demo+0xac>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <LCD_Touch_Polling_Demo+0xac>)
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4822      	ldr	r0, [pc, #136]	@ (800066c <LCD_Touch_Polling_Demo+0xb0>)
 80005e4:	f005 ff6e 	bl	80064c4 <iprintf>
			LCD_Clear(0, LCD_COLOR_WHITE);
 80005e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fbb3 	bl	8000d58 <LCD_Clear>

			if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <LCD_Touch_Polling_Demo+0xac>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2b77      	cmp	r3, #119	@ 0x77
 80005f8:	d802      	bhi.n	8000600 <LCD_Touch_Polling_Demo+0x44>
				LCD_Gameplay();
 80005fa:	f000 f83d 	bl	8000678 <LCD_Gameplay>
 80005fe:	e7e4      	b.n	80005ca <LCD_Touch_Polling_Demo+0xe>
				//LCD_SetTextColor(LCD_COLOR_BLUE);
				//LCD_SetFont(&Font16x24);
				//LCD_DisplayChar(110,140,'1');

			} else {
				LCD_Visual_Demo();
 8000600:	f7ff ffd6 	bl	80005b0 <LCD_Visual_Demo>
 8000604:	e7e1      	b.n	80005ca <LCD_Touch_Polling_Demo+0xe>
				//LCD_DisplayChar(110,140,'2');

			}
		}else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 8000606:	481a      	ldr	r0, [pc, #104]	@ (8000670 <LCD_Touch_Polling_Demo+0xb4>)
 8000608:	f005 ffc4 	bl	8006594 <puts>
			LCD_Clear(0, LCD_COLOR_WHITE);
 800060c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fba1 	bl	8000d58 <LCD_Clear>
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fbc0 	bl	8000d9c <LCD_SetTextColor>
			LCD_SetFont(&Font16x24);
 800061c:	4815      	ldr	r0, [pc, #84]	@ (8000674 <LCD_Touch_Polling_Demo+0xb8>)
 800061e:	f000 fbcd 	bl	8000dbc <LCD_SetFont>
			LCD_DisplayChar(50,140,'P');
 8000622:	2250      	movs	r2, #80	@ 0x50
 8000624:	218c      	movs	r1, #140	@ 0x8c
 8000626:	2032      	movs	r0, #50	@ 0x32
 8000628:	f000 fc46 	bl	8000eb8 <LCD_DisplayChar>
			LCD_DisplayChar(60,140,'1');
 800062c:	2231      	movs	r2, #49	@ 0x31
 800062e:	218c      	movs	r1, #140	@ 0x8c
 8000630:	203c      	movs	r0, #60	@ 0x3c
 8000632:	f000 fc41 	bl	8000eb8 <LCD_DisplayChar>
			LCD_DisplayChar(180,140,'P');
 8000636:	2250      	movs	r2, #80	@ 0x50
 8000638:	218c      	movs	r1, #140	@ 0x8c
 800063a:	20b4      	movs	r0, #180	@ 0xb4
 800063c:	f000 fc3c 	bl	8000eb8 <LCD_DisplayChar>
			LCD_DisplayChar(190,140,'2');
 8000640:	2232      	movs	r2, #50	@ 0x32
 8000642:	218c      	movs	r1, #140	@ 0x8c
 8000644:	20be      	movs	r0, #190	@ 0xbe
 8000646:	f000 fc37 	bl	8000eb8 <LCD_DisplayChar>
			LCD_Draw_Circle_Fill(185,140,20,LCD_COLOR_GREY);
 800064a:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 800064e:	2214      	movs	r2, #20
 8000650:	218c      	movs	r1, #140	@ 0x8c
 8000652:	20b9      	movs	r0, #185	@ 0xb9
 8000654:	f000 fade 	bl	8000c14 <LCD_Draw_Circle_Fill>
			LCD_Draw_Circle_Fill(55,140,20,LCD_COLOR_BLUE);
 8000658:	231f      	movs	r3, #31
 800065a:	2214      	movs	r2, #20
 800065c:	218c      	movs	r1, #140	@ 0x8c
 800065e:	2037      	movs	r0, #55	@ 0x37
 8000660:	f000 fad8 	bl	8000c14 <LCD_Draw_Circle_Fill>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000664:	e7b1      	b.n	80005ca <LCD_Touch_Polling_Demo+0xe>
 8000666:	bf00      	nop
 8000668:	20000094 	.word	0x20000094
 800066c:	08007274 	.word	0x08007274
 8000670:	08007288 	.word	0x08007288
 8000674:	20000004 	.word	0x20000004

08000678 <LCD_Gameplay>:
}
#endif // COMPILE_TOUCH_FUNCTIONS


void LCD_Gameplay(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_WHITE);
 800067c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fb69 	bl	8000d58 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLUE);
 8000686:	201f      	movs	r0, #31
 8000688:	f000 fb88 	bl	8000d9c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800068c:	4840      	ldr	r0, [pc, #256]	@ (8000790 <LCD_Gameplay+0x118>)
 800068e:	f000 fb95 	bl	8000dbc <LCD_SetFont>

	/****************** Gameboard Visuals *******************/
	LCD_Draw_Vertical_Line(205,5,270,LCD_COLOR_BLACK);
 8000692:	2300      	movs	r3, #0
 8000694:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8000698:	2105      	movs	r1, #5
 800069a:	20cd      	movs	r0, #205	@ 0xcd
 800069c:	f000 fb0d 	bl	8000cba <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(170,5,270,LCD_COLOR_BLACK);
 80006a0:	2300      	movs	r3, #0
 80006a2:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006a6:	2105      	movs	r1, #5
 80006a8:	20aa      	movs	r0, #170	@ 0xaa
 80006aa:	f000 fb06 	bl	8000cba <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(135,5,270,LCD_COLOR_BLACK);
 80006ae:	2300      	movs	r3, #0
 80006b0:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006b4:	2105      	movs	r1, #5
 80006b6:	2087      	movs	r0, #135	@ 0x87
 80006b8:	f000 faff 	bl	8000cba <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(100,5,270,LCD_COLOR_BLACK);
 80006bc:	2300      	movs	r3, #0
 80006be:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006c2:	2105      	movs	r1, #5
 80006c4:	2064      	movs	r0, #100	@ 0x64
 80006c6:	f000 faf8 	bl	8000cba <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(65,5,270,LCD_COLOR_BLACK);
 80006ca:	2300      	movs	r3, #0
 80006cc:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006d0:	2105      	movs	r1, #5
 80006d2:	2041      	movs	r0, #65	@ 0x41
 80006d4:	f000 faf1 	bl	8000cba <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(33,5,270,LCD_COLOR_BLACK);
 80006d8:	2300      	movs	r3, #0
 80006da:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006de:	2105      	movs	r1, #5
 80006e0:	2021      	movs	r0, #33	@ 0x21
 80006e2:	f000 faea 	bl	8000cba <LCD_Draw_Vertical_Line>

	LCD_Draw_Horizontal_Line(200,5,200,LCD_COLOR_BLACK);
 80006e6:	2300      	movs	r3, #0
 80006e8:	22c8      	movs	r2, #200	@ 0xc8
 80006ea:	2105      	movs	r1, #5
 80006ec:	20c8      	movs	r0, #200	@ 0xc8
 80006ee:	f000 fb0b 	bl	8000d08 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,45,200,LCD_COLOR_BLACK);
 80006f2:	2300      	movs	r3, #0
 80006f4:	22c8      	movs	r2, #200	@ 0xc8
 80006f6:	212d      	movs	r1, #45	@ 0x2d
 80006f8:	20c8      	movs	r0, #200	@ 0xc8
 80006fa:	f000 fb05 	bl	8000d08 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,95,200,LCD_COLOR_BLACK);
 80006fe:	2300      	movs	r3, #0
 8000700:	22c8      	movs	r2, #200	@ 0xc8
 8000702:	215f      	movs	r1, #95	@ 0x5f
 8000704:	20c8      	movs	r0, #200	@ 0xc8
 8000706:	f000 faff 	bl	8000d08 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,140,200,LCD_COLOR_BLACK);
 800070a:	2300      	movs	r3, #0
 800070c:	22c8      	movs	r2, #200	@ 0xc8
 800070e:	218c      	movs	r1, #140	@ 0x8c
 8000710:	20c8      	movs	r0, #200	@ 0xc8
 8000712:	f000 faf9 	bl	8000d08 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,185,200,LCD_COLOR_BLACK);
 8000716:	2300      	movs	r3, #0
 8000718:	22c8      	movs	r2, #200	@ 0xc8
 800071a:	21b9      	movs	r1, #185	@ 0xb9
 800071c:	20c8      	movs	r0, #200	@ 0xc8
 800071e:	f000 faf3 	bl	8000d08 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,230,200,LCD_COLOR_BLACK);
 8000722:	2300      	movs	r3, #0
 8000724:	22c8      	movs	r2, #200	@ 0xc8
 8000726:	21e6      	movs	r1, #230	@ 0xe6
 8000728:	20c8      	movs	r0, #200	@ 0xc8
 800072a:	f000 faed 	bl	8000d08 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,273,200,LCD_COLOR_BLACK);
 800072e:	2300      	movs	r3, #0
 8000730:	22c8      	movs	r2, #200	@ 0xc8
 8000732:	f240 1111 	movw	r1, #273	@ 0x111
 8000736:	20c8      	movs	r0, #200	@ 0xc8
 8000738:	f000 fae6 	bl	8000d08 <LCD_Draw_Horizontal_Line>
	/**************************** Gameplay ******************************/
	while(1) // set macro
	{
		//uint8_t game_board[6][7] = {0}; // Initialize game board to empty
		//uint8_t player1_turn = 1;
		if(PlayerOneChoice == 1)
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <LCD_Gameplay+0x11c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d11d      	bne.n	8000780 <LCD_Gameplay+0x108>
		{
			LCD_PieceMovement();
 8000744:	f000 f82c 	bl	80007a0 <LCD_PieceMovement>
			// Store value in matrix
			InterruptPress = 0; // Reset
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <LCD_Gameplay+0x120>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
			//PlayerOneChoice = 1;
			LCD_Draw_Circle_Fill(current_position,ROW_THREE,12,LCD_COLOR_BLUE);
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <LCD_Gameplay+0x124>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	231f      	movs	r3, #31
 8000756:	220c      	movs	r2, #12
 8000758:	21a0      	movs	r1, #160	@ 0xa0
 800075a:	f000 fa5b 	bl	8000c14 <LCD_Draw_Circle_Fill>
			LCD_Draw_Circle_Fill(current_position,ROW_FOUR,12,LCD_COLOR_BLUE);
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <LCD_Gameplay+0x124>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	231f      	movs	r3, #31
 8000766:	220c      	movs	r2, #12
 8000768:	2178      	movs	r1, #120	@ 0x78
 800076a:	f000 fa53 	bl	8000c14 <LCD_Draw_Circle_Fill>
			LCD_Draw_Circle_Fill(current_position,ROW_FIVE,12,LCD_COLOR_BLUE);
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <LCD_Gameplay+0x124>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	231f      	movs	r3, #31
 8000776:	220c      	movs	r2, #12
 8000778:	2146      	movs	r1, #70	@ 0x46
 800077a:	f000 fa4b 	bl	8000c14 <LCD_Draw_Circle_Fill>
 800077e:	e7dd      	b.n	800073c <LCD_Gameplay+0xc4>

		}
		else
		{
			//Random Generator
			HAL_Delay(1000);
 8000780:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000784:	f002 fa44 	bl	8002c10 <HAL_Delay>
			PlayerOneChoice = 1;
 8000788:	4b02      	ldr	r3, [pc, #8]	@ (8000794 <LCD_Gameplay+0x11c>)
 800078a:	2201      	movs	r2, #1
 800078c:	701a      	strb	r2, [r3, #0]
		if(PlayerOneChoice == 1)
 800078e:	e7d5      	b.n	800073c <LCD_Gameplay+0xc4>
 8000790:	20000004 	.word	0x20000004
 8000794:	20000000 	.word	0x20000000
 8000798:	2000009c 	.word	0x2000009c
 800079c:	20000001 	.word	0x20000001

080007a0 <LCD_PieceMovement>:




void LCD_PieceMovement(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	//uint8_t initial_position = COLUMN_FOUR;
	//uint8_t current_position = initial_position;
	//uint8_t new_position = 0;
	//uint8_t previous_position =0;

	while(PlayerOneChoice)
 80007a4:	e053      	b.n	800084e <LCD_PieceMovement+0xae>
	{


	  if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 80007a6:	482d      	ldr	r0, [pc, #180]	@ (800085c <LCD_PieceMovement+0xbc>)
 80007a8:	f000 fc65 	bl	8001076 <returnTouchStateAndLocation>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d146      	bne.n	8000840 <LCD_PieceMovement+0xa0>
	  {
		/* Touch valid */
		printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <LCD_PieceMovement+0xbc>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4b28      	ldr	r3, [pc, #160]	@ (800085c <LCD_PieceMovement+0xbc>)
 80007ba:	885b      	ldrh	r3, [r3, #2]
 80007bc:	461a      	mov	r2, r3
 80007be:	4828      	ldr	r0, [pc, #160]	@ (8000860 <LCD_PieceMovement+0xc0>)
 80007c0:	f005 fe80 	bl	80064c4 <iprintf>
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2)
 80007c4:	4b25      	ldr	r3, [pc, #148]	@ (800085c <LCD_PieceMovement+0xbc>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	2b77      	cmp	r3, #119	@ 0x77
 80007ca:	d812      	bhi.n	80007f2 <LCD_PieceMovement+0x52>
		{
			if(current_position > COLUMN_ONE)
 80007cc:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <LCD_PieceMovement+0xc4>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b0c      	cmp	r3, #12
 80007d2:	d920      	bls.n	8000816 <LCD_PieceMovement+0x76>
			{
				previous_position = current_position;
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <LCD_PieceMovement+0xc4>)
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <LCD_PieceMovement+0xc8>)
 80007da:	701a      	strb	r2, [r3, #0]
				new_position = current_position - 35;
 80007dc:	4b21      	ldr	r3, [pc, #132]	@ (8000864 <LCD_PieceMovement+0xc4>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3b23      	subs	r3, #35	@ 0x23
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b21      	ldr	r3, [pc, #132]	@ (800086c <LCD_PieceMovement+0xcc>)
 80007e6:	701a      	strb	r2, [r3, #0]
				current_position = new_position;
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <LCD_PieceMovement+0xcc>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <LCD_PieceMovement+0xc4>)
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	e011      	b.n	8000816 <LCD_PieceMovement+0x76>
			}
		}
		else
		{
			if(current_position < COLUMN_SEVEN)
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <LCD_PieceMovement+0xc4>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2bbb      	cmp	r3, #187	@ 0xbb
 80007f8:	d80d      	bhi.n	8000816 <LCD_PieceMovement+0x76>
			{
				previous_position = current_position;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <LCD_PieceMovement+0xc4>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <LCD_PieceMovement+0xc8>)
 8000800:	701a      	strb	r2, [r3, #0]
				new_position = current_position + 35;
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <LCD_PieceMovement+0xc4>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3323      	adds	r3, #35	@ 0x23
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <LCD_PieceMovement+0xcc>)
 800080c:	701a      	strb	r2, [r3, #0]
				current_position = new_position;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <LCD_PieceMovement+0xcc>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <LCD_PieceMovement+0xc4>)
 8000814:	701a      	strb	r2, [r3, #0]
			}
		}
		LCD_Draw_Circle_Fill(previous_position,ROW_SIX,12,LCD_COLOR_WHITE);
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <LCD_PieceMovement+0xc8>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000820:	220c      	movs	r2, #12
 8000822:	2119      	movs	r1, #25
 8000824:	f000 f9f6 	bl	8000c14 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(current_position,ROW_SIX,12,LCD_COLOR_BLUE);
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <LCD_PieceMovement+0xc4>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	231f      	movs	r3, #31
 8000830:	220c      	movs	r2, #12
 8000832:	2119      	movs	r1, #25
 8000834:	f000 f9ee 	bl	8000c14 <LCD_Draw_Circle_Fill>
		HAL_Delay(300);
 8000838:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800083c:	f002 f9e8 	bl	8002c10 <HAL_Delay>
	  }
	  else
	  {
		  // keep waiting for button push or piece movement
	  }
	  if(InterruptPress == 1)
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <LCD_PieceMovement+0xd0>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d102      	bne.n	800084e <LCD_PieceMovement+0xae>
	  {
		  PlayerOneChoice = 0;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <LCD_PieceMovement+0xd4>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
	while(PlayerOneChoice)
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <LCD_PieceMovement+0xd4>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1a7      	bne.n	80007a6 <LCD_PieceMovement+0x6>
	  }
	}


}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000094 	.word	0x20000094
 8000860:	08007274 	.word	0x08007274
 8000864:	20000001 	.word	0x20000001
 8000868:	2000009e 	.word	0x2000009e
 800086c:	2000009d 	.word	0x2000009d
 8000870:	2000009c 	.word	0x2000009c
 8000874:	20000000 	.word	0x20000000

08000878 <EXTI0_IRQHandler>:



// Button interrupt
void EXTI0_IRQHandler()
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800087c:	2001      	movs	r0, #1
 800087e:	f002 fdcf 	bl	8003420 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
	InterruptPress = 1;
 8000882:	4b02      	ldr	r3, [pc, #8]	@ (800088c <EXTI0_IRQHandler+0x14>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
	//__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI0_IRQn);
	//HAL_NVIC_EnableIRQ(EXTI0_IRQn);

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000009c 	.word	0x2000009c

08000890 <InitButtonInterrupts>:
		return false;
	}
}*/

void InitButtonInterrupts()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef      Config;
		Config.Mode =         GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089a:	60bb      	str	r3, [r7, #8]
		Config.Speed =        GPIO_SPEED_FREQ_MEDIUM;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
		Config.Pull =         GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
		Config.Pin =          BUTTON_PIN_NUM;
 80008a4:	2301      	movs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <InitButtonInterrupts+0x6c>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b0:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <InitButtonInterrupts+0x6c>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <InitButtonInterrupts+0x6c>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]
		HAL_GPIO_Init(GPIOA, &Config);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4619      	mov	r1, r3
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <InitButtonInterrupts+0x70>)
 80008ca:	f002 fad7 	bl	8002e7c <HAL_GPIO_Init>

		SYSCFG->EXTICR[0] |= (0x0 << (4 * BUTTON_PIN_NUM));
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <InitButtonInterrupts+0x74>)
 80008d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000904 <InitButtonInterrupts+0x74>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	6093      	str	r3, [r2, #8]
		EXTI->IMR |= (1 << BUTTON_PIN_NUM);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <InitButtonInterrupts+0x78>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a0b      	ldr	r2, [pc, #44]	@ (8000908 <InitButtonInterrupts+0x78>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6013      	str	r3, [r2, #0]
		EXTI->RTSR |= (1 << BUTTON_PIN_NUM);
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <InitButtonInterrupts+0x78>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <InitButtonInterrupts+0x78>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6093      	str	r3, [r2, #8]

		//HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ee:	2006      	movs	r0, #6
 80008f0:	f002 faa9 	bl	8002e46 <HAL_NVIC_EnableIRQ>
}
 80008f4:	bf00      	nop
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40013800 	.word	0x40013800
 8000908:	40013c00 	.word	0x40013c00

0800090c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08c      	sub	sp, #48	@ 0x30
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	4b5a      	ldr	r3, [pc, #360]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	4a59      	ldr	r2, [pc, #356]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 800091c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000920:	6453      	str	r3, [r2, #68]	@ 0x44
 8000922:	4b57      	ldr	r3, [pc, #348]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800092a:	61bb      	str	r3, [r7, #24]
 800092c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	4b53      	ldr	r3, [pc, #332]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a52      	ldr	r2, [pc, #328]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b50      	ldr	r3, [pc, #320]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a4b      	ldr	r2, [pc, #300]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b49      	ldr	r3, [pc, #292]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b45      	ldr	r3, [pc, #276]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a44      	ldr	r2, [pc, #272]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b42      	ldr	r3, [pc, #264]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b3e      	ldr	r3, [pc, #248]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b3b      	ldr	r3, [pc, #236]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b37      	ldr	r3, [pc, #220]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a36      	ldr	r2, [pc, #216]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0320 	and.w	r3, r3, #32
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b30      	ldr	r3, [pc, #192]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 80009c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000a80 <LCD_GPIO_Init+0x174>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80009d6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009da:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80009e4:	2302      	movs	r3, #2
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80009e8:	230e      	movs	r3, #14
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4824      	ldr	r0, [pc, #144]	@ (8000a84 <LCD_GPIO_Init+0x178>)
 80009f4:	f002 fa42 	bl	8002e7c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80009f8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009fc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4820      	ldr	r0, [pc, #128]	@ (8000a88 <LCD_GPIO_Init+0x17c>)
 8000a06:	f002 fa39 	bl	8002e7c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000a0a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	481d      	ldr	r0, [pc, #116]	@ (8000a8c <LCD_GPIO_Init+0x180>)
 8000a18:	f002 fa30 	bl	8002e7c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000a1c:	2348      	movs	r3, #72	@ 0x48
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <LCD_GPIO_Init+0x184>)
 8000a28:	f002 fa28 	bl	8002e7c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4816      	ldr	r0, [pc, #88]	@ (8000a94 <LCD_GPIO_Init+0x188>)
 8000a3a:	f002 fa1f 	bl	8002e7c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a3e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000a42:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4813      	ldr	r0, [pc, #76]	@ (8000a98 <LCD_GPIO_Init+0x18c>)
 8000a4c:	f002 fa16 	bl	8002e7c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a50:	2303      	movs	r3, #3
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a54:	2309      	movs	r3, #9
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480a      	ldr	r0, [pc, #40]	@ (8000a88 <LCD_GPIO_Init+0x17c>)
 8000a60:	f002 fa0c 	bl	8002e7c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <LCD_GPIO_Init+0x18c>)
 8000a72:	f002 fa03 	bl	8002e7c <HAL_GPIO_Init>
}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	@ 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40021400 	.word	0x40021400
 8000a98:	40021800 	.word	0x40021800

08000a9c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b090      	sub	sp, #64	@ 0x40
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000aaa:	23f0      	movs	r3, #240	@ 0xf0
 8000aac:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000ab2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ab6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000abc:	23ff      	movs	r3, #255	@ 0xff
 8000abe:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000aca:	2305      	movs	r3, #5
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <LTCD_Layer_Init+0x78>)
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000ad8:	23f0      	movs	r3, #240	@ 0xf0
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000adc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <LTCD_Layer_Init+0x7c>)
 8000afe:	f003 fe23 	bl	8004748 <HAL_LTDC_ConfigLayer>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000b08:	f000 faa4 	bl	8001054 <LCD_Error_Handler>
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	3740      	adds	r7, #64	@ 0x40
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000017c 	.word	0x2000017c
 8000b18:	200000a0 	.word	0x200000a0

08000b1c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000b20:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b22:	4a2b      	ldr	r2, [pc, #172]	@ (8000bd0 <LTCD__Init+0xb4>)
 8000b24:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000b26:	4b29      	ldr	r3, [pc, #164]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b28:	2209      	movs	r2, #9
 8000b2a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000b2c:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000b32:	4b26      	ldr	r3, [pc, #152]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b34:	221d      	movs	r2, #29
 8000b36:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000b38:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000b3e:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b40:	f240 120d 	movw	r2, #269	@ 0x10d
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b48:	f240 1243 	movw	r2, #323	@ 0x143
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b50:	f240 1217 	movw	r2, #279	@ 0x117
 8000b54:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b58:	f240 1247 	movw	r2, #327	@ 0x147
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <LTCD__Init+0xb8>)
 8000b78:	2208      	movs	r2, #8
 8000b7a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <LTCD__Init+0xb8>)
 8000b7e:	22c0      	movs	r2, #192	@ 0xc0
 8000b80:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <LTCD__Init+0xb8>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <LTCD__Init+0xb8>)
 8000b8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b8e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b90:	4810      	ldr	r0, [pc, #64]	@ (8000bd4 <LTCD__Init+0xb8>)
 8000b92:	f004 fc33 	bl	80053fc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <LTCD__Init+0xb0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <LTCD__Init+0xb0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <LTCD__Init+0xb0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000bae:	f7ff fead 	bl	800090c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <LTCD__Init+0xb0>)
 8000bb4:	f003 fcf8 	bl	80045a8 <HAL_LTDC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000bbe:	f000 fa49 	bl	8001054 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000bc2:	f000 fa64 	bl	800108e <ili9341_Init>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000a0 	.word	0x200000a0
 8000bd0:	40016800 	.word	0x40016800
 8000bd4:	20000148 	.word	0x20000148

08000bd8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	460b      	mov	r3, r1
 8000be4:	80bb      	strh	r3, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000bea:	88ba      	ldrh	r2, [r7, #4]
 8000bec:	4613      	mov	r3, r2
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4905      	ldr	r1, [pc, #20]	@ (8000c10 <LCD_Draw_Pixel+0x38>)
 8000bfc:	887a      	ldrh	r2, [r7, #2]
 8000bfe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000017c 	.word	0x2000017c

08000c14 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	4603      	mov	r3, r0
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	425b      	negs	r3, r3
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	81fb      	strh	r3, [r7, #14]
 8000c3a:	e034      	b.n	8000ca6 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	425b      	negs	r3, r3
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	81bb      	strh	r3, [r7, #12]
 8000c44:	e024      	b.n	8000c90 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000c46:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c4e:	fb03 f202 	mul.w	r2, r3, r2
 8000c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c56:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c5a:	fb01 f303 	mul.w	r3, r1, r3
 8000c5e:	441a      	add	r2, r3
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	8879      	ldrh	r1, [r7, #2]
 8000c64:	fb01 f303 	mul.w	r3, r1, r3
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dc0b      	bgt.n	8000c84 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000c6c:	89ba      	ldrh	r2, [r7, #12]
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	4413      	add	r3, r2
 8000c72:	b298      	uxth	r0, r3
 8000c74:	89fa      	ldrh	r2, [r7, #14]
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	883a      	ldrh	r2, [r7, #0]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f7ff ffaa 	bl	8000bd8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000c84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	81bb      	strh	r3, [r7, #12]
 8000c90:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	ddd5      	ble.n	8000c46 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000c9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	81fb      	strh	r3, [r7, #14]
 8000ca6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	ddc5      	ble.n	8000c3c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}

08000cba <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000cba:	b590      	push	{r4, r7, lr}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4623      	mov	r3, r4
 8000cca:	80fb      	strh	r3, [r7, #6]
 8000ccc:	4603      	mov	r3, r0
 8000cce:	80bb      	strh	r3, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	81fb      	strh	r3, [r7, #14]
 8000cdc:	e00b      	b.n	8000cf6 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000cde:	89fa      	ldrh	r2, [r7, #14]
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b299      	uxth	r1, r3
 8000ce6:	883a      	ldrh	r2, [r7, #0]
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff74 	bl	8000bd8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000cf0:	89fb      	ldrh	r3, [r7, #14]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	81fb      	strh	r3, [r7, #14]
 8000cf6:	89fa      	ldrh	r2, [r7, #14]
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3ef      	bcc.n	8000cde <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	4623      	mov	r3, r4
 8000d18:	80fb      	strh	r3, [r7, #6]
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80bb      	strh	r3, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	807b      	strh	r3, [r7, #2]
 8000d22:	4613      	mov	r3, r2
 8000d24:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	81fb      	strh	r3, [r7, #14]
 8000d2a:	e00b      	b.n	8000d44 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000d2c:	88fa      	ldrh	r2, [r7, #6]
 8000d2e:	89fb      	ldrh	r3, [r7, #14]
 8000d30:	4413      	add	r3, r2
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	883a      	ldrh	r2, [r7, #0]
 8000d36:	88b9      	ldrh	r1, [r7, #4]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff4d 	bl	8000bd8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	3301      	adds	r3, #1
 8000d42:	81fb      	strh	r3, [r7, #14]
 8000d44:	89fa      	ldrh	r2, [r7, #14]
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d3ef      	bcc.n	8000d2c <LCD_Draw_Horizontal_Line+0x24>
  }


}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
	...

08000d58 <LCD_Clear>:



void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10e      	bne.n	8000d8c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	e007      	b.n	8000d84 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d74:	4908      	ldr	r1, [pc, #32]	@ (8000d98 <LCD_Clear+0x40>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	88ba      	ldrh	r2, [r7, #4]
 8000d7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d8a:	d3f3      	bcc.n	8000d74 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	2000017c 	.word	0x2000017c

08000d9c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000da6:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <LCD_SetTextColor+0x1c>)
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	8013      	strh	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000002 	.word	0x20000002

08000dbc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <LCD_SetFont+0x1c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000178 	.word	0x20000178

08000ddc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	603a      	str	r2, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]
 8000de8:	460b      	mov	r3, r1
 8000dea:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	e04c      	b.n	8000e94 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	e03f      	b.n	8000e80 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	683a      	ldr	r2, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <LCD_Draw_Char+0xd0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	4a27      	ldr	r2, [pc, #156]	@ (8000eb0 <LCD_Draw_Char+0xd4>)
 8000e14:	fba2 2303 	umull	r2, r3, r2, r3
 8000e18:	08db      	lsrs	r3, r3, #3
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	2280      	movs	r2, #128	@ 0x80
 8000e20:	409a      	lsls	r2, r3
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	fa42 f303 	asr.w	r3, r2, r3
 8000e28:	400b      	ands	r3, r1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <LCD_Draw_Char+0x5c>
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <LCD_Draw_Char+0xd0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	889b      	ldrh	r3, [r3, #4]
 8000e34:	2b0c      	cmp	r3, #12
 8000e36:	d920      	bls.n	8000e7a <LCD_Draw_Char+0x9e>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	fa42 f303 	asr.w	r3, r2, r3
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d104      	bne.n	8000e5c <LCD_Draw_Char+0x80>
 8000e52:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <LCD_Draw_Char+0xd0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	2b0c      	cmp	r3, #12
 8000e5a:	d80e      	bhi.n	8000e7a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4413      	add	r3, r2
 8000e64:	b298      	uxth	r0, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	88bb      	ldrh	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <LCD_Draw_Char+0xd8>)
 8000e72:	8812      	ldrh	r2, [r2, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff feaf 	bl	8000bd8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <LCD_Draw_Char+0xd0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	889b      	ldrh	r3, [r3, #4]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d3b8      	bcc.n	8000e00 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <LCD_Draw_Char+0xd0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	88db      	ldrh	r3, [r3, #6]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d3ab      	bcc.n	8000dfa <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000178 	.word	0x20000178
 8000eb0:	aaaaaaab 	.word	0xaaaaaaab
 8000eb4:	20000002 	.word	0x20000002

08000eb8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	3b20      	subs	r3, #32
 8000ece:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <LCD_DisplayChar+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	4907      	ldr	r1, [pc, #28]	@ (8000ef8 <LCD_DisplayChar+0x40>)
 8000eda:	6809      	ldr	r1, [r1, #0]
 8000edc:	88c9      	ldrh	r1, [r1, #6]
 8000ede:	fb01 f303 	mul.w	r3, r1, r3
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	441a      	add	r2, r3
 8000ee6:	88b9      	ldrh	r1, [r7, #4]
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff76 	bl	8000ddc <LCD_Draw_Char>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000178 	.word	0x20000178

08000efc <visualDemo>:

void visualDemo(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	// This for loop just illustrates how with using logic and for loops, you can create interesting things
	// this may or not be useful ;)
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000f02:	2300      	movs	r3, #0
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	e022      	b.n	8000f4e <visualDemo+0x52>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000f08:	2300      	movs	r3, #0
 8000f0a:	80fb      	strh	r3, [r7, #6]
 8000f0c:	e019      	b.n	8000f42 <visualDemo+0x46>
			if (x & 32)
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d009      	beq.n	8000f2c <visualDemo+0x30>
				frameBuffer[x*y] = LCD_COLOR_WHITE;
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	88ba      	ldrh	r2, [r7, #4]
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	4a4a      	ldr	r2, [pc, #296]	@ (800104c <visualDemo+0x150>)
 8000f22:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f2a:	e007      	b.n	8000f3c <visualDemo+0x40>
			else
				frameBuffer[x*y] = LCD_COLOR_BLACK;
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	88ba      	ldrh	r2, [r7, #4]
 8000f30:	fb02 f303 	mul.w	r3, r2, r3
 8000f34:	4a45      	ldr	r2, [pc, #276]	@ (800104c <visualDemo+0x150>)
 8000f36:	2100      	movs	r1, #0
 8000f38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	80fb      	strh	r3, [r7, #6]
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2bef      	cmp	r3, #239	@ 0xef
 8000f46:	d9e2      	bls.n	8000f0e <visualDemo+0x12>
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f54:	d3d8      	bcc.n	8000f08 <visualDemo+0xc>
		}
	}

	HAL_Delay(1500);
 8000f56:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f5a:	f001 fe59 	bl	8002c10 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_GREEN);
 8000f5e:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff fef8 	bl	8000d58 <LCD_Clear>
	HAL_Delay(1500);
 8000f68:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f6c:	f001 fe50 	bl	8002c10 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_RED);
 8000f70:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff feef 	bl	8000d58 <LCD_Clear>
	HAL_Delay(1500);
 8000f7a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f7e:	f001 fe47 	bl	8002c10 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000f82:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fee6 	bl	8000d58 <LCD_Clear>
	LCD_Draw_Vertical_Line(10,10,250,LCD_COLOR_MAGENTA);
 8000f8c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000f90:	22fa      	movs	r2, #250	@ 0xfa
 8000f92:	210a      	movs	r1, #10
 8000f94:	200a      	movs	r0, #10
 8000f96:	f7ff fe90 	bl	8000cba <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000f9a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f9e:	f001 fe37 	bl	8002c10 <HAL_Delay>
	LCD_Draw_Vertical_Line(230,10,250,LCD_COLOR_MAGENTA);
 8000fa2:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000fa6:	22fa      	movs	r2, #250	@ 0xfa
 8000fa8:	210a      	movs	r1, #10
 8000faa:	20e6      	movs	r0, #230	@ 0xe6
 8000fac:	f7ff fe85 	bl	8000cba <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000fb0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000fb4:	f001 fe2c 	bl	8002c10 <HAL_Delay>

	LCD_Draw_Circle_Fill(125,150,20,LCD_COLOR_BLACK);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2214      	movs	r2, #20
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	207d      	movs	r0, #125	@ 0x7d
 8000fc0:	f7ff fe28 	bl	8000c14 <LCD_Draw_Circle_Fill>
	HAL_Delay(2000);
 8000fc4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fc8:	f001 fe22 	bl	8002c10 <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_BLUE);
 8000fcc:	211f      	movs	r1, #31
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f7ff fec2 	bl	8000d58 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fee1 	bl	8000d9c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000fda:	481d      	ldr	r0, [pc, #116]	@ (8001050 <visualDemo+0x154>)
 8000fdc:	f7ff feee 	bl	8000dbc <LCD_SetFont>

	LCD_DisplayChar(100,140,'H');
 8000fe0:	2248      	movs	r2, #72	@ 0x48
 8000fe2:	218c      	movs	r1, #140	@ 0x8c
 8000fe4:	2064      	movs	r0, #100	@ 0x64
 8000fe6:	f7ff ff67 	bl	8000eb8 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'e');
 8000fea:	2265      	movs	r2, #101	@ 0x65
 8000fec:	218c      	movs	r1, #140	@ 0x8c
 8000fee:	2073      	movs	r0, #115	@ 0x73
 8000ff0:	f7ff ff62 	bl	8000eb8 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'l');
 8000ff4:	226c      	movs	r2, #108	@ 0x6c
 8000ff6:	218c      	movs	r1, #140	@ 0x8c
 8000ff8:	207d      	movs	r0, #125	@ 0x7d
 8000ffa:	f7ff ff5d 	bl	8000eb8 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'l');
 8000ffe:	226c      	movs	r2, #108	@ 0x6c
 8001000:	218c      	movs	r1, #140	@ 0x8c
 8001002:	2082      	movs	r0, #130	@ 0x82
 8001004:	f7ff ff58 	bl	8000eb8 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'o');
 8001008:	226f      	movs	r2, #111	@ 0x6f
 800100a:	218c      	movs	r1, #140	@ 0x8c
 800100c:	208c      	movs	r0, #140	@ 0x8c
 800100e:	f7ff ff53 	bl	8000eb8 <LCD_DisplayChar>

	LCD_DisplayChar(100,160,'W');
 8001012:	2257      	movs	r2, #87	@ 0x57
 8001014:	21a0      	movs	r1, #160	@ 0xa0
 8001016:	2064      	movs	r0, #100	@ 0x64
 8001018:	f7ff ff4e 	bl	8000eb8 <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'o');
 800101c:	226f      	movs	r2, #111	@ 0x6f
 800101e:	21a0      	movs	r1, #160	@ 0xa0
 8001020:	2073      	movs	r0, #115	@ 0x73
 8001022:	f7ff ff49 	bl	8000eb8 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'r');
 8001026:	2272      	movs	r2, #114	@ 0x72
 8001028:	21a0      	movs	r1, #160	@ 0xa0
 800102a:	207d      	movs	r0, #125	@ 0x7d
 800102c:	f7ff ff44 	bl	8000eb8 <LCD_DisplayChar>
	LCD_DisplayChar(130,160,'l');
 8001030:	226c      	movs	r2, #108	@ 0x6c
 8001032:	21a0      	movs	r1, #160	@ 0xa0
 8001034:	2082      	movs	r0, #130	@ 0x82
 8001036:	f7ff ff3f 	bl	8000eb8 <LCD_DisplayChar>
	LCD_DisplayChar(140,160,'d');
 800103a:	2264      	movs	r2, #100	@ 0x64
 800103c:	21a0      	movs	r1, #160	@ 0xa0
 800103e:	208c      	movs	r0, #140	@ 0x8c
 8001040:	f7ff ff3a 	bl	8000eb8 <LCD_DisplayChar>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000017c 	.word	0x2000017c
 8001050:	20000004 	.word	0x20000004

08001054 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <LCD_Error_Handler+0x8>

08001060 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001064:	f001 f933 	bl	80022ce <STMPE811_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b02      	cmp	r3, #2
 800106c:	d001      	beq.n	8001072 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800106e:	bf00      	nop
 8001070:	e7fd      	b.n	800106e <InitializeLCDTouch+0xe>
  }
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}

08001076 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f001 f9dd 	bl	800243e <STMPE811_ReadTouch>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001092:	f000 f9ff 	bl	8001494 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001096:	20ca      	movs	r0, #202	@ 0xca
 8001098:	f000 f943 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800109c:	20c3      	movs	r0, #195	@ 0xc3
 800109e:	f000 f94d 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80010a2:	2008      	movs	r0, #8
 80010a4:	f000 f94a 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80010a8:	2050      	movs	r0, #80	@ 0x50
 80010aa:	f000 f947 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80010ae:	20cf      	movs	r0, #207	@ 0xcf
 80010b0:	f000 f937 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 f941 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80010ba:	20c1      	movs	r0, #193	@ 0xc1
 80010bc:	f000 f93e 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80010c0:	2030      	movs	r0, #48	@ 0x30
 80010c2:	f000 f93b 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80010c6:	20ed      	movs	r0, #237	@ 0xed
 80010c8:	f000 f92b 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80010cc:	2064      	movs	r0, #100	@ 0x64
 80010ce:	f000 f935 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80010d2:	2003      	movs	r0, #3
 80010d4:	f000 f932 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80010d8:	2012      	movs	r0, #18
 80010da:	f000 f92f 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80010de:	2081      	movs	r0, #129	@ 0x81
 80010e0:	f000 f92c 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80010e4:	20e8      	movs	r0, #232	@ 0xe8
 80010e6:	f000 f91c 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80010ea:	2085      	movs	r0, #133	@ 0x85
 80010ec:	f000 f926 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 f923 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80010f6:	2078      	movs	r0, #120	@ 0x78
 80010f8:	f000 f920 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80010fc:	20cb      	movs	r0, #203	@ 0xcb
 80010fe:	f000 f910 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001102:	2039      	movs	r0, #57	@ 0x39
 8001104:	f000 f91a 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001108:	202c      	movs	r0, #44	@ 0x2c
 800110a:	f000 f917 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f914 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001114:	2034      	movs	r0, #52	@ 0x34
 8001116:	f000 f911 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800111a:	2002      	movs	r0, #2
 800111c:	f000 f90e 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001120:	20f7      	movs	r0, #247	@ 0xf7
 8001122:	f000 f8fe 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001126:	2020      	movs	r0, #32
 8001128:	f000 f908 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800112c:	20ea      	movs	r0, #234	@ 0xea
 800112e:	f000 f8f8 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f902 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001138:	2000      	movs	r0, #0
 800113a:	f000 f8ff 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800113e:	20b1      	movs	r0, #177	@ 0xb1
 8001140:	f000 f8ef 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f8f9 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800114a:	201b      	movs	r0, #27
 800114c:	f000 f8f6 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001150:	20b6      	movs	r0, #182	@ 0xb6
 8001152:	f000 f8e6 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001156:	200a      	movs	r0, #10
 8001158:	f000 f8f0 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800115c:	20a2      	movs	r0, #162	@ 0xa2
 800115e:	f000 f8ed 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001162:	20c0      	movs	r0, #192	@ 0xc0
 8001164:	f000 f8dd 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001168:	2010      	movs	r0, #16
 800116a:	f000 f8e7 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800116e:	20c1      	movs	r0, #193	@ 0xc1
 8001170:	f000 f8d7 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001174:	2010      	movs	r0, #16
 8001176:	f000 f8e1 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800117a:	20c5      	movs	r0, #197	@ 0xc5
 800117c:	f000 f8d1 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001180:	2045      	movs	r0, #69	@ 0x45
 8001182:	f000 f8db 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001186:	2015      	movs	r0, #21
 8001188:	f000 f8d8 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800118c:	20c7      	movs	r0, #199	@ 0xc7
 800118e:	f000 f8c8 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001192:	2090      	movs	r0, #144	@ 0x90
 8001194:	f000 f8d2 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001198:	2036      	movs	r0, #54	@ 0x36
 800119a:	f000 f8c2 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800119e:	20c8      	movs	r0, #200	@ 0xc8
 80011a0:	f000 f8cc 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80011a4:	20f2      	movs	r0, #242	@ 0xf2
 80011a6:	f000 f8bc 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 f8c6 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80011b0:	20b0      	movs	r0, #176	@ 0xb0
 80011b2:	f000 f8b6 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80011b6:	20c2      	movs	r0, #194	@ 0xc2
 80011b8:	f000 f8c0 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80011bc:	20b6      	movs	r0, #182	@ 0xb6
 80011be:	f000 f8b0 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80011c2:	200a      	movs	r0, #10
 80011c4:	f000 f8ba 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80011c8:	20a7      	movs	r0, #167	@ 0xa7
 80011ca:	f000 f8b7 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80011ce:	2027      	movs	r0, #39	@ 0x27
 80011d0:	f000 f8b4 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80011d4:	2004      	movs	r0, #4
 80011d6:	f000 f8b1 	bl	800133c <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80011da:	202a      	movs	r0, #42	@ 0x2a
 80011dc:	f000 f8a1 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f8ab 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f8a8 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f8a5 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80011f2:	20ef      	movs	r0, #239	@ 0xef
 80011f4:	f000 f8a2 	bl	800133c <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80011f8:	202b      	movs	r0, #43	@ 0x2b
 80011fa:	f000 f892 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f89c 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f899 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800120a:	2001      	movs	r0, #1
 800120c:	f000 f896 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001210:	203f      	movs	r0, #63	@ 0x3f
 8001212:	f000 f893 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001216:	20f6      	movs	r0, #246	@ 0xf6
 8001218:	f000 f883 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800121c:	2001      	movs	r0, #1
 800121e:	f000 f88d 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f88a 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001228:	2006      	movs	r0, #6
 800122a:	f000 f887 	bl	800133c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800122e:	202c      	movs	r0, #44	@ 0x2c
 8001230:	f000 f877 	bl	8001322 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001234:	20c8      	movs	r0, #200	@ 0xc8
 8001236:	f000 f9e9 	bl	800160c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800123a:	2026      	movs	r0, #38	@ 0x26
 800123c:	f000 f871 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001240:	2001      	movs	r0, #1
 8001242:	f000 f87b 	bl	800133c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001246:	20e0      	movs	r0, #224	@ 0xe0
 8001248:	f000 f86b 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800124c:	200f      	movs	r0, #15
 800124e:	f000 f875 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001252:	2029      	movs	r0, #41	@ 0x29
 8001254:	f000 f872 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001258:	2024      	movs	r0, #36	@ 0x24
 800125a:	f000 f86f 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800125e:	200c      	movs	r0, #12
 8001260:	f000 f86c 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001264:	200e      	movs	r0, #14
 8001266:	f000 f869 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800126a:	2009      	movs	r0, #9
 800126c:	f000 f866 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001270:	204e      	movs	r0, #78	@ 0x4e
 8001272:	f000 f863 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001276:	2078      	movs	r0, #120	@ 0x78
 8001278:	f000 f860 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800127c:	203c      	movs	r0, #60	@ 0x3c
 800127e:	f000 f85d 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001282:	2009      	movs	r0, #9
 8001284:	f000 f85a 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001288:	2013      	movs	r0, #19
 800128a:	f000 f857 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800128e:	2005      	movs	r0, #5
 8001290:	f000 f854 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001294:	2017      	movs	r0, #23
 8001296:	f000 f851 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800129a:	2011      	movs	r0, #17
 800129c:	f000 f84e 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f84b 	bl	800133c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80012a6:	20e1      	movs	r0, #225	@ 0xe1
 80012a8:	f000 f83b 	bl	8001322 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 f845 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80012b2:	2016      	movs	r0, #22
 80012b4:	f000 f842 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80012b8:	201b      	movs	r0, #27
 80012ba:	f000 f83f 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80012be:	2004      	movs	r0, #4
 80012c0:	f000 f83c 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80012c4:	2011      	movs	r0, #17
 80012c6:	f000 f839 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80012ca:	2007      	movs	r0, #7
 80012cc:	f000 f836 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80012d0:	2031      	movs	r0, #49	@ 0x31
 80012d2:	f000 f833 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80012d6:	2033      	movs	r0, #51	@ 0x33
 80012d8:	f000 f830 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80012dc:	2042      	movs	r0, #66	@ 0x42
 80012de:	f000 f82d 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80012e2:	2005      	movs	r0, #5
 80012e4:	f000 f82a 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80012e8:	200c      	movs	r0, #12
 80012ea:	f000 f827 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80012ee:	200a      	movs	r0, #10
 80012f0:	f000 f824 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80012f4:	2028      	movs	r0, #40	@ 0x28
 80012f6:	f000 f821 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80012fa:	202f      	movs	r0, #47	@ 0x2f
 80012fc:	f000 f81e 	bl	800133c <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001300:	200f      	movs	r0, #15
 8001302:	f000 f81b 	bl	800133c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001306:	2011      	movs	r0, #17
 8001308:	f000 f80b 	bl	8001322 <ili9341_Write_Reg>
  LCD_Delay(200);
 800130c:	20c8      	movs	r0, #200	@ 0xc8
 800130e:	f000 f97d 	bl	800160c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001312:	2029      	movs	r0, #41	@ 0x29
 8001314:	f000 f805 	bl	8001322 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001318:	202c      	movs	r0, #44	@ 0x2c
 800131a:	f000 f802 	bl	8001322 <ili9341_Write_Reg>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}

08001322 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f94a 	bl	80015c8 <LCD_IO_WriteReg>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f91b 	bl	8001584 <LCD_IO_WriteData>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800135c:	4819      	ldr	r0, [pc, #100]	@ (80013c4 <SPI_Init+0x6c>)
 800135e:	f004 fc2c 	bl	8005bba <HAL_SPI_GetState>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d12b      	bne.n	80013c0 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001368:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <SPI_Init+0x6c>)
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <SPI_Init+0x70>)
 800136c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <SPI_Init+0x6c>)
 8001370:	2218      	movs	r2, #24
 8001372:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <SPI_Init+0x6c>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <SPI_Init+0x6c>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001380:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <SPI_Init+0x6c>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001386:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <SPI_Init+0x6c>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <SPI_Init+0x6c>)
 800138e:	2207      	movs	r2, #7
 8001390:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001392:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <SPI_Init+0x6c>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <SPI_Init+0x6c>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <SPI_Init+0x6c>)
 80013a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <SPI_Init+0x6c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SPI_Init+0x6c>)
 80013ae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013b2:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <SPI_Init+0x6c>)
 80013b6:	f000 f833 	bl	8001420 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80013ba:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <SPI_Init+0x6c>)
 80013bc:	f004 fa08 	bl	80057d0 <HAL_SPI_Init>
  }
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2002597c 	.word	0x2002597c
 80013c8:	40015000 	.word	0x40015000

080013cc <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <SPI_Write+0x34>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1db9      	adds	r1, r7, #6
 80013e0:	2201      	movs	r2, #1
 80013e2:	4808      	ldr	r0, [pc, #32]	@ (8001404 <SPI_Write+0x38>)
 80013e4:	f004 faa5 	bl	8005932 <HAL_SPI_Transmit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80013f2:	f000 f809 	bl	8001408 <SPI_Error>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000000c 	.word	0x2000000c
 8001404:	2002597c 	.word	0x2002597c

08001408 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800140c:	4803      	ldr	r0, [pc, #12]	@ (800141c <SPI_Error+0x14>)
 800140e:	f004 fa68 	bl	80058e2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001412:	f7ff ffa1 	bl	8001358 <SPI_Init>
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2002597c 	.word	0x2002597c

08001420 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	4b17      	ldr	r3, [pc, #92]	@ (800148c <SPI_MspInit+0x6c>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	4a16      	ldr	r2, [pc, #88]	@ (800148c <SPI_MspInit+0x6c>)
 8001432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001436:	6453      	str	r3, [r2, #68]	@ 0x44
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <SPI_MspInit+0x6c>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <SPI_MspInit+0x6c>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144c:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <SPI_MspInit+0x6c>)
 800144e:	f043 0320 	orr.w	r3, r3, #32
 8001452:	6313      	str	r3, [r2, #48]	@ 0x30
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <SPI_MspInit+0x6c>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001460:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800146a:	2302      	movs	r3, #2
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800146e:	2301      	movs	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001472:	2305      	movs	r3, #5
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <SPI_MspInit+0x70>)
 800147e:	f001 fcfd 	bl	8002e7c <HAL_GPIO_Init>
}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	@ 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40021400 	.word	0x40021400

08001494 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800149a:	4b36      	ldr	r3, [pc, #216]	@ (8001574 <LCD_IO_Init+0xe0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d164      	bne.n	800156c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80014a2:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <LCD_IO_Init+0xe0>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <LCD_IO_Init+0xe4>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	4a31      	ldr	r2, [pc, #196]	@ (8001578 <LCD_IO_Init+0xe4>)
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <LCD_IO_Init+0xe4>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80014c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4619      	mov	r1, r3
 80014dc:	4827      	ldr	r0, [pc, #156]	@ (800157c <LCD_IO_Init+0xe8>)
 80014de:	f001 fccd 	bl	8002e7c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <LCD_IO_Init+0xe4>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a23      	ldr	r2, [pc, #140]	@ (8001578 <LCD_IO_Init+0xe4>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <LCD_IO_Init+0xe4>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80014fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001502:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	4819      	ldr	r0, [pc, #100]	@ (800157c <LCD_IO_Init+0xe8>)
 8001518:	f001 fcb0 	bl	8002e7c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <LCD_IO_Init+0xe4>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001524:	4a14      	ldr	r2, [pc, #80]	@ (8001578 <LCD_IO_Init+0xe4>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6313      	str	r3, [r2, #48]	@ 0x30
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <LCD_IO_Init+0xe4>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001538:	2304      	movs	r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	@ (8001580 <LCD_IO_Init+0xec>)
 8001550:	f001 fc94 	bl	8002e7c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001554:	2200      	movs	r2, #0
 8001556:	2104      	movs	r1, #4
 8001558:	4809      	ldr	r0, [pc, #36]	@ (8001580 <LCD_IO_Init+0xec>)
 800155a:	f001 ff47 	bl	80033ec <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800155e:	2201      	movs	r2, #1
 8001560:	2104      	movs	r1, #4
 8001562:	4807      	ldr	r0, [pc, #28]	@ (8001580 <LCD_IO_Init+0xec>)
 8001564:	f001 ff42 	bl	80033ec <HAL_GPIO_WritePin>

    SPI_Init();
 8001568:	f7ff fef6 	bl	8001358 <SPI_Init>
  }
}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200259d4 	.word	0x200259d4
 8001578:	40023800 	.word	0x40023800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40020800 	.word	0x40020800

08001584 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001594:	480a      	ldr	r0, [pc, #40]	@ (80015c0 <LCD_IO_WriteData+0x3c>)
 8001596:	f001 ff29 	bl	80033ec <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800159a:	2200      	movs	r2, #0
 800159c:	2104      	movs	r1, #4
 800159e:	4809      	ldr	r0, [pc, #36]	@ (80015c4 <LCD_IO_WriteData+0x40>)
 80015a0:	f001 ff24 	bl	80033ec <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff10 	bl	80013cc <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015ac:	2201      	movs	r2, #1
 80015ae:	2104      	movs	r1, #4
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <LCD_IO_WriteData+0x40>)
 80015b2:	f001 ff1b 	bl	80033ec <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40020800 	.word	0x40020800

080015c8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015d8:	480a      	ldr	r0, [pc, #40]	@ (8001604 <LCD_IO_WriteReg+0x3c>)
 80015da:	f001 ff07 	bl	80033ec <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80015de:	2200      	movs	r2, #0
 80015e0:	2104      	movs	r1, #4
 80015e2:	4809      	ldr	r0, [pc, #36]	@ (8001608 <LCD_IO_WriteReg+0x40>)
 80015e4:	f001 ff02 	bl	80033ec <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff feed 	bl	80013cc <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015f2:	2201      	movs	r2, #1
 80015f4:	2104      	movs	r1, #4
 80015f6:	4804      	ldr	r0, [pc, #16]	@ (8001608 <LCD_IO_WriteReg+0x40>)
 80015f8:	f001 fef8 	bl	80033ec <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40020800 	.word	0x40020800

0800160c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f001 fafb 	bl	8002c10 <HAL_Delay>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001626:	f001 fa81 	bl	8002b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162a:	f000 f819 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162e:	f000 fa09 	bl	8001a44 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001632:	f000 f8bf 	bl	80017b4 <MX_LTDC_Init>
  MX_RNG_Init();
 8001636:	f000 f96f 	bl	8001918 <MX_RNG_Init>
  MX_TIM2_Init();
 800163a:	f000 f9b7 	bl	80019ac <MX_TIM2_Init>
  MX_SPI5_Init();
 800163e:	f000 f97f 	bl	8001940 <MX_SPI5_Init>
  MX_I2C3_Init();
 8001642:	f000 f877 	bl	8001734 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001646:	f7fe ff9b 	bl	8000580 <ApplicationInit>
  InitButtonInterrupts();
 800164a:	f7ff f921 	bl	8000890 <InitButtonInterrupts>
  //LCD_Visual_Demo();
  HAL_Delay(2000);
 800164e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001652:	f001 fadd 	bl	8002c10 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 8001656:	f7fe ffb1 	bl	80005bc <LCD_Touch_Polling_Demo>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800165a:	bf00      	nop
 800165c:	e7fd      	b.n	800165a <main+0x38>
	...

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2230      	movs	r2, #48	@ 0x30
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f005 f870 	bl	8006754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <SystemClock_Config+0xcc>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a27      	ldr	r2, [pc, #156]	@ (800172c <SystemClock_Config+0xcc>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <SystemClock_Config+0xcc>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <SystemClock_Config+0xd0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <SystemClock_Config+0xd0>)
 80016aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <SystemClock_Config+0xd0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c6:	2302      	movs	r3, #2
 80016c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016da:	2302      	movs	r3, #2
 80016dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016de:	2307      	movs	r3, #7
 80016e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e2:	f107 0320 	add.w	r3, r7, #32
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fa04 	bl	8004af4 <HAL_RCC_OscConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016f2:	f000 fb55 	bl	8001da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f6:	230f      	movs	r3, #15
 80016f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fa:	2302      	movs	r3, #2
 80016fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001702:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2105      	movs	r1, #5
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fc65 	bl	8004fe4 <HAL_RCC_ClockConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001720:	f000 fb3e 	bl	8001da0 <Error_Handler>
  }
}
 8001724:	bf00      	nop
 8001726:	3750      	adds	r7, #80	@ 0x50
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <MX_I2C3_Init+0x74>)
 800173a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <MX_I2C3_Init+0x78>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_I2C3_Init+0x74>)
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <MX_I2C3_Init+0x7c>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_I2C3_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <MX_I2C3_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <MX_I2C3_Init+0x74>)
 8001752:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <MX_I2C3_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <MX_I2C3_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <MX_I2C3_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_I2C3_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <MX_I2C3_Init+0x74>)
 8001772:	f001 fe79 	bl	8003468 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 fb10 	bl	8001da0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <MX_I2C3_Init+0x74>)
 8001784:	f002 fe94 	bl	80044b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800178e:	f000 fb07 	bl	8001da0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MX_I2C3_Init+0x74>)
 8001796:	f002 fec7 	bl	8004528 <HAL_I2CEx_ConfigDigitalFilter>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80017a0:	f000 fafe 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200259d8 	.word	0x200259d8
 80017ac:	40005c00 	.word	0x40005c00
 80017b0:	000186a0 	.word	0x000186a0

080017b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b09a      	sub	sp, #104	@ 0x68
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017be:	2234      	movs	r2, #52	@ 0x34
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 ffc6 	bl	8006754 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80017c8:	463b      	mov	r3, r7
 80017ca:	2234      	movs	r2, #52	@ 0x34
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 ffc0 	bl	8006754 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80017d6:	4a4f      	ldr	r2, [pc, #316]	@ (8001914 <MX_LTDC_Init+0x160>)
 80017d8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017da:	4b4d      	ldr	r3, [pc, #308]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017ec:	4b48      	ldr	r3, [pc, #288]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80017f2:	4b47      	ldr	r3, [pc, #284]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80017f8:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80017fa:	2203      	movs	r2, #3
 80017fc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80017fe:	4b44      	ldr	r3, [pc, #272]	@ (8001910 <MX_LTDC_Init+0x15c>)
 8001800:	220e      	movs	r2, #14
 8001802:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001804:	4b42      	ldr	r3, [pc, #264]	@ (8001910 <MX_LTDC_Init+0x15c>)
 8001806:	2205      	movs	r2, #5
 8001808:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800180a:	4b41      	ldr	r3, [pc, #260]	@ (8001910 <MX_LTDC_Init+0x15c>)
 800180c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001812:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <MX_LTDC_Init+0x15c>)
 8001814:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001818:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800181a:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <MX_LTDC_Init+0x15c>)
 800181c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001820:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <MX_LTDC_Init+0x15c>)
 8001824:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001828:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800182a:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <MX_LTDC_Init+0x15c>)
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001832:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <MX_LTDC_Init+0x15c>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800183a:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <MX_LTDC_Init+0x15c>)
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001842:	4833      	ldr	r0, [pc, #204]	@ (8001910 <MX_LTDC_Init+0x15c>)
 8001844:	f002 feb0 	bl	80045a8 <HAL_LTDC_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800184e:	f000 faa7 	bl	8001da0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001862:	2300      	movs	r3, #0
 8001864:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800186e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001872:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001874:	2305      	movs	r3, #5
 8001876:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001896:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	481c      	ldr	r0, [pc, #112]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80018a0:	f002 ff52 	bl	8004748 <HAL_LTDC_ConfigLayer>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80018aa:	f000 fa79 	bl	8001da0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80018ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ce:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80018d0:	2305      	movs	r3, #5
 80018d2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_LTDC_Init+0x15c>)
 80018fa:	f002 ff25 	bl	8004748 <HAL_LTDC_ConfigLayer>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001904:	f000 fa4c 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3768      	adds	r7, #104	@ 0x68
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20025a2c 	.word	0x20025a2c
 8001914:	40016800 	.word	0x40016800

08001918 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_RNG_Init+0x20>)
 800191e:	4a07      	ldr	r2, [pc, #28]	@ (800193c <MX_RNG_Init+0x24>)
 8001920:	601a      	str	r2, [r3, #0]
  //hrng.Init.Lock = 42;
  //hrng.Init.State = 42;
  //hrng.Init.ErrorCode = 42;
  //hrng.Init.RandomNumber = 42;
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_RNG_Init+0x20>)
 8001924:	f003 ff2a 	bl	800577c <HAL_RNG_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800192e:	f000 fa37 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20025ad4 	.word	0x20025ad4
 800193c:	50060800 	.word	0x50060800

08001940 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MX_SPI5_Init+0x64>)
 8001946:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <MX_SPI5_Init+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <MX_SPI5_Init+0x64>)
 800194c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001950:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <MX_SPI5_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <MX_SPI5_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_SPI5_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <MX_SPI5_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <MX_SPI5_Init+0x64>)
 800196c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001970:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MX_SPI5_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <MX_SPI5_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <MX_SPI5_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <MX_SPI5_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <MX_SPI5_Init+0x64>)
 800198c:	220a      	movs	r2, #10
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <MX_SPI5_Init+0x64>)
 8001992:	f003 ff1d 	bl	80057d0 <HAL_SPI_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800199c:	f000 fa00 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20025ae4 	.word	0x20025ae4
 80019a8:	40015000 	.word	0x40015000

080019ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	463b      	mov	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_TIM2_Init+0x94>)
 80019ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <MX_TIM2_Init+0x94>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <MX_TIM2_Init+0x94>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019dc:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <MX_TIM2_Init+0x94>)
 80019de:	f04f 32ff 	mov.w	r2, #4294967295
 80019e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <MX_TIM2_Init+0x94>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <MX_TIM2_Init+0x94>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f0:	4813      	ldr	r0, [pc, #76]	@ (8001a40 <MX_TIM2_Init+0x94>)
 80019f2:	f004 f9cd 	bl	8005d90 <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019fc:	f000 f9d0 	bl	8001da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <MX_TIM2_Init+0x94>)
 8001a0e:	f004 fa0e 	bl	8005e2e <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a18:	f000 f9c2 	bl	8001da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <MX_TIM2_Init+0x94>)
 8001a2a:	f004 fc0d 	bl	8006248 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a34:	f000 f9b4 	bl	8001da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20025b3c 	.word	0x20025b3c

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	@ 0x38
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	4bb2      	ldr	r3, [pc, #712]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4ab1      	ldr	r2, [pc, #708]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4baf      	ldr	r3, [pc, #700]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	4bab      	ldr	r3, [pc, #684]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4aaa      	ldr	r2, [pc, #680]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001a80:	f043 0320 	orr.w	r3, r3, #32
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4ba8      	ldr	r3, [pc, #672]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	4ba4      	ldr	r3, [pc, #656]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4aa3      	ldr	r2, [pc, #652]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4ba1      	ldr	r3, [pc, #644]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	4b9d      	ldr	r3, [pc, #628]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a9c      	ldr	r2, [pc, #624]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b9a      	ldr	r3, [pc, #616]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b96      	ldr	r3, [pc, #600]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a95      	ldr	r2, [pc, #596]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b93      	ldr	r3, [pc, #588]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b8f      	ldr	r3, [pc, #572]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a8e      	ldr	r2, [pc, #568]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b8c      	ldr	r3, [pc, #560]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b88      	ldr	r3, [pc, #544]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a87      	ldr	r2, [pc, #540]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001b0c:	f043 0310 	orr.w	r3, r3, #16
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b85      	ldr	r3, [pc, #532]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b81      	ldr	r3, [pc, #516]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a80      	ldr	r2, [pc, #512]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d28 <MX_GPIO_Init+0x2e4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2116      	movs	r1, #22
 8001b3e:	487b      	ldr	r0, [pc, #492]	@ (8001d2c <MX_GPIO_Init+0x2e8>)
 8001b40:	f001 fc54 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2180      	movs	r1, #128	@ 0x80
 8001b48:	4879      	ldr	r0, [pc, #484]	@ (8001d30 <MX_GPIO_Init+0x2ec>)
 8001b4a:	f001 fc4f 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001b54:	4877      	ldr	r0, [pc, #476]	@ (8001d34 <MX_GPIO_Init+0x2f0>)
 8001b56:	f001 fc49 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001b60:	4875      	ldr	r0, [pc, #468]	@ (8001d38 <MX_GPIO_Init+0x2f4>)
 8001b62:	f001 fc43 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001b66:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b78:	230c      	movs	r3, #12
 8001b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	486e      	ldr	r0, [pc, #440]	@ (8001d3c <MX_GPIO_Init+0x2f8>)
 8001b84:	f001 f97a 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4862      	ldr	r0, [pc, #392]	@ (8001d2c <MX_GPIO_Init+0x2e8>)
 8001ba4:	f001 f96a 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001ba8:	2316      	movs	r3, #22
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	485b      	ldr	r0, [pc, #364]	@ (8001d2c <MX_GPIO_Init+0x2e8>)
 8001bc0:	f001 f95c 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001bc4:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4855      	ldr	r0, [pc, #340]	@ (8001d30 <MX_GPIO_Init+0x2ec>)
 8001bdc:	f001 f94e 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	484e      	ldr	r0, [pc, #312]	@ (8001d30 <MX_GPIO_Init+0x2ec>)
 8001bf8:	f001 f940 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c00:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4846      	ldr	r0, [pc, #280]	@ (8001d2c <MX_GPIO_Init+0x2e8>)
 8001c12:	f001 f933 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c16:	2304      	movs	r3, #4
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c26:	4619      	mov	r1, r3
 8001c28:	4845      	ldr	r0, [pc, #276]	@ (8001d40 <MX_GPIO_Init+0x2fc>)
 8001c2a:	f001 f927 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001c2e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c40:	230c      	movs	r3, #12
 8001c42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	483b      	ldr	r0, [pc, #236]	@ (8001d38 <MX_GPIO_Init+0x2f4>)
 8001c4c:	f001 f916 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001c50:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c62:	230c      	movs	r3, #12
 8001c64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4835      	ldr	r0, [pc, #212]	@ (8001d44 <MX_GPIO_Init+0x300>)
 8001c6e:	f001 f905 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001c72:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001c84:	230c      	movs	r3, #12
 8001c86:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	482c      	ldr	r0, [pc, #176]	@ (8001d40 <MX_GPIO_Init+0x2fc>)
 8001c90:	f001 f8f4 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001c94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4825      	ldr	r0, [pc, #148]	@ (8001d40 <MX_GPIO_Init+0x2fc>)
 8001caa:	f001 f8e7 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001cae:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481a      	ldr	r0, [pc, #104]	@ (8001d34 <MX_GPIO_Init+0x2f0>)
 8001ccc:	f001 f8d6 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001cd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4813      	ldr	r0, [pc, #76]	@ (8001d34 <MX_GPIO_Init+0x2f0>)
 8001ce6:	f001 f8c9 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001cea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <MX_GPIO_Init+0x2f0>)
 8001d04:	f001 f8ba 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d22:	4619      	mov	r1, r3
 8001d24:	e010      	b.n	8001d48 <MX_GPIO_Init+0x304>
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021400 	.word	0x40021400
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	4812      	ldr	r0, [pc, #72]	@ (8001d94 <MX_GPIO_Init+0x350>)
 8001d4a:	f001 f897 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001d4e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d64:	4619      	mov	r1, r3
 8001d66:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <MX_GPIO_Init+0x354>)
 8001d68:	f001 f888 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001d6c:	2360      	movs	r3, #96	@ 0x60
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d7c:	230c      	movs	r3, #12
 8001d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d84:	4619      	mov	r1, r3
 8001d86:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <MX_GPIO_Init+0x358>)
 8001d88:	f001 f878 	bl	8002e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d8c:	bf00      	nop
 8001d8e:	3738      	adds	r7, #56	@ 0x38
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40021800 	.word	0x40021800
 8001d9c:	40020400 	.word	0x40020400

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001da4:	b672      	cpsid	i
}
 8001da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <Error_Handler+0x8>

08001dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a08      	ldr	r2, [pc, #32]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_MspInit+0x4c>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dea:	2007      	movs	r0, #7
 8001dec:	f001 f804 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	@ 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a29      	ldr	r2, [pc, #164]	@ (8001ec0 <HAL_I2C_MspInit+0xc4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d14b      	bne.n	8001eb6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a20      	ldr	r2, [pc, #128]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5c:	2312      	movs	r3, #18
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4815      	ldr	r0, [pc, #84]	@ (8001ec8 <HAL_I2C_MspInit+0xcc>)
 8001e74:	f001 f802 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001e78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e7e:	2312      	movs	r3, #18
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <HAL_I2C_MspInit+0xd0>)
 8001e96:	f000 fff1 	bl	8002e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a08      	ldr	r2, [pc, #32]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001ea4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_I2C_MspInit+0xc8>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	@ 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40005c00 	.word	0x40005c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020000 	.word	0x40020000

08001ed0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b09a      	sub	sp, #104	@ 0x68
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eec:	2230      	movs	r2, #48	@ 0x30
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 fc2f 	bl	8006754 <memset>
  if(hltdc->Instance==LTDC)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a81      	ldr	r2, [pc, #516]	@ (8002100 <HAL_LTDC_MspInit+0x230>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f040 80fb 	bne.w	80020f8 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f02:	2308      	movs	r3, #8
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001f06:	23c8      	movs	r3, #200	@ 0xc8
 8001f08:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001f0e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001f12:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fa6f 	bl	80053fc <HAL_RCCEx_PeriphCLKConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001f24:	f7ff ff3c 	bl	8001da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	4b75      	ldr	r3, [pc, #468]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f30:	4a74      	ldr	r2, [pc, #464]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f36:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f38:	4b72      	ldr	r3, [pc, #456]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f40:	623b      	str	r3, [r7, #32]
 8001f42:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	4b6e      	ldr	r3, [pc, #440]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	4a6d      	ldr	r2, [pc, #436]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f4e:	f043 0320 	orr.w	r3, r3, #32
 8001f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f54:	4b6b      	ldr	r3, [pc, #428]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	4b67      	ldr	r3, [pc, #412]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	4a66      	ldr	r2, [pc, #408]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f70:	4b64      	ldr	r3, [pc, #400]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	4b60      	ldr	r3, [pc, #384]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	4a5f      	ldr	r2, [pc, #380]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	4b59      	ldr	r3, [pc, #356]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa0:	4a58      	ldr	r2, [pc, #352]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa8:	4b56      	ldr	r3, [pc, #344]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	4b52      	ldr	r3, [pc, #328]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	4a51      	ldr	r2, [pc, #324]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe0:	4b48      	ldr	r3, [pc, #288]	@ (8002104 <HAL_LTDC_MspInit+0x234>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ffe:	230e      	movs	r3, #14
 8002000:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002006:	4619      	mov	r1, r3
 8002008:	483f      	ldr	r0, [pc, #252]	@ (8002108 <HAL_LTDC_MspInit+0x238>)
 800200a:	f000 ff37 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800200e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002012:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002020:	230e      	movs	r3, #14
 8002022:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002028:	4619      	mov	r1, r3
 800202a:	4838      	ldr	r0, [pc, #224]	@ (800210c <HAL_LTDC_MspInit+0x23c>)
 800202c:	f000 ff26 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002030:	2303      	movs	r3, #3
 8002032:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002040:	2309      	movs	r3, #9
 8002042:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002048:	4619      	mov	r1, r3
 800204a:	4831      	ldr	r0, [pc, #196]	@ (8002110 <HAL_LTDC_MspInit+0x240>)
 800204c:	f000 ff16 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002050:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002054:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002062:	230e      	movs	r3, #14
 8002064:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002066:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800206a:	4619      	mov	r1, r3
 800206c:	4828      	ldr	r0, [pc, #160]	@ (8002110 <HAL_LTDC_MspInit+0x240>)
 800206e:	f000 ff05 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002072:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002076:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002084:	230e      	movs	r3, #14
 8002086:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002088:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800208c:	4619      	mov	r1, r3
 800208e:	4821      	ldr	r0, [pc, #132]	@ (8002114 <HAL_LTDC_MspInit+0x244>)
 8002090:	f000 fef4 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002094:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002098:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a6:	230e      	movs	r3, #14
 80020a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ae:	4619      	mov	r1, r3
 80020b0:	4819      	ldr	r0, [pc, #100]	@ (8002118 <HAL_LTDC_MspInit+0x248>)
 80020b2:	f000 fee3 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80020b6:	2348      	movs	r3, #72	@ 0x48
 80020b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c6:	230e      	movs	r3, #14
 80020c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ce:	4619      	mov	r1, r3
 80020d0:	4812      	ldr	r0, [pc, #72]	@ (800211c <HAL_LTDC_MspInit+0x24c>)
 80020d2:	f000 fed3 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80020d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020e8:	2309      	movs	r3, #9
 80020ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020f0:	4619      	mov	r1, r3
 80020f2:	4808      	ldr	r0, [pc, #32]	@ (8002114 <HAL_LTDC_MspInit+0x244>)
 80020f4:	f000 fec2 	bl	8002e7c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80020f8:	bf00      	nop
 80020fa:	3768      	adds	r7, #104	@ 0x68
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40016800 	.word	0x40016800
 8002104:	40023800 	.word	0x40023800
 8002108:	40021400 	.word	0x40021400
 800210c:	40020000 	.word	0x40020000
 8002110:	40020400 	.word	0x40020400
 8002114:	40021800 	.word	0x40021800
 8002118:	40020800 	.word	0x40020800
 800211c:	40020c00 	.word	0x40020c00

08002120 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_RNG_MspInit+0x3c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10d      	bne.n	800214e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_RNG_MspInit+0x40>)
 8002138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_RNG_MspInit+0x40>)
 800213c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002140:	6353      	str	r3, [r2, #52]	@ 0x34
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_RNG_MspInit+0x40>)
 8002144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	50060800 	.word	0x50060800
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <HAL_SPI_MspInit+0x84>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12c      	bne.n	80021e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 8002190:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002194:	6453      	str	r3, [r2, #68]	@ 0x44
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a10      	ldr	r2, [pc, #64]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 80021ac:	f043 0320 	orr.w	r3, r3, #32
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <HAL_SPI_MspInit+0x88>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80021be:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80021c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021d0:	2305      	movs	r3, #5
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <HAL_SPI_MspInit+0x8c>)
 80021dc:	f000 fe4e 	bl	8002e7c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	@ 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40015000 	.word	0x40015000
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40021400 	.word	0x40021400

080021f4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <HAL_SPI_MspDeInit+0x30>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10a      	bne.n	800221c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <HAL_SPI_MspDeInit+0x34>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <HAL_SPI_MspDeInit+0x34>)
 800220c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002210:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002212:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002216:	4805      	ldr	r0, [pc, #20]	@ (800222c <HAL_SPI_MspDeInit+0x38>)
 8002218:	f000 ffdc 	bl	80031d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40015000 	.word	0x40015000
 8002228:	40023800 	.word	0x40023800
 800222c:	40021400 	.word	0x40021400

08002230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002240:	d10d      	bne.n	800225e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_TIM_Base_MspInit+0x3c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a08      	ldr	r2, [pc, #32]	@ (800226c <HAL_TIM_Base_MspInit+0x3c>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_TIM_Base_MspInit+0x3c>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <NMI_Handler+0x4>

08002278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <MemManage_Handler+0x4>

08002288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <BusFault_Handler+0x4>

08002290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <UsageFault_Handler+0x4>

08002298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c6:	f000 fc83 	bl	8002bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}

080022ce <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80022d4:	f000 f9ce 	bl	8002674 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80022d8:	f000 f98e 	bl	80025f8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80022dc:	2202      	movs	r2, #2
 80022de:	2103      	movs	r1, #3
 80022e0:	2082      	movs	r0, #130	@ 0x82
 80022e2:	f000 fa1b 	bl	800271c <I2C3_Write>
    HAL_Delay(5);
 80022e6:	2005      	movs	r0, #5
 80022e8:	f000 fc92 	bl	8002c10 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2103      	movs	r1, #3
 80022f0:	2082      	movs	r0, #130	@ 0x82
 80022f2:	f000 fa13 	bl	800271c <I2C3_Write>
    HAL_Delay(2);
 80022f6:	2002      	movs	r0, #2
 80022f8:	f000 fc8a 	bl	8002c10 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80022fc:	1cba      	adds	r2, r7, #2
 80022fe:	2302      	movs	r3, #2
 8002300:	2100      	movs	r1, #0
 8002302:	2082      	movs	r0, #130	@ 0x82
 8002304:	f000 fa5a 	bl	80027bc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	b29a      	uxth	r2, r3
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	4313      	orrs	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002320:	4293      	cmp	r3, r2
 8002322:	d001      	beq.n	8002328 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002324:	2303      	movs	r3, #3
 8002326:	e075      	b.n	8002414 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002328:	2202      	movs	r2, #2
 800232a:	2103      	movs	r1, #3
 800232c:	2082      	movs	r0, #130	@ 0x82
 800232e:	f000 f9f5 	bl	800271c <I2C3_Write>
    HAL_Delay(5);
 8002332:	2005      	movs	r0, #5
 8002334:	f000 fc6c 	bl	8002c10 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002338:	2200      	movs	r2, #0
 800233a:	2103      	movs	r1, #3
 800233c:	2082      	movs	r0, #130	@ 0x82
 800233e:	f000 f9ed 	bl	800271c <I2C3_Write>
    HAL_Delay(2);
 8002342:	2002      	movs	r0, #2
 8002344:	f000 fc64 	bl	8002c10 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002348:	2004      	movs	r0, #4
 800234a:	f000 f867 	bl	800241c <STMPE811_Read>
 800234e:	4603      	mov	r3, r0
 8002350:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800235a:	797b      	ldrb	r3, [r7, #5]
 800235c:	461a      	mov	r2, r3
 800235e:	2104      	movs	r1, #4
 8002360:	2082      	movs	r0, #130	@ 0x82
 8002362:	f000 f9db 	bl	800271c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002366:	2004      	movs	r0, #4
 8002368:	f000 f858 	bl	800241c <STMPE811_Read>
 800236c:	4603      	mov	r3, r0
 800236e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002370:	797b      	ldrb	r3, [r7, #5]
 8002372:	f023 0302 	bic.w	r3, r3, #2
 8002376:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002378:	797b      	ldrb	r3, [r7, #5]
 800237a:	461a      	mov	r2, r3
 800237c:	2104      	movs	r1, #4
 800237e:	2082      	movs	r0, #130	@ 0x82
 8002380:	f000 f9cc 	bl	800271c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002384:	2249      	movs	r2, #73	@ 0x49
 8002386:	2120      	movs	r1, #32
 8002388:	2082      	movs	r0, #130	@ 0x82
 800238a:	f000 f9c7 	bl	800271c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800238e:	2002      	movs	r0, #2
 8002390:	f000 fc3e 	bl	8002c10 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002394:	2201      	movs	r2, #1
 8002396:	2121      	movs	r1, #33	@ 0x21
 8002398:	2082      	movs	r0, #130	@ 0x82
 800239a:	f000 f9bf 	bl	800271c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 800239e:	2017      	movs	r0, #23
 80023a0:	f000 f83c 	bl	800241c <STMPE811_Read>
 80023a4:	4603      	mov	r3, r0
 80023a6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80023a8:	797b      	ldrb	r3, [r7, #5]
 80023aa:	f043 031e 	orr.w	r3, r3, #30
 80023ae:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80023b0:	797b      	ldrb	r3, [r7, #5]
 80023b2:	461a      	mov	r2, r3
 80023b4:	2117      	movs	r1, #23
 80023b6:	2082      	movs	r0, #130	@ 0x82
 80023b8:	f000 f9b0 	bl	800271c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80023bc:	229a      	movs	r2, #154	@ 0x9a
 80023be:	2141      	movs	r1, #65	@ 0x41
 80023c0:	2082      	movs	r0, #130	@ 0x82
 80023c2:	f000 f9ab 	bl	800271c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80023c6:	2201      	movs	r2, #1
 80023c8:	214a      	movs	r1, #74	@ 0x4a
 80023ca:	2082      	movs	r0, #130	@ 0x82
 80023cc:	f000 f9a6 	bl	800271c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80023d0:	2201      	movs	r2, #1
 80023d2:	214b      	movs	r1, #75	@ 0x4b
 80023d4:	2082      	movs	r0, #130	@ 0x82
 80023d6:	f000 f9a1 	bl	800271c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80023da:	2200      	movs	r2, #0
 80023dc:	214b      	movs	r1, #75	@ 0x4b
 80023de:	2082      	movs	r0, #130	@ 0x82
 80023e0:	f000 f99c 	bl	800271c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80023e4:	2201      	movs	r2, #1
 80023e6:	2156      	movs	r1, #86	@ 0x56
 80023e8:	2082      	movs	r0, #130	@ 0x82
 80023ea:	f000 f997 	bl	800271c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80023ee:	2201      	movs	r2, #1
 80023f0:	2158      	movs	r1, #88	@ 0x58
 80023f2:	2082      	movs	r0, #130	@ 0x82
 80023f4:	f000 f992 	bl	800271c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80023f8:	2203      	movs	r2, #3
 80023fa:	2140      	movs	r1, #64	@ 0x40
 80023fc:	2082      	movs	r0, #130	@ 0x82
 80023fe:	f000 f98d 	bl	800271c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002402:	22ff      	movs	r2, #255	@ 0xff
 8002404:	210b      	movs	r1, #11
 8002406:	2082      	movs	r0, #130	@ 0x82
 8002408:	f000 f988 	bl	800271c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800240c:	20c8      	movs	r0, #200	@ 0xc8
 800240e:	f000 fbff 	bl	8002c10 <HAL_Delay>

    return STMPE811_State_Ok;
 8002412:	2302      	movs	r3, #2

}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002426:	f107 020f 	add.w	r2, r7, #15
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	4619      	mov	r1, r3
 800242e:	2082      	movs	r0, #130	@ 0x82
 8002430:	f000 f99e 	bl	8002770 <I2C3_Read>

    return readData;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	791a      	ldrb	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800244e:	2040      	movs	r0, #64	@ 0x40
 8002450:	f7ff ffe4 	bl	800241c <STMPE811_Read>
 8002454:	4603      	mov	r3, r0
 8002456:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0e      	blt.n	800247e <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002466:	2201      	movs	r2, #1
 8002468:	214b      	movs	r1, #75	@ 0x4b
 800246a:	2082      	movs	r0, #130	@ 0x82
 800246c:	f000 f956 	bl	800271c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002470:	2200      	movs	r2, #0
 8002472:	214b      	movs	r1, #75	@ 0x4b
 8002474:	2082      	movs	r0, #130	@ 0x82
 8002476:	f000 f951 	bl	800271c <I2C3_Write>

        return STMPE811_State_Released;
 800247a:	2301      	movs	r3, #1
 800247c:	e0a7      	b.n	80025ce <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	799b      	ldrb	r3, [r3, #6]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d117      	bne.n	80024b6 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f9b8 	bl	8002800 <TM_STMPE811_ReadX>
 8002490:	4603      	mov	r3, r0
 8002492:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	885b      	ldrh	r3, [r3, #2]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fa0b 	bl	80028bc <TM_STMPE811_ReadY>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80024ac:	3301      	adds	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	805a      	strh	r2, [r3, #2]
 80024b4:	e048      	b.n	8002548 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	799b      	ldrb	r3, [r3, #6]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d112      	bne.n	80024e4 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f99c 	bl	8002800 <TM_STMPE811_ReadX>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	885b      	ldrh	r3, [r3, #2]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 f9f1 	bl	80028bc <TM_STMPE811_ReadY>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	805a      	strh	r2, [r3, #2]
 80024e2:	e031      	b.n	8002548 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	799b      	ldrb	r3, [r3, #6]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d115      	bne.n	8002518 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	885b      	ldrh	r3, [r3, #2]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f985 	bl	8002800 <TM_STMPE811_ReadX>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f9da 	bl	80028bc <TM_STMPE811_ReadY>
 8002508:	4603      	mov	r3, r0
 800250a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800250e:	3301      	adds	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	e017      	b.n	8002548 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	799b      	ldrb	r3, [r3, #6]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d113      	bne.n	8002548 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f96b 	bl	8002800 <TM_STMPE811_ReadX>
 800252a:	4603      	mov	r3, r0
 800252c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002530:	b29a      	uxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f9be 	bl	80028bc <TM_STMPE811_ReadY>
 8002540:	4603      	mov	r3, r0
 8002542:	461a      	mov	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002548:	2201      	movs	r2, #1
 800254a:	214b      	movs	r1, #75	@ 0x4b
 800254c:	2082      	movs	r0, #130	@ 0x82
 800254e:	f000 f8e5 	bl	800271c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002552:	2200      	movs	r2, #0
 8002554:	214b      	movs	r1, #75	@ 0x4b
 8002556:	2082      	movs	r0, #130	@ 0x82
 8002558:	f000 f8e0 	bl	800271c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	799b      	ldrb	r3, [r3, #6]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <STMPE811_ReadTouch+0x12e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	799b      	ldrb	r3, [r3, #6]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d115      	bne.n	8002598 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d027      	beq.n	80025c4 <STMPE811_ReadTouch+0x186>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2bee      	cmp	r3, #238	@ 0xee
 800257a:	d823      	bhi.n	80025c4 <STMPE811_ReadTouch+0x186>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	885b      	ldrh	r3, [r3, #2]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01f      	beq.n	80025c4 <STMPE811_ReadTouch+0x186>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	885b      	ldrh	r3, [r3, #2]
 8002588:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800258c:	d81a      	bhi.n	80025c4 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002594:	2300      	movs	r3, #0
 8002596:	e01a      	b.n	80025ce <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <STMPE811_ReadTouch+0x188>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80025a8:	d80d      	bhi.n	80025c6 <STMPE811_ReadTouch+0x188>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	885b      	ldrh	r3, [r3, #2]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <STMPE811_ReadTouch+0x188>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	885b      	ldrh	r3, [r3, #2]
 80025b6:	2bee      	cmp	r3, #238	@ 0xee
 80025b8:	d805      	bhi.n	80025c6 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e004      	b.n	80025ce <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80025c4:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20025bd8 	.word	0x20025bd8

080025f8 <I2C3_Init>:

static void I2C3_Init()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <I2C3_Init+0x6c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	4a17      	ldr	r2, [pc, #92]	@ (8002664 <I2C3_Init+0x6c>)
 8002608:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800260c:	6413      	str	r3, [r2, #64]	@ 0x40
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <I2C3_Init+0x6c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <I2C3_Init+0x70>)
 800261c:	4a13      	ldr	r2, [pc, #76]	@ (800266c <I2C3_Init+0x74>)
 800261e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <I2C3_Init+0x70>)
 8002622:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <I2C3_Init+0x78>)
 8002624:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <I2C3_Init+0x70>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800262c:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <I2C3_Init+0x70>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <I2C3_Init+0x70>)
 8002634:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002638:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <I2C3_Init+0x70>)
 800263c:	2200      	movs	r2, #0
 800263e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002640:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <I2C3_Init+0x70>)
 8002642:	2200      	movs	r2, #0
 8002644:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002646:	4808      	ldr	r0, [pc, #32]	@ (8002668 <I2C3_Init+0x70>)
 8002648:	f000 ff0e 	bl	8003468 <HAL_I2C_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002656:	bf00      	nop
 8002658:	e7fd      	b.n	8002656 <I2C3_Init+0x5e>
    }
    return;
 800265a:	bf00      	nop
}
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	20025b84 	.word	0x20025b84
 800266c:	40005c00 	.word	0x40005c00
 8002670:	000186a0 	.word	0x000186a0

08002674 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267a:	f107 030c 	add.w	r3, r7, #12
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <I2C3_MspInit+0x9c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <I2C3_MspInit+0x9c>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <I2C3_MspInit+0x9c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <I2C3_MspInit+0x9c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <I2C3_MspInit+0x9c>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <I2C3_MspInit+0x9c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80026c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c8:	2312      	movs	r3, #18
 80026ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026d4:	2304      	movs	r3, #4
 80026d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	4619      	mov	r1, r3
 80026de:	480d      	ldr	r0, [pc, #52]	@ (8002714 <I2C3_MspInit+0xa0>)
 80026e0:	f000 fbcc 	bl	8002e7c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80026e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ea:	2312      	movs	r3, #18
 80026ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026f6:	2304      	movs	r3, #4
 80026f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80026fa:	f107 030c 	add.w	r3, r7, #12
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	@ (8002718 <I2C3_MspInit+0xa4>)
 8002702:	f000 fbbb 	bl	8002e7c <HAL_GPIO_Init>
    
}
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40020800 	.word	0x40020800
 8002718:	40020000 	.word	0x40020000

0800271c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af04      	add	r7, sp, #16
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
 8002726:	460b      	mov	r3, r1
 8002728:	717b      	strb	r3, [r7, #5]
 800272a:	4613      	mov	r3, r2
 800272c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800272e:	793b      	ldrb	r3, [r7, #4]
 8002730:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002732:	797b      	ldrb	r3, [r7, #5]
 8002734:	b29a      	uxth	r2, r3
 8002736:	88f9      	ldrh	r1, [r7, #6]
 8002738:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <I2C3_Write+0x48>)
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	2301      	movs	r3, #1
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	f107 030f 	add.w	r3, r7, #15
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2301      	movs	r3, #1
 8002748:	4807      	ldr	r0, [pc, #28]	@ (8002768 <I2C3_Write+0x4c>)
 800274a:	f000 ffd1 	bl	80036f0 <HAL_I2C_Mem_Write>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <I2C3_Write+0x50>)
 8002754:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002756:	f7ff ff3f 	bl	80025d8 <verifyHAL_I2C_IS_OKAY>
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	0003d090 	.word	0x0003d090
 8002768:	20025b84 	.word	0x20025b84
 800276c:	20025bd8 	.word	0x20025bd8

08002770 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af04      	add	r7, sp, #16
 8002776:	4603      	mov	r3, r0
 8002778:	603a      	str	r2, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	460b      	mov	r3, r1
 800277e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	b299      	uxth	r1, r3
 8002784:	79bb      	ldrb	r3, [r7, #6]
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <I2C3_Read+0x40>)
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	2301      	movs	r3, #1
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	4807      	ldr	r0, [pc, #28]	@ (80027b4 <I2C3_Read+0x44>)
 8002798:	f001 f8a4 	bl	80038e4 <HAL_I2C_Mem_Read>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <I2C3_Read+0x48>)
 80027a2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80027a4:	f7ff ff18 	bl	80025d8 <verifyHAL_I2C_IS_OKAY>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	0003d090 	.word	0x0003d090
 80027b4:	20025b84 	.word	0x20025b84
 80027b8:	20025bd8 	.word	0x20025bd8

080027bc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af04      	add	r7, sp, #16
 80027c2:	603a      	str	r2, [r7, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	460b      	mov	r3, r1
 80027cc:	71bb      	strb	r3, [r7, #6]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	b299      	uxth	r1, r3
 80027d6:	79bb      	ldrb	r3, [r7, #6]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <I2C3_MulitByteRead+0x3c>)
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	88bb      	ldrh	r3, [r7, #4]
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2301      	movs	r3, #1
 80027e8:	4804      	ldr	r0, [pc, #16]	@ (80027fc <I2C3_MulitByteRead+0x40>)
 80027ea:	f001 f87b 	bl	80038e4 <HAL_I2C_Mem_Read>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	0003d090 	.word	0x0003d090
 80027fc:	20025b84 	.word	0x20025b84

08002800 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800280a:	204d      	movs	r0, #77	@ 0x4d
 800280c:	f7ff fe06 	bl	800241c <STMPE811_Read>
 8002810:	4603      	mov	r3, r0
 8002812:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002814:	204e      	movs	r0, #78	@ 0x4e
 8002816:	f7ff fe01 	bl	800241c <STMPE811_Read>
 800281a:	4603      	mov	r3, r0
 800281c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800281e:	7a7b      	ldrb	r3, [r7, #9]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	b21a      	sxth	r2, r3
 8002824:	7a3b      	ldrb	r3, [r7, #8]
 8002826:	b21b      	sxth	r3, r3
 8002828:	4313      	orrs	r3, r2
 800282a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800282c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002830:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002834:	4293      	cmp	r3, r2
 8002836:	dc06      	bgt.n	8002846 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002838:	89fb      	ldrh	r3, [r7, #14]
 800283a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800283e:	330c      	adds	r3, #12
 8002840:	b29b      	uxth	r3, r3
 8002842:	81fb      	strh	r3, [r7, #14]
 8002844:	e005      	b.n	8002852 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800284c:	3308      	adds	r3, #8
 800284e:	b29b      	uxth	r3, r3
 8002850:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002852:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002856:	4a18      	ldr	r2, [pc, #96]	@ (80028b8 <TM_STMPE811_ReadX+0xb8>)
 8002858:	fb82 1203 	smull	r1, r2, r2, r3
 800285c:	441a      	add	r2, r3
 800285e:	10d2      	asrs	r2, r2, #3
 8002860:	17db      	asrs	r3, r3, #31
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002866:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800286a:	2bef      	cmp	r3, #239	@ 0xef
 800286c:	dd02      	ble.n	8002874 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800286e:	23ef      	movs	r3, #239	@ 0xef
 8002870:	81fb      	strh	r3, [r7, #14]
 8002872:	e005      	b.n	8002880 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002874:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002878:	2b00      	cmp	r3, #0
 800287a:	da01      	bge.n	8002880 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002880:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	429a      	cmp	r2, r3
 8002888:	dd05      	ble.n	8002896 <TM_STMPE811_ReadX+0x96>
 800288a:	89fa      	ldrh	r2, [r7, #14]
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	b29b      	uxth	r3, r3
 8002892:	b21b      	sxth	r3, r3
 8002894:	e004      	b.n	80028a0 <TM_STMPE811_ReadX+0xa0>
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	88fa      	ldrh	r2, [r7, #6]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	b29b      	uxth	r3, r3
 800289e:	b21b      	sxth	r3, r3
 80028a0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80028a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	dd01      	ble.n	80028ae <TM_STMPE811_ReadX+0xae>
        return val;
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	e000      	b.n	80028b0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80028ae:	88fb      	ldrh	r3, [r7, #6]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	88888889 	.word	0x88888889

080028bc <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80028c6:	204f      	movs	r0, #79	@ 0x4f
 80028c8:	f7ff fda8 	bl	800241c <STMPE811_Read>
 80028cc:	4603      	mov	r3, r0
 80028ce:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80028d0:	2050      	movs	r0, #80	@ 0x50
 80028d2:	f7ff fda3 	bl	800241c <STMPE811_Read>
 80028d6:	4603      	mov	r3, r0
 80028d8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80028da:	7a7b      	ldrb	r3, [r7, #9]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	b21a      	sxth	r2, r3
 80028e0:	7a3b      	ldrb	r3, [r7, #8]
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80028f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028f6:	4a19      	ldr	r2, [pc, #100]	@ (800295c <TM_STMPE811_ReadY+0xa0>)
 80028f8:	fb82 1203 	smull	r1, r2, r2, r3
 80028fc:	1052      	asrs	r2, r2, #1
 80028fe:	17db      	asrs	r3, r3, #31
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002908:	2b00      	cmp	r3, #0
 800290a:	dc02      	bgt.n	8002912 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	81fb      	strh	r3, [r7, #14]
 8002910:	e007      	b.n	8002922 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002916:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800291a:	db02      	blt.n	8002922 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800291c:	f240 133f 	movw	r3, #319	@ 0x13f
 8002920:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002922:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	429a      	cmp	r2, r3
 800292a:	dd05      	ble.n	8002938 <TM_STMPE811_ReadY+0x7c>
 800292c:	89fa      	ldrh	r2, [r7, #14]
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	b21b      	sxth	r3, r3
 8002936:	e004      	b.n	8002942 <TM_STMPE811_ReadY+0x86>
 8002938:	89fb      	ldrh	r3, [r7, #14]
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	b29b      	uxth	r3, r3
 8002940:	b21b      	sxth	r3, r3
 8002942:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002944:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002948:	2b04      	cmp	r3, #4
 800294a:	dd01      	ble.n	8002950 <TM_STMPE811_ReadY+0x94>
        return val;
 800294c:	89fb      	ldrh	r3, [r7, #14]
 800294e:	e000      	b.n	8002952 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002950:	88fb      	ldrh	r3, [r7, #6]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2e8ba2e9 	.word	0x2e8ba2e9

08002960 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	e00a      	b.n	8002996 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002980:	f3af 8000 	nop.w
 8002984:	4601      	mov	r1, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	60ba      	str	r2, [r7, #8]
 800298c:	b2ca      	uxtb	r2, r1
 800298e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3301      	adds	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	dbf0      	blt.n	8002980 <_read+0x12>
  }

  return len;
 800299e:	687b      	ldr	r3, [r7, #4]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e009      	b.n	80029ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	60ba      	str	r2, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3301      	adds	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	dbf1      	blt.n	80029ba <_write+0x12>
  }
  return len;
 80029d6:	687b      	ldr	r3, [r7, #4]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_close>:

int _close(int file)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a08:	605a      	str	r2, [r3, #4]
  return 0;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_isatty>:

int _isatty(int file)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a20:	2301      	movs	r3, #1
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a50:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <_sbrk+0x5c>)
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <_sbrk+0x60>)
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a5c:	4b13      	ldr	r3, [pc, #76]	@ (8002aac <_sbrk+0x64>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <_sbrk+0x64>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <_sbrk+0x68>)
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <_sbrk+0x64>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d207      	bcs.n	8002a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a78:	f003 feba 	bl	80067f0 <__errno>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	220c      	movs	r2, #12
 8002a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	e009      	b.n	8002a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a88:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <_sbrk+0x64>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <_sbrk+0x64>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	4a05      	ldr	r2, [pc, #20]	@ (8002aac <_sbrk+0x64>)
 8002a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20030000 	.word	0x20030000
 8002aa8:	00000400 	.word	0x00000400
 8002aac:	20025bdc 	.word	0x20025bdc
 8002ab0:	20025d30 	.word	0x20025d30

08002ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <SystemInit+0x20>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	4a05      	ldr	r2, [pc, #20]	@ (8002ad4 <SystemInit+0x20>)
 8002ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002adc:	f7ff ffea 	bl	8002ab4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ae0:	480c      	ldr	r0, [pc, #48]	@ (8002b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ae2:	490d      	ldr	r1, [pc, #52]	@ (8002b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae8:	e002      	b.n	8002af0 <LoopCopyDataInit>

08002aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aee:	3304      	adds	r3, #4

08002af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af4:	d3f9      	bcc.n	8002aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002af6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002af8:	4c0a      	ldr	r4, [pc, #40]	@ (8002b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002afc:	e001      	b.n	8002b02 <LoopFillZerobss>

08002afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b00:	3204      	adds	r2, #4

08002b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b04:	d3fb      	bcc.n	8002afe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b06:	f003 fe79 	bl	80067fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b0a:	f7fe fd8a 	bl	8001622 <main>
  bx  lr    
 8002b0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b10:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b18:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002b1c:	080084cc 	.word	0x080084cc
  ldr r2, =_sbss
 8002b20:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002b24:	20025d30 	.word	0x20025d30

08002b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b28:	e7fe      	b.n	8002b28 <ADC_IRQHandler>
	...

08002b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_Init+0x40>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <HAL_Init+0x40>)
 8002b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_Init+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0a      	ldr	r2, [pc, #40]	@ (8002b6c <HAL_Init+0x40>)
 8002b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a07      	ldr	r2, [pc, #28]	@ (8002b6c <HAL_Init+0x40>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b54:	2003      	movs	r0, #3
 8002b56:	f000 f94f 	bl	8002df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f000 f808 	bl	8002b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b60:	f7ff f924 	bl	8001dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023c00 	.word	0x40023c00

08002b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <HAL_InitTick+0x54>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_InitTick+0x58>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 f967 	bl	8002e62 <HAL_SYSTICK_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00e      	b.n	8002bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b0f      	cmp	r3, #15
 8002ba2:	d80a      	bhi.n	8002bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f000 f92f 	bl	8002e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb0:	4a06      	ldr	r2, [pc, #24]	@ (8002bcc <HAL_InitTick+0x5c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000010 	.word	0x20000010
 8002bc8:	20000018 	.word	0x20000018
 8002bcc:	20000014 	.word	0x20000014

08002bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_IncTick+0x20>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_IncTick+0x24>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <HAL_IncTick+0x24>)
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000018 	.word	0x20000018
 8002bf4:	20025be0 	.word	0x20025be0

08002bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_GetTick+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20025be0 	.word	0x20025be0

08002c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff ffee 	bl	8002bf8 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d005      	beq.n	8002c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_Delay+0x44>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c36:	bf00      	nop
 8002c38:	f7ff ffde 	bl	8002bf8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d8f7      	bhi.n	8002c38 <HAL_Delay+0x28>
  {
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000018 	.word	0x20000018

08002c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c68:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8a:	4a04      	ldr	r2, [pc, #16]	@ (8002c9c <__NVIC_SetPriorityGrouping+0x44>)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	60d3      	str	r3, [r2, #12]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca4:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	0a1b      	lsrs	r3, r3, #8
 8002caa:	f003 0307 	and.w	r3, r3, #7
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db0b      	blt.n	8002ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	4907      	ldr	r1, [pc, #28]	@ (8002cf4 <__NVIC_EnableIRQ+0x38>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2001      	movs	r0, #1
 8002cde:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000e100 	.word	0xe000e100

08002cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	db0a      	blt.n	8002d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	490c      	ldr	r1, [pc, #48]	@ (8002d44 <__NVIC_SetPriority+0x4c>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d20:	e00a      	b.n	8002d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	@ (8002d48 <__NVIC_SetPriority+0x50>)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	761a      	strb	r2, [r3, #24]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000e100 	.word	0xe000e100
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	@ 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f1c3 0307 	rsb	r3, r3, #7
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	bf28      	it	cs
 8002d6a:	2304      	movcs	r3, #4
 8002d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3304      	adds	r3, #4
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d902      	bls.n	8002d7c <NVIC_EncodePriority+0x30>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3b03      	subs	r3, #3
 8002d7a:	e000      	b.n	8002d7e <NVIC_EncodePriority+0x32>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	401a      	ands	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d94:	f04f 31ff 	mov.w	r1, #4294967295
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43d9      	mvns	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	4313      	orrs	r3, r2
         );
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	@ 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc4:	d301      	bcc.n	8002dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00f      	b.n	8002dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dca:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <SysTick_Config+0x40>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f7ff ff8e 	bl	8002cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <SysTick_Config+0x40>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de2:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <SysTick_Config+0x40>)
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000e010 	.word	0xe000e010

08002df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff29 	bl	8002c58 <__NVIC_SetPriorityGrouping>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e20:	f7ff ff3e 	bl	8002ca0 <__NVIC_GetPriorityGrouping>
 8002e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f7ff ff8e 	bl	8002d4c <NVIC_EncodePriority>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff5d 	bl	8002cf8 <__NVIC_SetPriority>
}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff31 	bl	8002cbc <__NVIC_EnableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffa2 	bl	8002db4 <SysTick_Config>
 8002e70:	4603      	mov	r3, r0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	@ 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e177      	b.n	8003188 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e98:	2201      	movs	r2, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	f040 8166 	bne.w	8003182 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d005      	beq.n	8002ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d130      	bne.n	8002f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 0201 	and.w	r2, r3, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d017      	beq.n	8002f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d123      	bne.n	8002fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	08da      	lsrs	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3208      	adds	r2, #8
 8002f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	220f      	movs	r2, #15
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	08da      	lsrs	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3208      	adds	r2, #8
 8002fba:	69b9      	ldr	r1, [r7, #24]
 8002fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0203 	and.w	r2, r3, #3
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80c0 	beq.w	8003182 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	4b66      	ldr	r3, [pc, #408]	@ (80031a0 <HAL_GPIO_Init+0x324>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	4a65      	ldr	r2, [pc, #404]	@ (80031a0 <HAL_GPIO_Init+0x324>)
 800300c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003010:	6453      	str	r3, [r2, #68]	@ 0x44
 8003012:	4b63      	ldr	r3, [pc, #396]	@ (80031a0 <HAL_GPIO_Init+0x324>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800301e:	4a61      	ldr	r2, [pc, #388]	@ (80031a4 <HAL_GPIO_Init+0x328>)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	3302      	adds	r3, #2
 8003026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	220f      	movs	r2, #15
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a58      	ldr	r2, [pc, #352]	@ (80031a8 <HAL_GPIO_Init+0x32c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d037      	beq.n	80030ba <HAL_GPIO_Init+0x23e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a57      	ldr	r2, [pc, #348]	@ (80031ac <HAL_GPIO_Init+0x330>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d031      	beq.n	80030b6 <HAL_GPIO_Init+0x23a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a56      	ldr	r2, [pc, #344]	@ (80031b0 <HAL_GPIO_Init+0x334>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d02b      	beq.n	80030b2 <HAL_GPIO_Init+0x236>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a55      	ldr	r2, [pc, #340]	@ (80031b4 <HAL_GPIO_Init+0x338>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d025      	beq.n	80030ae <HAL_GPIO_Init+0x232>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a54      	ldr	r2, [pc, #336]	@ (80031b8 <HAL_GPIO_Init+0x33c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01f      	beq.n	80030aa <HAL_GPIO_Init+0x22e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a53      	ldr	r2, [pc, #332]	@ (80031bc <HAL_GPIO_Init+0x340>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d019      	beq.n	80030a6 <HAL_GPIO_Init+0x22a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a52      	ldr	r2, [pc, #328]	@ (80031c0 <HAL_GPIO_Init+0x344>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_GPIO_Init+0x226>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a51      	ldr	r2, [pc, #324]	@ (80031c4 <HAL_GPIO_Init+0x348>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00d      	beq.n	800309e <HAL_GPIO_Init+0x222>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a50      	ldr	r2, [pc, #320]	@ (80031c8 <HAL_GPIO_Init+0x34c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <HAL_GPIO_Init+0x21e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4f      	ldr	r2, [pc, #316]	@ (80031cc <HAL_GPIO_Init+0x350>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_GPIO_Init+0x21a>
 8003092:	2309      	movs	r3, #9
 8003094:	e012      	b.n	80030bc <HAL_GPIO_Init+0x240>
 8003096:	230a      	movs	r3, #10
 8003098:	e010      	b.n	80030bc <HAL_GPIO_Init+0x240>
 800309a:	2308      	movs	r3, #8
 800309c:	e00e      	b.n	80030bc <HAL_GPIO_Init+0x240>
 800309e:	2307      	movs	r3, #7
 80030a0:	e00c      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030a2:	2306      	movs	r3, #6
 80030a4:	e00a      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030a6:	2305      	movs	r3, #5
 80030a8:	e008      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030aa:	2304      	movs	r3, #4
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030ae:	2303      	movs	r3, #3
 80030b0:	e004      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e002      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_GPIO_Init+0x240>
 80030ba:	2300      	movs	r3, #0
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f002 0203 	and.w	r2, r2, #3
 80030c2:	0092      	lsls	r2, r2, #2
 80030c4:	4093      	lsls	r3, r2
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030cc:	4935      	ldr	r1, [pc, #212]	@ (80031a4 <HAL_GPIO_Init+0x328>)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030da:	4b3d      	ldr	r3, [pc, #244]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030fe:	4a34      	ldr	r2, [pc, #208]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003104:	4b32      	ldr	r3, [pc, #200]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003128:	4a29      	ldr	r2, [pc, #164]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800312e:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003152:	4a1f      	ldr	r2, [pc, #124]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800317c:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <HAL_GPIO_Init+0x354>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3301      	adds	r3, #1
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b0f      	cmp	r3, #15
 800318c:	f67f ae84 	bls.w	8002e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3724      	adds	r7, #36	@ 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40020000 	.word	0x40020000
 80031ac:	40020400 	.word	0x40020400
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40021400 	.word	0x40021400
 80031c0:	40021800 	.word	0x40021800
 80031c4:	40021c00 	.word	0x40021c00
 80031c8:	40022000 	.word	0x40022000
 80031cc:	40022400 	.word	0x40022400
 80031d0:	40013c00 	.word	0x40013c00

080031d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e0d9      	b.n	80033a4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f0:	2201      	movs	r2, #1
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	f040 80c9 	bne.w	800339e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800320c:	4a6b      	ldr	r2, [pc, #428]	@ (80033bc <HAL_GPIO_DeInit+0x1e8>)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003218:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	220f      	movs	r2, #15
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a63      	ldr	r2, [pc, #396]	@ (80033c0 <HAL_GPIO_DeInit+0x1ec>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d037      	beq.n	80032a6 <HAL_GPIO_DeInit+0xd2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a62      	ldr	r2, [pc, #392]	@ (80033c4 <HAL_GPIO_DeInit+0x1f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d031      	beq.n	80032a2 <HAL_GPIO_DeInit+0xce>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a61      	ldr	r2, [pc, #388]	@ (80033c8 <HAL_GPIO_DeInit+0x1f4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d02b      	beq.n	800329e <HAL_GPIO_DeInit+0xca>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a60      	ldr	r2, [pc, #384]	@ (80033cc <HAL_GPIO_DeInit+0x1f8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d025      	beq.n	800329a <HAL_GPIO_DeInit+0xc6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a5f      	ldr	r2, [pc, #380]	@ (80033d0 <HAL_GPIO_DeInit+0x1fc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01f      	beq.n	8003296 <HAL_GPIO_DeInit+0xc2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a5e      	ldr	r2, [pc, #376]	@ (80033d4 <HAL_GPIO_DeInit+0x200>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d019      	beq.n	8003292 <HAL_GPIO_DeInit+0xbe>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a5d      	ldr	r2, [pc, #372]	@ (80033d8 <HAL_GPIO_DeInit+0x204>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_GPIO_DeInit+0xba>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a5c      	ldr	r2, [pc, #368]	@ (80033dc <HAL_GPIO_DeInit+0x208>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00d      	beq.n	800328a <HAL_GPIO_DeInit+0xb6>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a5b      	ldr	r2, [pc, #364]	@ (80033e0 <HAL_GPIO_DeInit+0x20c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <HAL_GPIO_DeInit+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a5a      	ldr	r2, [pc, #360]	@ (80033e4 <HAL_GPIO_DeInit+0x210>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d101      	bne.n	8003282 <HAL_GPIO_DeInit+0xae>
 800327e:	2309      	movs	r3, #9
 8003280:	e012      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 8003282:	230a      	movs	r3, #10
 8003284:	e010      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 8003286:	2308      	movs	r3, #8
 8003288:	e00e      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 800328a:	2307      	movs	r3, #7
 800328c:	e00c      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 800328e:	2306      	movs	r3, #6
 8003290:	e00a      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 8003292:	2305      	movs	r3, #5
 8003294:	e008      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 8003296:	2304      	movs	r3, #4
 8003298:	e006      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 800329a:	2303      	movs	r3, #3
 800329c:	e004      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 800329e:	2302      	movs	r3, #2
 80032a0:	e002      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_GPIO_DeInit+0xd4>
 80032a6:	2300      	movs	r3, #0
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	f002 0203 	and.w	r2, r2, #3
 80032ae:	0092      	lsls	r2, r2, #2
 80032b0:	4093      	lsls	r3, r2
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d132      	bne.n	800331e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032b8:	4b4b      	ldr	r3, [pc, #300]	@ (80033e8 <HAL_GPIO_DeInit+0x214>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43db      	mvns	r3, r3
 80032c0:	4949      	ldr	r1, [pc, #292]	@ (80033e8 <HAL_GPIO_DeInit+0x214>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032c6:	4b48      	ldr	r3, [pc, #288]	@ (80033e8 <HAL_GPIO_DeInit+0x214>)
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	4946      	ldr	r1, [pc, #280]	@ (80033e8 <HAL_GPIO_DeInit+0x214>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032d4:	4b44      	ldr	r3, [pc, #272]	@ (80033e8 <HAL_GPIO_DeInit+0x214>)
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	4942      	ldr	r1, [pc, #264]	@ (80033e8 <HAL_GPIO_DeInit+0x214>)
 80032de:	4013      	ands	r3, r2
 80032e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032e2:	4b41      	ldr	r3, [pc, #260]	@ (80033e8 <HAL_GPIO_DeInit+0x214>)
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	493f      	ldr	r1, [pc, #252]	@ (80033e8 <HAL_GPIO_DeInit+0x214>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003300:	4a2e      	ldr	r2, [pc, #184]	@ (80033bc <HAL_GPIO_DeInit+0x1e8>)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	43da      	mvns	r2, r3
 8003310:	482a      	ldr	r0, [pc, #168]	@ (80033bc <HAL_GPIO_DeInit+0x1e8>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	400a      	ands	r2, r1
 8003318:	3302      	adds	r3, #2
 800331a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2103      	movs	r1, #3
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	401a      	ands	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	08da      	lsrs	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3208      	adds	r2, #8
 800333c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	08d2      	lsrs	r2, r2, #3
 8003354:	4019      	ands	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3208      	adds	r2, #8
 800335a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2103      	movs	r1, #3
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	2101      	movs	r1, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	401a      	ands	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2103      	movs	r1, #3
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	401a      	ands	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3301      	adds	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b0f      	cmp	r3, #15
 80033a8:	f67f af22 	bls.w	80031f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40021400 	.word	0x40021400
 80033d8:	40021800 	.word	0x40021800
 80033dc:	40021c00 	.word	0x40021c00
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40022400 	.word	0x40022400
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033fc:	787b      	ldrb	r3, [r7, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003408:	e003      	b.n	8003412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	041a      	lsls	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	619a      	str	r2, [r3, #24]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800342a:	4b08      	ldr	r3, [pc, #32]	@ (800344c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d006      	beq.n	8003444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003436:	4a05      	ldr	r2, [pc, #20]	@ (800344c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800343c:	88fb      	ldrh	r3, [r7, #6]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f806 	bl	8003450 <HAL_GPIO_EXTI_Callback>
  }
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40013c00 	.word	0x40013c00

08003450 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e12b      	b.n	80036d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe fcb4 	bl	8001dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	@ 0x24
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034cc:	f001 ff82 	bl	80053d4 <HAL_RCC_GetPCLK1Freq>
 80034d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4a81      	ldr	r2, [pc, #516]	@ (80036dc <HAL_I2C_Init+0x274>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d807      	bhi.n	80034ec <HAL_I2C_Init+0x84>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a80      	ldr	r2, [pc, #512]	@ (80036e0 <HAL_I2C_Init+0x278>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf94      	ite	ls
 80034e4:	2301      	movls	r3, #1
 80034e6:	2300      	movhi	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e006      	b.n	80034fa <HAL_I2C_Init+0x92>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a7d      	ldr	r2, [pc, #500]	@ (80036e4 <HAL_I2C_Init+0x27c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e0e7      	b.n	80036d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a78      	ldr	r2, [pc, #480]	@ (80036e8 <HAL_I2C_Init+0x280>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0c9b      	lsrs	r3, r3, #18
 800350c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a6a      	ldr	r2, [pc, #424]	@ (80036dc <HAL_I2C_Init+0x274>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d802      	bhi.n	800353c <HAL_I2C_Init+0xd4>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3301      	adds	r3, #1
 800353a:	e009      	b.n	8003550 <HAL_I2C_Init+0xe8>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	4a69      	ldr	r2, [pc, #420]	@ (80036ec <HAL_I2C_Init+0x284>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	3301      	adds	r3, #1
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003562:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	495c      	ldr	r1, [pc, #368]	@ (80036dc <HAL_I2C_Init+0x274>)
 800356c:	428b      	cmp	r3, r1
 800356e:	d819      	bhi.n	80035a4 <HAL_I2C_Init+0x13c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e59      	subs	r1, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fbb1 f3f3 	udiv	r3, r1, r3
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003584:	400b      	ands	r3, r1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_I2C_Init+0x138>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e59      	subs	r1, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fbb1 f3f3 	udiv	r3, r1, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	e051      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035a0:	2304      	movs	r3, #4
 80035a2:	e04f      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d111      	bne.n	80035d0 <HAL_I2C_Init+0x168>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e012      	b.n	80035f6 <HAL_I2C_Init+0x18e>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	0099      	lsls	r1, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x196>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e022      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10e      	bne.n	8003624 <HAL_I2C_Init+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1e58      	subs	r0, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	440b      	add	r3, r1
 8003614:	fbb0 f3f3 	udiv	r3, r0, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Init+0x1dc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69da      	ldr	r2, [r3, #28]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003672:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6911      	ldr	r1, [r2, #16]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	4311      	orrs	r1, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	430b      	orrs	r3, r1
 8003686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	000186a0 	.word	0x000186a0
 80036e0:	001e847f 	.word	0x001e847f
 80036e4:	003d08ff 	.word	0x003d08ff
 80036e8:	431bde83 	.word	0x431bde83
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370a:	f7ff fa75 	bl	8002bf8 <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	f040 80d9 	bne.w	80038d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2319      	movs	r3, #25
 8003724:	2201      	movs	r2, #1
 8003726:	496d      	ldr	r1, [pc, #436]	@ (80038dc <HAL_I2C_Mem_Write+0x1ec>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fc8b 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
 8003736:	e0cc      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Mem_Write+0x56>
 8003742:	2302      	movs	r3, #2
 8003744:	e0c5      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d007      	beq.n	800376c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2221      	movs	r2, #33	@ 0x21
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2240      	movs	r2, #64	@ 0x40
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800379c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a4d      	ldr	r2, [pc, #308]	@ (80038e0 <HAL_I2C_Mem_Write+0x1f0>)
 80037ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ae:	88f8      	ldrh	r0, [r7, #6]
 80037b0:	893a      	ldrh	r2, [r7, #8]
 80037b2:	8979      	ldrh	r1, [r7, #10]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	4603      	mov	r3, r0
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fac2 	bl	8003d48 <I2C_RequestMemoryWrite>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d052      	beq.n	8003870 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e081      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fd50 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d107      	bne.n	80037f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e06b      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b04      	cmp	r3, #4
 8003836:	d11b      	bne.n	8003870 <HAL_I2C_Mem_Write+0x180>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d017      	beq.n	8003870 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1aa      	bne.n	80037ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fd43 	bl	8004308 <I2C_WaitOnBTFFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	2b04      	cmp	r3, #4
 800388e:	d107      	bne.n	80038a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e016      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e000      	b.n	80038d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	00100002 	.word	0x00100002
 80038e0:	ffff0000 	.word	0xffff0000

080038e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08c      	sub	sp, #48	@ 0x30
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	817b      	strh	r3, [r7, #10]
 80038f6:	460b      	mov	r3, r1
 80038f8:	813b      	strh	r3, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038fe:	f7ff f97b 	bl	8002bf8 <HAL_GetTick>
 8003902:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	f040 8214 	bne.w	8003d3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2319      	movs	r3, #25
 8003918:	2201      	movs	r2, #1
 800391a:	497b      	ldr	r1, [pc, #492]	@ (8003b08 <HAL_I2C_Mem_Read+0x224>)
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fb91 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
 800392a:	e207      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_I2C_Mem_Read+0x56>
 8003936:	2302      	movs	r3, #2
 8003938:	e200      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d007      	beq.n	8003960 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2222      	movs	r2, #34	@ 0x22
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2240      	movs	r2, #64	@ 0x40
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b0c <HAL_I2C_Mem_Read+0x228>)
 80039a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a2:	88f8      	ldrh	r0, [r7, #6]
 80039a4:	893a      	ldrh	r2, [r7, #8]
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4603      	mov	r3, r0
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fa5e 	bl	8003e74 <I2C_RequestMemoryRead>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e1bc      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d113      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	623b      	str	r3, [r7, #32]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	623b      	str	r3, [r7, #32]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e190      	b.n	8003d14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d11b      	bne.n	8003a32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e170      	b.n	8003d14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d11b      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	e150      	b.n	8003d14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a88:	e144      	b.n	8003d14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	f200 80f1 	bhi.w	8003c76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d123      	bne.n	8003ae4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fc79 	bl	8004398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e145      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ae2:	e117      	b.n	8003d14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d14e      	bne.n	8003b8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af2:	2200      	movs	r2, #0
 8003af4:	4906      	ldr	r1, [pc, #24]	@ (8003b10 <HAL_I2C_Mem_Read+0x22c>)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 faa4 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e11a      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
 8003b06:	bf00      	nop
 8003b08:	00100002 	.word	0x00100002
 8003b0c:	ffff0000 	.word	0xffff0000
 8003b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b88:	e0c4      	b.n	8003d14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	2200      	movs	r2, #0
 8003b92:	496c      	ldr	r1, [pc, #432]	@ (8003d44 <HAL_I2C_Mem_Read+0x460>)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fa55 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0cb      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	2200      	movs	r2, #0
 8003bee:	4955      	ldr	r1, [pc, #340]	@ (8003d44 <HAL_I2C_Mem_Read+0x460>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fa27 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e09d      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c74:	e04e      	b.n	8003d14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fb8c 	bl	8004398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e058      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d124      	bne.n	8003d14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d107      	bne.n	8003ce2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f47f aeb6 	bne.w	8003a8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3728      	adds	r7, #40	@ 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	00010004 	.word	0x00010004

08003d48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	461a      	mov	r2, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	817b      	strh	r3, [r7, #10]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	813b      	strh	r3, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f960 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d98:	d103      	bne.n	8003da2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e05f      	b.n	8003e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003da6:	897b      	ldrh	r3, [r7, #10]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	492d      	ldr	r1, [pc, #180]	@ (8003e70 <I2C_RequestMemoryWrite+0x128>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f9bb 	bl	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e04c      	b.n	8003e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fa46 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d107      	bne.n	8003e0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02b      	b.n	8003e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	e021      	b.n	8003e64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e30:	6a39      	ldr	r1, [r7, #32]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fa20 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d107      	bne.n	8003e56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e005      	b.n	8003e66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5a:	893b      	ldrh	r3, [r7, #8]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	460b      	mov	r3, r1
 8003e88:	813b      	strh	r3, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f8c2 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed4:	d103      	bne.n	8003ede <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0aa      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	4952      	ldr	r1, [pc, #328]	@ (8004040 <I2C_RequestMemoryRead+0x1cc>)
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f91d 	bl	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e097      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 f9a8 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d107      	bne.n	8003f46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e076      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f50:	893b      	ldrh	r3, [r7, #8]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]
 8003f5a:	e021      	b.n	8003fa0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f5c:	893b      	ldrh	r3, [r7, #8]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6c:	6a39      	ldr	r1, [r7, #32]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f982 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d107      	bne.n	8003f92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e050      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f96:	893b      	ldrh	r3, [r7, #8]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa2:	6a39      	ldr	r1, [r7, #32]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f967 	bl	8004278 <I2C_WaitOnTXEFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d107      	bne.n	8003fc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e035      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f82b 	bl	8004044 <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004002:	d103      	bne.n	800400c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e013      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004010:	897b      	ldrh	r3, [r7, #10]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	6a3a      	ldr	r2, [r7, #32]
 8004024:	4906      	ldr	r1, [pc, #24]	@ (8004040 <I2C_RequestMemoryRead+0x1cc>)
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f886 	bl	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	00010002 	.word	0x00010002

08004044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004054:	e048      	b.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d044      	beq.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fe fdcb 	bl	8002bf8 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d139      	bne.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10d      	bne.n	800409a <I2C_WaitOnFlagUntilTimeout+0x56>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	43da      	mvns	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	e00c      	b.n	80040b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	43da      	mvns	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	4013      	ands	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d116      	bne.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e023      	b.n	8004130 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10d      	bne.n	800410e <I2C_WaitOnFlagUntilTimeout+0xca>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	43da      	mvns	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	e00c      	b.n	8004128 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	43da      	mvns	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	429a      	cmp	r2, r3
 800412c:	d093      	beq.n	8004056 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004146:	e071      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004156:	d123      	bne.n	80041a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004166:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004170:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e067      	b.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d041      	beq.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fe fd26 	bl	8002bf8 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d136      	bne.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d10c      	bne.n	80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	e00b      	b.n	80041fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	43da      	mvns	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e021      	b.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d10c      	bne.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	43da      	mvns	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4013      	ands	r3, r2
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e00b      	b.n	8004268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f af6d 	bne.w	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004284:	e034      	b.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f8e3 	bl	8004452 <I2C_IsAcknowledgeFailed>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e034      	b.n	8004300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d028      	beq.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fe fcab 	bl	8002bf8 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d11d      	bne.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	2b80      	cmp	r3, #128	@ 0x80
 80042c0:	d016      	beq.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e007      	b.n	8004300 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fa:	2b80      	cmp	r3, #128	@ 0x80
 80042fc:	d1c3      	bne.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004314:	e034      	b.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f89b 	bl	8004452 <I2C_IsAcknowledgeFailed>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e034      	b.n	8004390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d028      	beq.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432e:	f7fe fc63 	bl	8002bf8 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11d      	bne.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d016      	beq.n	8004380 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f043 0220 	orr.w	r2, r3, #32
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e007      	b.n	8004390 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d1c3      	bne.n	8004316 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a4:	e049      	b.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d119      	bne.n	80043e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0210 	mvn.w	r2, #16
 80043bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e030      	b.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e8:	f7fe fc06 	bl	8002bf8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11d      	bne.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d016      	beq.n	800443a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	f043 0220 	orr.w	r2, r3, #32
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e007      	b.n	800444a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b40      	cmp	r3, #64	@ 0x40
 8004446:	d1ae      	bne.n	80043a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004468:	d11b      	bne.n	80044a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004472:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f043 0204 	orr.w	r2, r3, #4
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d129      	bne.n	800451a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	@ 0x24
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0210 	bic.w	r2, r2, #16
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	d12a      	bne.n	8004598 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2224      	movs	r2, #36	@ 0x24
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004562:	89fb      	ldrh	r3, [r7, #14]
 8004564:	f023 030f 	bic.w	r3, r3, #15
 8004568:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b29a      	uxth	r2, r3
 800456e:	89fb      	ldrh	r3, [r7, #14]
 8004570:	4313      	orrs	r3, r2
 8004572:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	89fa      	ldrh	r2, [r7, #14]
 800457a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0bf      	b.n	800473a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fd fc7e 	bl	8001ed0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80045ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6999      	ldr	r1, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004600:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b4a      	ldr	r3, [pc, #296]	@ (8004744 <HAL_LTDC_Init+0x19c>)
 800461c:	400b      	ands	r3, r1
 800461e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6899      	ldr	r1, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68d9      	ldr	r1, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b3e      	ldr	r3, [pc, #248]	@ (8004744 <HAL_LTDC_Init+0x19c>)
 800464a:	400b      	ands	r3, r1
 800464c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68d9      	ldr	r1, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1a      	ldr	r2, [r3, #32]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6919      	ldr	r1, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b33      	ldr	r3, [pc, #204]	@ (8004744 <HAL_LTDC_Init+0x19c>)
 8004678:	400b      	ands	r3, r1
 800467a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6919      	ldr	r1, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6959      	ldr	r1, [r3, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b27      	ldr	r3, [pc, #156]	@ (8004744 <HAL_LTDC_Init+0x19c>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6959      	ldr	r1, [r3, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0206 	orr.w	r2, r2, #6
 8004716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	f000f800 	.word	0xf000f800

08004748 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_LTDC_ConfigLayer+0x1a>
 800475e:	2302      	movs	r3, #2
 8004760:	e02c      	b.n	80047bc <HAL_LTDC_ConfigLayer+0x74>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2134      	movs	r1, #52	@ 0x34
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4614      	mov	r4, r2
 8004786:	461d      	mov	r5, r3
 8004788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800478a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800478c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800478e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f811 	bl	80047c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bdb0      	pop	{r4, r5, r7, pc}

080047c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b089      	sub	sp, #36	@ 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e0:	4413      	add	r3, r2
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	01db      	lsls	r3, r3, #7
 80047f0:	4413      	add	r3, r2
 80047f2:	3384      	adds	r3, #132	@ 0x84
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	4611      	mov	r1, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	01d2      	lsls	r2, r2, #7
 8004800:	440a      	add	r2, r1
 8004802:	3284      	adds	r2, #132	@ 0x84
 8004804:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004808:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800481a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800481c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	01db      	lsls	r3, r3, #7
 8004828:	440b      	add	r3, r1
 800482a:	3384      	adds	r3, #132	@ 0x84
 800482c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004832:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004842:	4413      	add	r3, r2
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	01db      	lsls	r3, r3, #7
 8004852:	4413      	add	r3, r2
 8004854:	3384      	adds	r3, #132	@ 0x84
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	4611      	mov	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	01d2      	lsls	r2, r2, #7
 8004862:	440a      	add	r2, r1
 8004864:	3284      	adds	r2, #132	@ 0x84
 8004866:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800486a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487a:	4413      	add	r3, r2
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4619      	mov	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	01db      	lsls	r3, r3, #7
 8004888:	440b      	add	r3, r1
 800488a:	3384      	adds	r3, #132	@ 0x84
 800488c:	4619      	mov	r1, r3
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	01db      	lsls	r3, r3, #7
 800489e:	4413      	add	r3, r2
 80048a0:	3384      	adds	r3, #132	@ 0x84
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	4611      	mov	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	01d2      	lsls	r2, r2, #7
 80048ae:	440a      	add	r2, r1
 80048b0:	3284      	adds	r2, #132	@ 0x84
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	01db      	lsls	r3, r3, #7
 80048c2:	4413      	add	r3, r2
 80048c4:	3384      	adds	r3, #132	@ 0x84
 80048c6:	461a      	mov	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	061b      	lsls	r3, r3, #24
 80048e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	01db      	lsls	r3, r3, #7
 80048f4:	4413      	add	r3, r2
 80048f6:	3384      	adds	r3, #132	@ 0x84
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	01db      	lsls	r3, r3, #7
 8004904:	4413      	add	r3, r2
 8004906:	3384      	adds	r3, #132	@ 0x84
 8004908:	461a      	mov	r2, r3
 800490a:	2300      	movs	r3, #0
 800490c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004914:	461a      	mov	r2, r3
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	431a      	orrs	r2, r3
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	431a      	orrs	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4619      	mov	r1, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	01db      	lsls	r3, r3, #7
 8004928:	440b      	add	r3, r1
 800492a:	3384      	adds	r3, #132	@ 0x84
 800492c:	4619      	mov	r1, r3
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	01db      	lsls	r3, r3, #7
 800493e:	4413      	add	r3, r2
 8004940:	3384      	adds	r3, #132	@ 0x84
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	4611      	mov	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	01d2      	lsls	r2, r2, #7
 800494e:	440a      	add	r2, r1
 8004950:	3284      	adds	r2, #132	@ 0x84
 8004952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004956:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	01db      	lsls	r3, r3, #7
 8004962:	4413      	add	r3, r2
 8004964:	3384      	adds	r3, #132	@ 0x84
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	01db      	lsls	r3, r3, #7
 8004978:	4413      	add	r3, r2
 800497a:	3384      	adds	r3, #132	@ 0x84
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	4611      	mov	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	01d2      	lsls	r2, r2, #7
 8004988:	440a      	add	r2, r1
 800498a:	3284      	adds	r2, #132	@ 0x84
 800498c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004990:	f023 0307 	bic.w	r3, r3, #7
 8004994:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	6809      	ldr	r1, [r1, #0]
 80049a2:	4608      	mov	r0, r1
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	01c9      	lsls	r1, r1, #7
 80049a8:	4401      	add	r1, r0
 80049aa:	3184      	adds	r1, #132	@ 0x84
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	01db      	lsls	r3, r3, #7
 80049ba:	4413      	add	r3, r2
 80049bc:	3384      	adds	r3, #132	@ 0x84
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	01db      	lsls	r3, r3, #7
 80049ca:	4413      	add	r3, r2
 80049cc:	3384      	adds	r3, #132	@ 0x84
 80049ce:	461a      	mov	r2, r3
 80049d0:	2300      	movs	r3, #0
 80049d2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	01db      	lsls	r3, r3, #7
 80049de:	4413      	add	r3, r2
 80049e0:	3384      	adds	r3, #132	@ 0x84
 80049e2:	461a      	mov	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80049f2:	2304      	movs	r3, #4
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	e01b      	b.n	8004a30 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a00:	2303      	movs	r3, #3
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	e014      	b.n	8004a30 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d00b      	beq.n	8004a26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d007      	beq.n	8004a26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d003      	beq.n	8004a26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a22:	2b07      	cmp	r3, #7
 8004a24:	d102      	bne.n	8004a2c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a26:	2302      	movs	r3, #2
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	e001      	b.n	8004a30 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	01db      	lsls	r3, r3, #7
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3384      	adds	r3, #132	@ 0x84
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	4611      	mov	r1, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	01d2      	lsls	r2, r2, #7
 8004a4a:	440a      	add	r2, r1
 8004a4c:	3284      	adds	r2, #132	@ 0x84
 8004a4e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	1acb      	subs	r3, r1, r3
 8004a6a:	69f9      	ldr	r1, [r7, #28]
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	6809      	ldr	r1, [r1, #0]
 8004a76:	4608      	mov	r0, r1
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	01c9      	lsls	r1, r1, #7
 8004a7c:	4401      	add	r1, r0
 8004a7e:	3184      	adds	r1, #132	@ 0x84
 8004a80:	4313      	orrs	r3, r2
 8004a82:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	01db      	lsls	r3, r3, #7
 8004a8e:	4413      	add	r3, r2
 8004a90:	3384      	adds	r3, #132	@ 0x84
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	01d2      	lsls	r2, r2, #7
 8004a9e:	440a      	add	r2, r1
 8004aa0:	3284      	adds	r2, #132	@ 0x84
 8004aa2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004aa6:	f023 0307 	bic.w	r3, r3, #7
 8004aaa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	01db      	lsls	r3, r3, #7
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3384      	adds	r3, #132	@ 0x84
 8004aba:	461a      	mov	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	01db      	lsls	r3, r3, #7
 8004acc:	4413      	add	r3, r2
 8004ace:	3384      	adds	r3, #132	@ 0x84
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	01d2      	lsls	r2, r2, #7
 8004adc:	440a      	add	r2, r1
 8004ade:	3284      	adds	r2, #132	@ 0x84
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	6013      	str	r3, [r2, #0]
}
 8004ae6:	bf00      	nop
 8004ae8:	3724      	adds	r7, #36	@ 0x24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e267      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d075      	beq.n	8004bfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b12:	4b88      	ldr	r3, [pc, #544]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d00c      	beq.n	8004b38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1e:	4b85      	ldr	r3, [pc, #532]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d112      	bne.n	8004b50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2a:	4b82      	ldr	r3, [pc, #520]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b36:	d10b      	bne.n	8004b50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b38:	4b7e      	ldr	r3, [pc, #504]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05b      	beq.n	8004bfc <HAL_RCC_OscConfig+0x108>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d157      	bne.n	8004bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e242      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b58:	d106      	bne.n	8004b68 <HAL_RCC_OscConfig+0x74>
 8004b5a:	4b76      	ldr	r3, [pc, #472]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a75      	ldr	r2, [pc, #468]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e01d      	b.n	8004ba4 <HAL_RCC_OscConfig+0xb0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x98>
 8004b72:	4b70      	ldr	r3, [pc, #448]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6f      	ldr	r2, [pc, #444]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6c      	ldr	r2, [pc, #432]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0xb0>
 8004b8c:	4b69      	ldr	r3, [pc, #420]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a68      	ldr	r2, [pc, #416]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	4b66      	ldr	r3, [pc, #408]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a65      	ldr	r2, [pc, #404]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fe f824 	bl	8002bf8 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fe f820 	bl	8002bf8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	@ 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e207      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xc0>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fe f810 	bl	8002bf8 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fe f80c 	bl	8002bf8 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	@ 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e1f3      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bee:	4b51      	ldr	r3, [pc, #324]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0xe8>
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d063      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c16:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d11c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c22:	4b44      	ldr	r3, [pc, #272]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d116      	bne.n	8004c5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	4b41      	ldr	r3, [pc, #260]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_RCC_OscConfig+0x152>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e1c7      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c46:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4937      	ldr	r1, [pc, #220]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5a:	e03a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c64:	4b34      	ldr	r3, [pc, #208]	@ (8004d38 <HAL_RCC_OscConfig+0x244>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fd ffc5 	bl	8002bf8 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fd ffc1 	bl	8002bf8 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e1a8      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c84:	4b2b      	ldr	r3, [pc, #172]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c90:	4b28      	ldr	r3, [pc, #160]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4925      	ldr	r1, [pc, #148]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]
 8004ca4:	e015      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca6:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <HAL_RCC_OscConfig+0x244>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fd ffa4 	bl	8002bf8 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb4:	f7fd ffa0 	bl	8002bf8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e187      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d036      	beq.n	8004d4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce6:	4b15      	ldr	r3, [pc, #84]	@ (8004d3c <HAL_RCC_OscConfig+0x248>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fd ff84 	bl	8002bf8 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf4:	f7fd ff80 	bl	8002bf8 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e167      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <HAL_RCC_OscConfig+0x240>)
 8004d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x200>
 8004d12:	e01b      	b.n	8004d4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d14:	4b09      	ldr	r3, [pc, #36]	@ (8004d3c <HAL_RCC_OscConfig+0x248>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1a:	f7fd ff6d 	bl	8002bf8 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	e00e      	b.n	8004d40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d22:	f7fd ff69 	bl	8002bf8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d907      	bls.n	8004d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e150      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	42470000 	.word	0x42470000
 8004d3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d40:	4b88      	ldr	r3, [pc, #544]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ea      	bne.n	8004d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8097 	beq.w	8004e88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5e:	4b81      	ldr	r3, [pc, #516]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10f      	bne.n	8004d8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	4a7c      	ldr	r2, [pc, #496]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	60bb      	str	r3, [r7, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b77      	ldr	r3, [pc, #476]	@ (8004f68 <HAL_RCC_OscConfig+0x474>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d118      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d96:	4b74      	ldr	r3, [pc, #464]	@ (8004f68 <HAL_RCC_OscConfig+0x474>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a73      	ldr	r2, [pc, #460]	@ (8004f68 <HAL_RCC_OscConfig+0x474>)
 8004d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da2:	f7fd ff29 	bl	8002bf8 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004daa:	f7fd ff25 	bl	8002bf8 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e10c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <HAL_RCC_OscConfig+0x474>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d106      	bne.n	8004dde <HAL_RCC_OscConfig+0x2ea>
 8004dd0:	4b64      	ldr	r3, [pc, #400]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd4:	4a63      	ldr	r2, [pc, #396]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ddc:	e01c      	b.n	8004e18 <HAL_RCC_OscConfig+0x324>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x30c>
 8004de6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a5e      	ldr	r2, [pc, #376]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004dec:	f043 0304 	orr.w	r3, r3, #4
 8004df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a5b      	ldr	r2, [pc, #364]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0x324>
 8004e00:	4b58      	ldr	r3, [pc, #352]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e04:	4a57      	ldr	r2, [pc, #348]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0c:	4b55      	ldr	r3, [pc, #340]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a54      	ldr	r2, [pc, #336]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f023 0304 	bic.w	r3, r3, #4
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d015      	beq.n	8004e4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fd feea 	bl	8002bf8 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e28:	f7fd fee6 	bl	8002bf8 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0cb      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3e:	4b49      	ldr	r3, [pc, #292]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0ee      	beq.n	8004e28 <HAL_RCC_OscConfig+0x334>
 8004e4a:	e014      	b.n	8004e76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4c:	f7fd fed4 	bl	8002bf8 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e52:	e00a      	b.n	8004e6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e54:	f7fd fed0 	bl	8002bf8 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e0b5      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ee      	bne.n	8004e54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7c:	4b39      	ldr	r3, [pc, #228]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	4a38      	ldr	r2, [pc, #224]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80a1 	beq.w	8004fd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e92:	4b34      	ldr	r3, [pc, #208]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d05c      	beq.n	8004f58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d141      	bne.n	8004f2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea6:	4b31      	ldr	r3, [pc, #196]	@ (8004f6c <HAL_RCC_OscConfig+0x478>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fd fea4 	bl	8002bf8 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd fea0 	bl	8002bf8 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e087      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	4b27      	ldr	r3, [pc, #156]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	491b      	ldr	r1, [pc, #108]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <HAL_RCC_OscConfig+0x478>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fd fe79 	bl	8002bf8 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0a:	f7fd fe75 	bl	8002bf8 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e05c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1c:	4b11      	ldr	r3, [pc, #68]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x416>
 8004f28:	e054      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2a:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <HAL_RCC_OscConfig+0x478>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fd fe62 	bl	8002bf8 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fd fe5e 	bl	8002bf8 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e045      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x444>
 8004f56:	e03d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e038      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
 8004f64:	40023800 	.word	0x40023800
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f70:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe0 <HAL_RCC_OscConfig+0x4ec>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d028      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d121      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d11a      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d111      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d107      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0cc      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b68      	ldr	r3, [pc, #416]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d90c      	bls.n	8005020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b65      	ldr	r3, [pc, #404]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b63      	ldr	r3, [pc, #396]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0b8      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d020      	beq.n	800506e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005038:	4b59      	ldr	r3, [pc, #356]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4a58      	ldr	r2, [pc, #352]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005050:	4b53      	ldr	r3, [pc, #332]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	4a52      	ldr	r2, [pc, #328]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800505a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800505c:	4b50      	ldr	r3, [pc, #320]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	494d      	ldr	r1, [pc, #308]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	4313      	orrs	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d044      	beq.n	8005104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d107      	bne.n	8005092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	4b47      	ldr	r3, [pc, #284]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d119      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e07f      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d003      	beq.n	80050a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a2:	4b3f      	ldr	r3, [pc, #252]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e06f      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b2:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e067      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c2:	4b37      	ldr	r3, [pc, #220]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f023 0203 	bic.w	r2, r3, #3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4934      	ldr	r1, [pc, #208]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050d4:	f7fd fd90 	bl	8002bf8 <HAL_GetTick>
 80050d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050dc:	f7fd fd8c 	bl	8002bf8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e04f      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	4b2b      	ldr	r3, [pc, #172]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 020c 	and.w	r2, r3, #12
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	429a      	cmp	r2, r3
 8005102:	d1eb      	bne.n	80050dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005104:	4b25      	ldr	r3, [pc, #148]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d20c      	bcs.n	800512c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005112:	4b22      	ldr	r3, [pc, #136]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511a:	4b20      	ldr	r3, [pc, #128]	@ (800519c <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d001      	beq.n	800512c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e032      	b.n	8005192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005138:	4b19      	ldr	r3, [pc, #100]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4916      	ldr	r1, [pc, #88]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005156:	4b12      	ldr	r3, [pc, #72]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	490e      	ldr	r1, [pc, #56]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800516a:	f000 f821 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 800516e:	4602      	mov	r2, r0
 8005170:	4b0b      	ldr	r3, [pc, #44]	@ (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	490a      	ldr	r1, [pc, #40]	@ (80051a4 <HAL_RCC_ClockConfig+0x1c0>)
 800517c:	5ccb      	ldrb	r3, [r1, r3]
 800517e:	fa22 f303 	lsr.w	r3, r2, r3
 8005182:	4a09      	ldr	r2, [pc, #36]	@ (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005186:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fd fcf0 	bl	8002b70 <HAL_InitTick>

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40023c00 	.word	0x40023c00
 80051a0:	40023800 	.word	0x40023800
 80051a4:	08008470 	.word	0x08008470
 80051a8:	20000010 	.word	0x20000010
 80051ac:	20000014 	.word	0x20000014

080051b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b4:	b094      	sub	sp, #80	@ 0x50
 80051b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c8:	4b79      	ldr	r3, [pc, #484]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 030c 	and.w	r3, r3, #12
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d00d      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x40>
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	f200 80e1 	bhi.w	800539c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0x34>
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_GetSysClockFreq+0x3a>
 80051e2:	e0db      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e4:	4b73      	ldr	r3, [pc, #460]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051e8:	e0db      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ea:	4b73      	ldr	r3, [pc, #460]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80051ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051ee:	e0d8      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f0:	4b6f      	ldr	r3, [pc, #444]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fa:	4b6d      	ldr	r3, [pc, #436]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d063      	beq.n	80052ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005206:	4b6a      	ldr	r3, [pc, #424]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	099b      	lsrs	r3, r3, #6
 800520c:	2200      	movs	r2, #0
 800520e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005210:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005218:	633b      	str	r3, [r7, #48]	@ 0x30
 800521a:	2300      	movs	r3, #0
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34
 800521e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	f04f 0000 	mov.w	r0, #0
 800522a:	f04f 0100 	mov.w	r1, #0
 800522e:	0159      	lsls	r1, r3, #5
 8005230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005234:	0150      	lsls	r0, r2, #5
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4621      	mov	r1, r4
 800523c:	1a51      	subs	r1, r2, r1
 800523e:	6139      	str	r1, [r7, #16]
 8005240:	4629      	mov	r1, r5
 8005242:	eb63 0301 	sbc.w	r3, r3, r1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005254:	4659      	mov	r1, fp
 8005256:	018b      	lsls	r3, r1, #6
 8005258:	4651      	mov	r1, sl
 800525a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800525e:	4651      	mov	r1, sl
 8005260:	018a      	lsls	r2, r1, #6
 8005262:	4651      	mov	r1, sl
 8005264:	ebb2 0801 	subs.w	r8, r2, r1
 8005268:	4659      	mov	r1, fp
 800526a:	eb63 0901 	sbc.w	r9, r3, r1
 800526e:	f04f 0200 	mov.w	r2, #0
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800527a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800527e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005282:	4690      	mov	r8, r2
 8005284:	4699      	mov	r9, r3
 8005286:	4623      	mov	r3, r4
 8005288:	eb18 0303 	adds.w	r3, r8, r3
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	462b      	mov	r3, r5
 8005290:	eb49 0303 	adc.w	r3, r9, r3
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052a2:	4629      	mov	r1, r5
 80052a4:	024b      	lsls	r3, r1, #9
 80052a6:	4621      	mov	r1, r4
 80052a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052ac:	4621      	mov	r1, r4
 80052ae:	024a      	lsls	r2, r1, #9
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b6:	2200      	movs	r2, #0
 80052b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052c0:	f7fa ffe6 	bl	8000290 <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4613      	mov	r3, r2
 80052ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052cc:	e058      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ce:	4b38      	ldr	r3, [pc, #224]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	2200      	movs	r2, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	4611      	mov	r1, r2
 80052da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052de:	623b      	str	r3, [r7, #32]
 80052e0:	2300      	movs	r3, #0
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052e8:	4642      	mov	r2, r8
 80052ea:	464b      	mov	r3, r9
 80052ec:	f04f 0000 	mov.w	r0, #0
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	0159      	lsls	r1, r3, #5
 80052f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fa:	0150      	lsls	r0, r2, #5
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4641      	mov	r1, r8
 8005302:	ebb2 0a01 	subs.w	sl, r2, r1
 8005306:	4649      	mov	r1, r9
 8005308:	eb63 0b01 	sbc.w	fp, r3, r1
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005318:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800531c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005320:	ebb2 040a 	subs.w	r4, r2, sl
 8005324:	eb63 050b 	sbc.w	r5, r3, fp
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	00eb      	lsls	r3, r5, #3
 8005332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005336:	00e2      	lsls	r2, r4, #3
 8005338:	4614      	mov	r4, r2
 800533a:	461d      	mov	r5, r3
 800533c:	4643      	mov	r3, r8
 800533e:	18e3      	adds	r3, r4, r3
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	464b      	mov	r3, r9
 8005344:	eb45 0303 	adc.w	r3, r5, r3
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005356:	4629      	mov	r1, r5
 8005358:	028b      	lsls	r3, r1, #10
 800535a:	4621      	mov	r1, r4
 800535c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005360:	4621      	mov	r1, r4
 8005362:	028a      	lsls	r2, r1, #10
 8005364:	4610      	mov	r0, r2
 8005366:	4619      	mov	r1, r3
 8005368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536a:	2200      	movs	r2, #0
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	61fa      	str	r2, [r7, #28]
 8005370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005374:	f7fa ff8c 	bl	8000290 <__aeabi_uldivmod>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4613      	mov	r3, r2
 800537e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	3301      	adds	r3, #1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800539a:	e002      	b.n	80053a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800539c:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800539e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3750      	adds	r7, #80	@ 0x50
 80053a8:	46bd      	mov	sp, r7
 80053aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800
 80053b4:	00f42400 	.word	0x00f42400
 80053b8:	007a1200 	.word	0x007a1200

080053bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c0:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000010 	.word	0x20000010

080053d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053d8:	f7ff fff0 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	0a9b      	lsrs	r3, r3, #10
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	4903      	ldr	r1, [pc, #12]	@ (80053f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40023800 	.word	0x40023800
 80053f8:	08008480 	.word	0x08008480

080053fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005420:	2b00      	cmp	r3, #0
 8005422:	d105      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800542c:	2b00      	cmp	r3, #0
 800542e:	d075      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005430:	4b91      	ldr	r3, [pc, #580]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005436:	f7fd fbdf 	bl	8002bf8 <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800543e:	f7fd fbdb 	bl	8002bf8 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e189      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005450:	4b8a      	ldr	r3, [pc, #552]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	071b      	lsls	r3, r3, #28
 8005474:	4981      	ldr	r1, [pc, #516]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01f      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005488:	4b7c      	ldr	r3, [pc, #496]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800548e:	0f1b      	lsrs	r3, r3, #28
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	019a      	lsls	r2, r3, #6
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	061b      	lsls	r3, r3, #24
 80054a2:	431a      	orrs	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	071b      	lsls	r3, r3, #28
 80054a8:	4974      	ldr	r1, [pc, #464]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054b0:	4b72      	ldr	r3, [pc, #456]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054b6:	f023 021f 	bic.w	r2, r3, #31
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	3b01      	subs	r3, #1
 80054c0:	496e      	ldr	r1, [pc, #440]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	019a      	lsls	r2, r3, #6
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	061b      	lsls	r3, r3, #24
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	071b      	lsls	r3, r3, #28
 80054e8:	4964      	ldr	r1, [pc, #400]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054f0:	4b61      	ldr	r3, [pc, #388]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f6:	f7fd fb7f 	bl	8002bf8 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054fe:	f7fd fb7b 	bl	8002bf8 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e129      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005510:	4b5a      	ldr	r3, [pc, #360]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d105      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005530:	2b00      	cmp	r3, #0
 8005532:	d079      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005534:	4b52      	ldr	r3, [pc, #328]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800553a:	f7fd fb5d 	bl	8002bf8 <HAL_GetTick>
 800553e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005542:	f7fd fb59 	bl	8002bf8 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e107      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005554:	4b49      	ldr	r3, [pc, #292]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800555c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005560:	d0ef      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d020      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800556e:	4b43      	ldr	r3, [pc, #268]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	0f1b      	lsrs	r3, r3, #28
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	019a      	lsls	r2, r3, #6
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	431a      	orrs	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	493b      	ldr	r1, [pc, #236]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005596:	4b39      	ldr	r3, [pc, #228]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800559c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	4934      	ldr	r1, [pc, #208]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01e      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055bc:	4b2f      	ldr	r3, [pc, #188]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	019a      	lsls	r2, r3, #6
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	061b      	lsls	r3, r3, #24
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	071b      	lsls	r3, r3, #28
 80055dc:	4927      	ldr	r1, [pc, #156]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055e4:	4b25      	ldr	r3, [pc, #148]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	4922      	ldr	r1, [pc, #136]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055fa:	4b21      	ldr	r3, [pc, #132]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005600:	f7fd fafa 	bl	8002bf8 <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005606:	e008      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005608:	f7fd faf6 	bl	8002bf8 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e0a4      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800561a:	4b18      	ldr	r3, [pc, #96]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005626:	d1ef      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 808b 	beq.w	800574c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	4a0f      	ldr	r2, [pc, #60]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005644:	6413      	str	r3, [r2, #64]	@ 0x40
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005652:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a0b      	ldr	r2, [pc, #44]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800565c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800565e:	f7fd facb 	bl	8002bf8 <HAL_GetTick>
 8005662:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005664:	e010      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005666:	f7fd fac7 	bl	8002bf8 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d909      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e075      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005678:	42470068 	.word	0x42470068
 800567c:	40023800 	.word	0x40023800
 8005680:	42470070 	.word	0x42470070
 8005684:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005688:	4b38      	ldr	r3, [pc, #224]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0e8      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005694:	4b36      	ldr	r3, [pc, #216]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800569c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02f      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d028      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056be:	2201      	movs	r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056c8:	4a29      	ldr	r2, [pc, #164]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ce:	4b28      	ldr	r3, [pc, #160]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d114      	bne.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056da:	f7fd fa8d 	bl	8002bf8 <HAL_GetTick>
 80056de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fd fa89 	bl	8002bf8 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e035      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ee      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800570c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005710:	d10d      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005712:	4b17      	ldr	r3, [pc, #92]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005726:	4912      	ldr	r1, [pc, #72]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005728:	4313      	orrs	r3, r2
 800572a:	608b      	str	r3, [r1, #8]
 800572c:	e005      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800572e:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	4a0f      	ldr	r2, [pc, #60]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005734:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005738:	6093      	str	r3, [r2, #8]
 800573a:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800573c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005746:	490a      	ldr	r1, [pc, #40]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005748:	4313      	orrs	r3, r2
 800574a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800575e:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005760:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40007000 	.word	0x40007000
 8005770:	40023800 	.word	0x40023800
 8005774:	42470e40 	.word	0x42470e40
 8005778:	424711e0 	.word	0x424711e0

0800577c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e01c      	b.n	80057c8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	795b      	ldrb	r3, [r3, #5]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d105      	bne.n	80057a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc fcbe 	bl	8002120 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0204 	orr.w	r2, r2, #4
 80057b8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e07b      	b.n	80058da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d108      	bne.n	80057fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057f2:	d009      	beq.n	8005808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	61da      	str	r2, [r3, #28]
 80057fa:	e005      	b.n	8005808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fc fc9e 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800583e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588c:	ea42 0103 	orr.w	r1, r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	f003 0104 	and.w	r1, r3, #4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ae:	f003 0210 	and.w	r2, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e01a      	b.n	800592a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800590a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fc fc71 	bl	80021f4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b088      	sub	sp, #32
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	4613      	mov	r3, r2
 8005940:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005942:	f7fd f959 	bl	8002bf8 <HAL_GetTick>
 8005946:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005958:	2302      	movs	r3, #2
 800595a:	e12a      	b.n	8005bb2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_SPI_Transmit+0x36>
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e122      	b.n	8005bb2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_SPI_Transmit+0x48>
 8005976:	2302      	movs	r3, #2
 8005978:	e11b      	b.n	8005bb2 <HAL_SPI_Transmit+0x280>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2203      	movs	r2, #3
 8005986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c8:	d10f      	bne.n	80059ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f4:	2b40      	cmp	r3, #64	@ 0x40
 80059f6:	d007      	beq.n	8005a08 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a10:	d152      	bne.n	8005ab8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_SPI_Transmit+0xee>
 8005a1a:	8b7b      	ldrh	r3, [r7, #26]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d145      	bne.n	8005aac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	881a      	ldrh	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	1c9a      	adds	r2, r3, #2
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a44:	e032      	b.n	8005aac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d112      	bne.n	8005a7a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a58:	881a      	ldrh	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a64:	1c9a      	adds	r2, r3, #2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a78:	e018      	b.n	8005aac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a7a:	f7fd f8bd 	bl	8002bf8 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d803      	bhi.n	8005a92 <HAL_SPI_Transmit+0x160>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d102      	bne.n	8005a98 <HAL_SPI_Transmit+0x166>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e082      	b.n	8005bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1c7      	bne.n	8005a46 <HAL_SPI_Transmit+0x114>
 8005ab6:	e053      	b.n	8005b60 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_SPI_Transmit+0x194>
 8005ac0:	8b7b      	ldrh	r3, [r7, #26]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d147      	bne.n	8005b56 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	7812      	ldrb	r2, [r2, #0]
 8005ad2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005aec:	e033      	b.n	8005b56 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d113      	bne.n	8005b24 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b22:	e018      	b.n	8005b56 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b24:	f7fd f868 	bl	8002bf8 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d803      	bhi.n	8005b3c <HAL_SPI_Transmit+0x20a>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Transmit+0x210>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e02d      	b.n	8005bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1c6      	bne.n	8005aee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f8bf 	bl	8005ce8 <SPI_EndRxTxTransaction>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
  }
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc8:	b2db      	uxtb	r3, r3
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005be8:	f7fd f806 	bl	8002bf8 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bf8:	f7fc fffe 	bl	8002bf8 <HAL_GetTick>
 8005bfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bfe:	4b39      	ldr	r3, [pc, #228]	@ (8005ce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	015b      	lsls	r3, r3, #5
 8005c04:	0d1b      	lsrs	r3, r3, #20
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c0e:	e054      	b.n	8005cba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c16:	d050      	beq.n	8005cba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c18:	f7fc ffee 	bl	8002bf8 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d902      	bls.n	8005c2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d13d      	bne.n	8005caa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c46:	d111      	bne.n	8005c6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c50:	d004      	beq.n	8005c5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c5a:	d107      	bne.n	8005c6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c74:	d10f      	bne.n	8005c96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e017      	b.n	8005cda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d19b      	bne.n	8005c10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000010 	.word	0x20000010

08005ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff ff6a 	bl	8005bd8 <SPI_WaitFlagStateUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0e:	f043 0220 	orr.w	r2, r3, #32
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e032      	b.n	8005d80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005d88 <SPI_EndRxTxTransaction+0xa0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d8c <SPI_EndRxTxTransaction+0xa4>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	0d5b      	lsrs	r3, r3, #21
 8005d26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d38:	d112      	bne.n	8005d60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2200      	movs	r2, #0
 8005d42:	2180      	movs	r1, #128	@ 0x80
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff ff47 	bl	8005bd8 <SPI_WaitFlagStateUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d016      	beq.n	8005d7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d54:	f043 0220 	orr.w	r2, r3, #32
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e00f      	b.n	8005d80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d76:	2b80      	cmp	r3, #128	@ 0x80
 8005d78:	d0f2      	beq.n	8005d60 <SPI_EndRxTxTransaction+0x78>
 8005d7a:	e000      	b.n	8005d7e <SPI_EndRxTxTransaction+0x96>
        break;
 8005d7c:	bf00      	nop
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	20000010 	.word	0x20000010
 8005d8c:	165e9f81 	.word	0x165e9f81

08005d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e041      	b.n	8005e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fa3a 	bl	8002230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f000 f8f4 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_ConfigClockSource+0x1c>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e0b4      	b.n	8005fb4 <HAL_TIM_ConfigClockSource+0x186>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e70:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e82:	d03e      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0xd4>
 8005e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e88:	f200 8087 	bhi.w	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e90:	f000 8086 	beq.w	8005fa0 <HAL_TIM_ConfigClockSource+0x172>
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e98:	d87f      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
 8005e9a:	2b70      	cmp	r3, #112	@ 0x70
 8005e9c:	d01a      	beq.n	8005ed4 <HAL_TIM_ConfigClockSource+0xa6>
 8005e9e:	2b70      	cmp	r3, #112	@ 0x70
 8005ea0:	d87b      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
 8005ea2:	2b60      	cmp	r3, #96	@ 0x60
 8005ea4:	d050      	beq.n	8005f48 <HAL_TIM_ConfigClockSource+0x11a>
 8005ea6:	2b60      	cmp	r3, #96	@ 0x60
 8005ea8:	d877      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
 8005eaa:	2b50      	cmp	r3, #80	@ 0x50
 8005eac:	d03c      	beq.n	8005f28 <HAL_TIM_ConfigClockSource+0xfa>
 8005eae:	2b50      	cmp	r3, #80	@ 0x50
 8005eb0:	d873      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
 8005eb2:	2b40      	cmp	r3, #64	@ 0x40
 8005eb4:	d058      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0x13a>
 8005eb6:	2b40      	cmp	r3, #64	@ 0x40
 8005eb8:	d86f      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
 8005eba:	2b30      	cmp	r3, #48	@ 0x30
 8005ebc:	d064      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x15a>
 8005ebe:	2b30      	cmp	r3, #48	@ 0x30
 8005ec0:	d86b      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d060      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d867      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d05c      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x15a>
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d05a      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed2:	e062      	b.n	8005f9a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ee4:	f000 f990 	bl	8006208 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ef6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]
      break;
 8005f00:	e04f      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f12:	f000 f979 	bl	8006208 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f24:	609a      	str	r2, [r3, #8]
      break;
 8005f26:	e03c      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f34:	461a      	mov	r2, r3
 8005f36:	f000 f8ed 	bl	8006114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2150      	movs	r1, #80	@ 0x50
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 f946 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f46:	e02c      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f54:	461a      	mov	r2, r3
 8005f56:	f000 f90c 	bl	8006172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2160      	movs	r1, #96	@ 0x60
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 f936 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f66:	e01c      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f74:	461a      	mov	r2, r3
 8005f76:	f000 f8cd 	bl	8006114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2140      	movs	r1, #64	@ 0x40
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 f926 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f86:	e00c      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f000 f91d 	bl	80061d2 <TIM_ITRx_SetConfig>
      break;
 8005f98:	e003      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9e:	e000      	b.n	8005fa2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a46      	ldr	r2, [pc, #280]	@ (80060e8 <TIM_Base_SetConfig+0x12c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d013      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fda:	d00f      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a43      	ldr	r2, [pc, #268]	@ (80060ec <TIM_Base_SetConfig+0x130>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a42      	ldr	r2, [pc, #264]	@ (80060f0 <TIM_Base_SetConfig+0x134>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d007      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a41      	ldr	r2, [pc, #260]	@ (80060f4 <TIM_Base_SetConfig+0x138>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a40      	ldr	r2, [pc, #256]	@ (80060f8 <TIM_Base_SetConfig+0x13c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d108      	bne.n	800600e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a35      	ldr	r2, [pc, #212]	@ (80060e8 <TIM_Base_SetConfig+0x12c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d02b      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800601c:	d027      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a32      	ldr	r2, [pc, #200]	@ (80060ec <TIM_Base_SetConfig+0x130>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d023      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a31      	ldr	r2, [pc, #196]	@ (80060f0 <TIM_Base_SetConfig+0x134>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01f      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a30      	ldr	r2, [pc, #192]	@ (80060f4 <TIM_Base_SetConfig+0x138>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01b      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2f      	ldr	r2, [pc, #188]	@ (80060f8 <TIM_Base_SetConfig+0x13c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d017      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2e      	ldr	r2, [pc, #184]	@ (80060fc <TIM_Base_SetConfig+0x140>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2d      	ldr	r2, [pc, #180]	@ (8006100 <TIM_Base_SetConfig+0x144>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00f      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2c      	ldr	r2, [pc, #176]	@ (8006104 <TIM_Base_SetConfig+0x148>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00b      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2b      	ldr	r2, [pc, #172]	@ (8006108 <TIM_Base_SetConfig+0x14c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d007      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2a      	ldr	r2, [pc, #168]	@ (800610c <TIM_Base_SetConfig+0x150>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a29      	ldr	r2, [pc, #164]	@ (8006110 <TIM_Base_SetConfig+0x154>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d108      	bne.n	8006080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a10      	ldr	r2, [pc, #64]	@ (80060e8 <TIM_Base_SetConfig+0x12c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_Base_SetConfig+0xf8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a12      	ldr	r2, [pc, #72]	@ (80060f8 <TIM_Base_SetConfig+0x13c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d103      	bne.n	80060bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	611a      	str	r2, [r3, #16]
  }
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	40010400 	.word	0x40010400
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800
 8006108:	40001800 	.word	0x40001800
 800610c:	40001c00 	.word	0x40001c00
 8006110:	40002000 	.word	0x40002000

08006114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f023 0201 	bic.w	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800613e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 030a 	bic.w	r3, r3, #10
 8006150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	621a      	str	r2, [r3, #32]
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006172:	b480      	push	{r7}
 8006174:	b087      	sub	sp, #28
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f023 0210 	bic.w	r2, r3, #16
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800619c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	031b      	lsls	r3, r3, #12
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f043 0307 	orr.w	r3, r3, #7
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	609a      	str	r2, [r3, #8]
}
 80061fc:	bf00      	nop
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	021a      	lsls	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	431a      	orrs	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4313      	orrs	r3, r2
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	609a      	str	r2, [r3, #8]
}
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800625c:	2302      	movs	r3, #2
 800625e:	e05a      	b.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a21      	ldr	r2, [pc, #132]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ac:	d01d      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1b      	ldr	r2, [pc, #108]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a18      	ldr	r2, [pc, #96]	@ (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a17      	ldr	r2, [pc, #92]	@ (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a15      	ldr	r2, [pc, #84]	@ (800633c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10c      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40010400 	.word	0x40010400
 8006338:	40014000 	.word	0x40014000
 800633c:	40001800 	.word	0x40001800

08006340 <std>:
 8006340:	2300      	movs	r3, #0
 8006342:	b510      	push	{r4, lr}
 8006344:	4604      	mov	r4, r0
 8006346:	e9c0 3300 	strd	r3, r3, [r0]
 800634a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800634e:	6083      	str	r3, [r0, #8]
 8006350:	8181      	strh	r1, [r0, #12]
 8006352:	6643      	str	r3, [r0, #100]	@ 0x64
 8006354:	81c2      	strh	r2, [r0, #14]
 8006356:	6183      	str	r3, [r0, #24]
 8006358:	4619      	mov	r1, r3
 800635a:	2208      	movs	r2, #8
 800635c:	305c      	adds	r0, #92	@ 0x5c
 800635e:	f000 f9f9 	bl	8006754 <memset>
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <std+0x58>)
 8006364:	6263      	str	r3, [r4, #36]	@ 0x24
 8006366:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <std+0x5c>)
 8006368:	62a3      	str	r3, [r4, #40]	@ 0x28
 800636a:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <std+0x60>)
 800636c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800636e:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <std+0x64>)
 8006370:	6323      	str	r3, [r4, #48]	@ 0x30
 8006372:	4b0d      	ldr	r3, [pc, #52]	@ (80063a8 <std+0x68>)
 8006374:	6224      	str	r4, [r4, #32]
 8006376:	429c      	cmp	r4, r3
 8006378:	d006      	beq.n	8006388 <std+0x48>
 800637a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800637e:	4294      	cmp	r4, r2
 8006380:	d002      	beq.n	8006388 <std+0x48>
 8006382:	33d0      	adds	r3, #208	@ 0xd0
 8006384:	429c      	cmp	r4, r3
 8006386:	d105      	bne.n	8006394 <std+0x54>
 8006388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800638c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006390:	f000 ba58 	b.w	8006844 <__retarget_lock_init_recursive>
 8006394:	bd10      	pop	{r4, pc}
 8006396:	bf00      	nop
 8006398:	080065a5 	.word	0x080065a5
 800639c:	080065c7 	.word	0x080065c7
 80063a0:	080065ff 	.word	0x080065ff
 80063a4:	08006623 	.word	0x08006623
 80063a8:	20025be4 	.word	0x20025be4

080063ac <stdio_exit_handler>:
 80063ac:	4a02      	ldr	r2, [pc, #8]	@ (80063b8 <stdio_exit_handler+0xc>)
 80063ae:	4903      	ldr	r1, [pc, #12]	@ (80063bc <stdio_exit_handler+0x10>)
 80063b0:	4803      	ldr	r0, [pc, #12]	@ (80063c0 <stdio_exit_handler+0x14>)
 80063b2:	f000 b869 	b.w	8006488 <_fwalk_sglue>
 80063b6:	bf00      	nop
 80063b8:	2000001c 	.word	0x2000001c
 80063bc:	080070e5 	.word	0x080070e5
 80063c0:	2000002c 	.word	0x2000002c

080063c4 <cleanup_stdio>:
 80063c4:	6841      	ldr	r1, [r0, #4]
 80063c6:	4b0c      	ldr	r3, [pc, #48]	@ (80063f8 <cleanup_stdio+0x34>)
 80063c8:	4299      	cmp	r1, r3
 80063ca:	b510      	push	{r4, lr}
 80063cc:	4604      	mov	r4, r0
 80063ce:	d001      	beq.n	80063d4 <cleanup_stdio+0x10>
 80063d0:	f000 fe88 	bl	80070e4 <_fflush_r>
 80063d4:	68a1      	ldr	r1, [r4, #8]
 80063d6:	4b09      	ldr	r3, [pc, #36]	@ (80063fc <cleanup_stdio+0x38>)
 80063d8:	4299      	cmp	r1, r3
 80063da:	d002      	beq.n	80063e2 <cleanup_stdio+0x1e>
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 fe81 	bl	80070e4 <_fflush_r>
 80063e2:	68e1      	ldr	r1, [r4, #12]
 80063e4:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <cleanup_stdio+0x3c>)
 80063e6:	4299      	cmp	r1, r3
 80063e8:	d004      	beq.n	80063f4 <cleanup_stdio+0x30>
 80063ea:	4620      	mov	r0, r4
 80063ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f0:	f000 be78 	b.w	80070e4 <_fflush_r>
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	bf00      	nop
 80063f8:	20025be4 	.word	0x20025be4
 80063fc:	20025c4c 	.word	0x20025c4c
 8006400:	20025cb4 	.word	0x20025cb4

08006404 <global_stdio_init.part.0>:
 8006404:	b510      	push	{r4, lr}
 8006406:	4b0b      	ldr	r3, [pc, #44]	@ (8006434 <global_stdio_init.part.0+0x30>)
 8006408:	4c0b      	ldr	r4, [pc, #44]	@ (8006438 <global_stdio_init.part.0+0x34>)
 800640a:	4a0c      	ldr	r2, [pc, #48]	@ (800643c <global_stdio_init.part.0+0x38>)
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	4620      	mov	r0, r4
 8006410:	2200      	movs	r2, #0
 8006412:	2104      	movs	r1, #4
 8006414:	f7ff ff94 	bl	8006340 <std>
 8006418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800641c:	2201      	movs	r2, #1
 800641e:	2109      	movs	r1, #9
 8006420:	f7ff ff8e 	bl	8006340 <std>
 8006424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006428:	2202      	movs	r2, #2
 800642a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800642e:	2112      	movs	r1, #18
 8006430:	f7ff bf86 	b.w	8006340 <std>
 8006434:	20025d1c 	.word	0x20025d1c
 8006438:	20025be4 	.word	0x20025be4
 800643c:	080063ad 	.word	0x080063ad

08006440 <__sfp_lock_acquire>:
 8006440:	4801      	ldr	r0, [pc, #4]	@ (8006448 <__sfp_lock_acquire+0x8>)
 8006442:	f000 ba00 	b.w	8006846 <__retarget_lock_acquire_recursive>
 8006446:	bf00      	nop
 8006448:	20025d25 	.word	0x20025d25

0800644c <__sfp_lock_release>:
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <__sfp_lock_release+0x8>)
 800644e:	f000 b9fb 	b.w	8006848 <__retarget_lock_release_recursive>
 8006452:	bf00      	nop
 8006454:	20025d25 	.word	0x20025d25

08006458 <__sinit>:
 8006458:	b510      	push	{r4, lr}
 800645a:	4604      	mov	r4, r0
 800645c:	f7ff fff0 	bl	8006440 <__sfp_lock_acquire>
 8006460:	6a23      	ldr	r3, [r4, #32]
 8006462:	b11b      	cbz	r3, 800646c <__sinit+0x14>
 8006464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006468:	f7ff bff0 	b.w	800644c <__sfp_lock_release>
 800646c:	4b04      	ldr	r3, [pc, #16]	@ (8006480 <__sinit+0x28>)
 800646e:	6223      	str	r3, [r4, #32]
 8006470:	4b04      	ldr	r3, [pc, #16]	@ (8006484 <__sinit+0x2c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1f5      	bne.n	8006464 <__sinit+0xc>
 8006478:	f7ff ffc4 	bl	8006404 <global_stdio_init.part.0>
 800647c:	e7f2      	b.n	8006464 <__sinit+0xc>
 800647e:	bf00      	nop
 8006480:	080063c5 	.word	0x080063c5
 8006484:	20025d1c 	.word	0x20025d1c

08006488 <_fwalk_sglue>:
 8006488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800648c:	4607      	mov	r7, r0
 800648e:	4688      	mov	r8, r1
 8006490:	4614      	mov	r4, r2
 8006492:	2600      	movs	r6, #0
 8006494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006498:	f1b9 0901 	subs.w	r9, r9, #1
 800649c:	d505      	bpl.n	80064aa <_fwalk_sglue+0x22>
 800649e:	6824      	ldr	r4, [r4, #0]
 80064a0:	2c00      	cmp	r4, #0
 80064a2:	d1f7      	bne.n	8006494 <_fwalk_sglue+0xc>
 80064a4:	4630      	mov	r0, r6
 80064a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d907      	bls.n	80064c0 <_fwalk_sglue+0x38>
 80064b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064b4:	3301      	adds	r3, #1
 80064b6:	d003      	beq.n	80064c0 <_fwalk_sglue+0x38>
 80064b8:	4629      	mov	r1, r5
 80064ba:	4638      	mov	r0, r7
 80064bc:	47c0      	blx	r8
 80064be:	4306      	orrs	r6, r0
 80064c0:	3568      	adds	r5, #104	@ 0x68
 80064c2:	e7e9      	b.n	8006498 <_fwalk_sglue+0x10>

080064c4 <iprintf>:
 80064c4:	b40f      	push	{r0, r1, r2, r3}
 80064c6:	b507      	push	{r0, r1, r2, lr}
 80064c8:	4906      	ldr	r1, [pc, #24]	@ (80064e4 <iprintf+0x20>)
 80064ca:	ab04      	add	r3, sp, #16
 80064cc:	6808      	ldr	r0, [r1, #0]
 80064ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d2:	6881      	ldr	r1, [r0, #8]
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	f000 fadb 	bl	8006a90 <_vfiprintf_r>
 80064da:	b003      	add	sp, #12
 80064dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e0:	b004      	add	sp, #16
 80064e2:	4770      	bx	lr
 80064e4:	20000028 	.word	0x20000028

080064e8 <_puts_r>:
 80064e8:	6a03      	ldr	r3, [r0, #32]
 80064ea:	b570      	push	{r4, r5, r6, lr}
 80064ec:	6884      	ldr	r4, [r0, #8]
 80064ee:	4605      	mov	r5, r0
 80064f0:	460e      	mov	r6, r1
 80064f2:	b90b      	cbnz	r3, 80064f8 <_puts_r+0x10>
 80064f4:	f7ff ffb0 	bl	8006458 <__sinit>
 80064f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064fa:	07db      	lsls	r3, r3, #31
 80064fc:	d405      	bmi.n	800650a <_puts_r+0x22>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	0598      	lsls	r0, r3, #22
 8006502:	d402      	bmi.n	800650a <_puts_r+0x22>
 8006504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006506:	f000 f99e 	bl	8006846 <__retarget_lock_acquire_recursive>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	0719      	lsls	r1, r3, #28
 800650e:	d502      	bpl.n	8006516 <_puts_r+0x2e>
 8006510:	6923      	ldr	r3, [r4, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d135      	bne.n	8006582 <_puts_r+0x9a>
 8006516:	4621      	mov	r1, r4
 8006518:	4628      	mov	r0, r5
 800651a:	f000 f8c5 	bl	80066a8 <__swsetup_r>
 800651e:	b380      	cbz	r0, 8006582 <_puts_r+0x9a>
 8006520:	f04f 35ff 	mov.w	r5, #4294967295
 8006524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006526:	07da      	lsls	r2, r3, #31
 8006528:	d405      	bmi.n	8006536 <_puts_r+0x4e>
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	059b      	lsls	r3, r3, #22
 800652e:	d402      	bmi.n	8006536 <_puts_r+0x4e>
 8006530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006532:	f000 f989 	bl	8006848 <__retarget_lock_release_recursive>
 8006536:	4628      	mov	r0, r5
 8006538:	bd70      	pop	{r4, r5, r6, pc}
 800653a:	2b00      	cmp	r3, #0
 800653c:	da04      	bge.n	8006548 <_puts_r+0x60>
 800653e:	69a2      	ldr	r2, [r4, #24]
 8006540:	429a      	cmp	r2, r3
 8006542:	dc17      	bgt.n	8006574 <_puts_r+0x8c>
 8006544:	290a      	cmp	r1, #10
 8006546:	d015      	beq.n	8006574 <_puts_r+0x8c>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	7019      	strb	r1, [r3, #0]
 8006550:	68a3      	ldr	r3, [r4, #8]
 8006552:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006556:	3b01      	subs	r3, #1
 8006558:	60a3      	str	r3, [r4, #8]
 800655a:	2900      	cmp	r1, #0
 800655c:	d1ed      	bne.n	800653a <_puts_r+0x52>
 800655e:	2b00      	cmp	r3, #0
 8006560:	da11      	bge.n	8006586 <_puts_r+0x9e>
 8006562:	4622      	mov	r2, r4
 8006564:	210a      	movs	r1, #10
 8006566:	4628      	mov	r0, r5
 8006568:	f000 f85f 	bl	800662a <__swbuf_r>
 800656c:	3001      	adds	r0, #1
 800656e:	d0d7      	beq.n	8006520 <_puts_r+0x38>
 8006570:	250a      	movs	r5, #10
 8006572:	e7d7      	b.n	8006524 <_puts_r+0x3c>
 8006574:	4622      	mov	r2, r4
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f857 	bl	800662a <__swbuf_r>
 800657c:	3001      	adds	r0, #1
 800657e:	d1e7      	bne.n	8006550 <_puts_r+0x68>
 8006580:	e7ce      	b.n	8006520 <_puts_r+0x38>
 8006582:	3e01      	subs	r6, #1
 8006584:	e7e4      	b.n	8006550 <_puts_r+0x68>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	6022      	str	r2, [r4, #0]
 800658c:	220a      	movs	r2, #10
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	e7ee      	b.n	8006570 <_puts_r+0x88>
	...

08006594 <puts>:
 8006594:	4b02      	ldr	r3, [pc, #8]	@ (80065a0 <puts+0xc>)
 8006596:	4601      	mov	r1, r0
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	f7ff bfa5 	b.w	80064e8 <_puts_r>
 800659e:	bf00      	nop
 80065a0:	20000028 	.word	0x20000028

080065a4 <__sread>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	460c      	mov	r4, r1
 80065a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ac:	f000 f8fc 	bl	80067a8 <_read_r>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	bfab      	itete	ge
 80065b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065b6:	89a3      	ldrhlt	r3, [r4, #12]
 80065b8:	181b      	addge	r3, r3, r0
 80065ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065be:	bfac      	ite	ge
 80065c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065c2:	81a3      	strhlt	r3, [r4, #12]
 80065c4:	bd10      	pop	{r4, pc}

080065c6 <__swrite>:
 80065c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ca:	461f      	mov	r7, r3
 80065cc:	898b      	ldrh	r3, [r1, #12]
 80065ce:	05db      	lsls	r3, r3, #23
 80065d0:	4605      	mov	r5, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	4616      	mov	r6, r2
 80065d6:	d505      	bpl.n	80065e4 <__swrite+0x1e>
 80065d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065dc:	2302      	movs	r3, #2
 80065de:	2200      	movs	r2, #0
 80065e0:	f000 f8d0 	bl	8006784 <_lseek_r>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	4632      	mov	r2, r6
 80065f2:	463b      	mov	r3, r7
 80065f4:	4628      	mov	r0, r5
 80065f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065fa:	f000 b8e7 	b.w	80067cc <_write_r>

080065fe <__sseek>:
 80065fe:	b510      	push	{r4, lr}
 8006600:	460c      	mov	r4, r1
 8006602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006606:	f000 f8bd 	bl	8006784 <_lseek_r>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	bf15      	itete	ne
 8006610:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800661a:	81a3      	strheq	r3, [r4, #12]
 800661c:	bf18      	it	ne
 800661e:	81a3      	strhne	r3, [r4, #12]
 8006620:	bd10      	pop	{r4, pc}

08006622 <__sclose>:
 8006622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006626:	f000 b89d 	b.w	8006764 <_close_r>

0800662a <__swbuf_r>:
 800662a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662c:	460e      	mov	r6, r1
 800662e:	4614      	mov	r4, r2
 8006630:	4605      	mov	r5, r0
 8006632:	b118      	cbz	r0, 800663c <__swbuf_r+0x12>
 8006634:	6a03      	ldr	r3, [r0, #32]
 8006636:	b90b      	cbnz	r3, 800663c <__swbuf_r+0x12>
 8006638:	f7ff ff0e 	bl	8006458 <__sinit>
 800663c:	69a3      	ldr	r3, [r4, #24]
 800663e:	60a3      	str	r3, [r4, #8]
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	071a      	lsls	r2, r3, #28
 8006644:	d501      	bpl.n	800664a <__swbuf_r+0x20>
 8006646:	6923      	ldr	r3, [r4, #16]
 8006648:	b943      	cbnz	r3, 800665c <__swbuf_r+0x32>
 800664a:	4621      	mov	r1, r4
 800664c:	4628      	mov	r0, r5
 800664e:	f000 f82b 	bl	80066a8 <__swsetup_r>
 8006652:	b118      	cbz	r0, 800665c <__swbuf_r+0x32>
 8006654:	f04f 37ff 	mov.w	r7, #4294967295
 8006658:	4638      	mov	r0, r7
 800665a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	6922      	ldr	r2, [r4, #16]
 8006660:	1a98      	subs	r0, r3, r2
 8006662:	6963      	ldr	r3, [r4, #20]
 8006664:	b2f6      	uxtb	r6, r6
 8006666:	4283      	cmp	r3, r0
 8006668:	4637      	mov	r7, r6
 800666a:	dc05      	bgt.n	8006678 <__swbuf_r+0x4e>
 800666c:	4621      	mov	r1, r4
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fd38 	bl	80070e4 <_fflush_r>
 8006674:	2800      	cmp	r0, #0
 8006676:	d1ed      	bne.n	8006654 <__swbuf_r+0x2a>
 8006678:	68a3      	ldr	r3, [r4, #8]
 800667a:	3b01      	subs	r3, #1
 800667c:	60a3      	str	r3, [r4, #8]
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	6022      	str	r2, [r4, #0]
 8006684:	701e      	strb	r6, [r3, #0]
 8006686:	6962      	ldr	r2, [r4, #20]
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	429a      	cmp	r2, r3
 800668c:	d004      	beq.n	8006698 <__swbuf_r+0x6e>
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	07db      	lsls	r3, r3, #31
 8006692:	d5e1      	bpl.n	8006658 <__swbuf_r+0x2e>
 8006694:	2e0a      	cmp	r6, #10
 8006696:	d1df      	bne.n	8006658 <__swbuf_r+0x2e>
 8006698:	4621      	mov	r1, r4
 800669a:	4628      	mov	r0, r5
 800669c:	f000 fd22 	bl	80070e4 <_fflush_r>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d0d9      	beq.n	8006658 <__swbuf_r+0x2e>
 80066a4:	e7d6      	b.n	8006654 <__swbuf_r+0x2a>
	...

080066a8 <__swsetup_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4b29      	ldr	r3, [pc, #164]	@ (8006750 <__swsetup_r+0xa8>)
 80066ac:	4605      	mov	r5, r0
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	460c      	mov	r4, r1
 80066b2:	b118      	cbz	r0, 80066bc <__swsetup_r+0x14>
 80066b4:	6a03      	ldr	r3, [r0, #32]
 80066b6:	b90b      	cbnz	r3, 80066bc <__swsetup_r+0x14>
 80066b8:	f7ff fece 	bl	8006458 <__sinit>
 80066bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c0:	0719      	lsls	r1, r3, #28
 80066c2:	d422      	bmi.n	800670a <__swsetup_r+0x62>
 80066c4:	06da      	lsls	r2, r3, #27
 80066c6:	d407      	bmi.n	80066d8 <__swsetup_r+0x30>
 80066c8:	2209      	movs	r2, #9
 80066ca:	602a      	str	r2, [r5, #0]
 80066cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295
 80066d6:	e033      	b.n	8006740 <__swsetup_r+0x98>
 80066d8:	0758      	lsls	r0, r3, #29
 80066da:	d512      	bpl.n	8006702 <__swsetup_r+0x5a>
 80066dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066de:	b141      	cbz	r1, 80066f2 <__swsetup_r+0x4a>
 80066e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066e4:	4299      	cmp	r1, r3
 80066e6:	d002      	beq.n	80066ee <__swsetup_r+0x46>
 80066e8:	4628      	mov	r0, r5
 80066ea:	f000 f8af 	bl	800684c <_free_r>
 80066ee:	2300      	movs	r3, #0
 80066f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066f8:	81a3      	strh	r3, [r4, #12]
 80066fa:	2300      	movs	r3, #0
 80066fc:	6063      	str	r3, [r4, #4]
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	f043 0308 	orr.w	r3, r3, #8
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	b94b      	cbnz	r3, 8006722 <__swsetup_r+0x7a>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006718:	d003      	beq.n	8006722 <__swsetup_r+0x7a>
 800671a:	4621      	mov	r1, r4
 800671c:	4628      	mov	r0, r5
 800671e:	f000 fd2f 	bl	8007180 <__smakebuf_r>
 8006722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006726:	f013 0201 	ands.w	r2, r3, #1
 800672a:	d00a      	beq.n	8006742 <__swsetup_r+0x9a>
 800672c:	2200      	movs	r2, #0
 800672e:	60a2      	str	r2, [r4, #8]
 8006730:	6962      	ldr	r2, [r4, #20]
 8006732:	4252      	negs	r2, r2
 8006734:	61a2      	str	r2, [r4, #24]
 8006736:	6922      	ldr	r2, [r4, #16]
 8006738:	b942      	cbnz	r2, 800674c <__swsetup_r+0xa4>
 800673a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800673e:	d1c5      	bne.n	80066cc <__swsetup_r+0x24>
 8006740:	bd38      	pop	{r3, r4, r5, pc}
 8006742:	0799      	lsls	r1, r3, #30
 8006744:	bf58      	it	pl
 8006746:	6962      	ldrpl	r2, [r4, #20]
 8006748:	60a2      	str	r2, [r4, #8]
 800674a:	e7f4      	b.n	8006736 <__swsetup_r+0x8e>
 800674c:	2000      	movs	r0, #0
 800674e:	e7f7      	b.n	8006740 <__swsetup_r+0x98>
 8006750:	20000028 	.word	0x20000028

08006754 <memset>:
 8006754:	4402      	add	r2, r0
 8006756:	4603      	mov	r3, r0
 8006758:	4293      	cmp	r3, r2
 800675a:	d100      	bne.n	800675e <memset+0xa>
 800675c:	4770      	bx	lr
 800675e:	f803 1b01 	strb.w	r1, [r3], #1
 8006762:	e7f9      	b.n	8006758 <memset+0x4>

08006764 <_close_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4d06      	ldr	r5, [pc, #24]	@ (8006780 <_close_r+0x1c>)
 8006768:	2300      	movs	r3, #0
 800676a:	4604      	mov	r4, r0
 800676c:	4608      	mov	r0, r1
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	f7fc f936 	bl	80029e0 <_close>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_close_r+0x1a>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_close_r+0x1a>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20025d20 	.word	0x20025d20

08006784 <_lseek_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d07      	ldr	r5, [pc, #28]	@ (80067a4 <_lseek_r+0x20>)
 8006788:	4604      	mov	r4, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	602a      	str	r2, [r5, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fc f94b 	bl	8002a2e <_lseek>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_lseek_r+0x1e>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_lseek_r+0x1e>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	20025d20 	.word	0x20025d20

080067a8 <_read_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d07      	ldr	r5, [pc, #28]	@ (80067c8 <_read_r+0x20>)
 80067ac:	4604      	mov	r4, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	602a      	str	r2, [r5, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7fc f8d9 	bl	800296e <_read>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_read_r+0x1e>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_read_r+0x1e>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20025d20 	.word	0x20025d20

080067cc <_write_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d07      	ldr	r5, [pc, #28]	@ (80067ec <_write_r+0x20>)
 80067d0:	4604      	mov	r4, r0
 80067d2:	4608      	mov	r0, r1
 80067d4:	4611      	mov	r1, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7fc f8e4 	bl	80029a8 <_write>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_write_r+0x1e>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_write_r+0x1e>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	20025d20 	.word	0x20025d20

080067f0 <__errno>:
 80067f0:	4b01      	ldr	r3, [pc, #4]	@ (80067f8 <__errno+0x8>)
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	20000028 	.word	0x20000028

080067fc <__libc_init_array>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006834 <__libc_init_array+0x38>)
 8006800:	4c0d      	ldr	r4, [pc, #52]	@ (8006838 <__libc_init_array+0x3c>)
 8006802:	1b64      	subs	r4, r4, r5
 8006804:	10a4      	asrs	r4, r4, #2
 8006806:	2600      	movs	r6, #0
 8006808:	42a6      	cmp	r6, r4
 800680a:	d109      	bne.n	8006820 <__libc_init_array+0x24>
 800680c:	4d0b      	ldr	r5, [pc, #44]	@ (800683c <__libc_init_array+0x40>)
 800680e:	4c0c      	ldr	r4, [pc, #48]	@ (8006840 <__libc_init_array+0x44>)
 8006810:	f000 fd24 	bl	800725c <_init>
 8006814:	1b64      	subs	r4, r4, r5
 8006816:	10a4      	asrs	r4, r4, #2
 8006818:	2600      	movs	r6, #0
 800681a:	42a6      	cmp	r6, r4
 800681c:	d105      	bne.n	800682a <__libc_init_array+0x2e>
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	f855 3b04 	ldr.w	r3, [r5], #4
 8006824:	4798      	blx	r3
 8006826:	3601      	adds	r6, #1
 8006828:	e7ee      	b.n	8006808 <__libc_init_array+0xc>
 800682a:	f855 3b04 	ldr.w	r3, [r5], #4
 800682e:	4798      	blx	r3
 8006830:	3601      	adds	r6, #1
 8006832:	e7f2      	b.n	800681a <__libc_init_array+0x1e>
 8006834:	080084c4 	.word	0x080084c4
 8006838:	080084c4 	.word	0x080084c4
 800683c:	080084c4 	.word	0x080084c4
 8006840:	080084c8 	.word	0x080084c8

08006844 <__retarget_lock_init_recursive>:
 8006844:	4770      	bx	lr

08006846 <__retarget_lock_acquire_recursive>:
 8006846:	4770      	bx	lr

08006848 <__retarget_lock_release_recursive>:
 8006848:	4770      	bx	lr
	...

0800684c <_free_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4605      	mov	r5, r0
 8006850:	2900      	cmp	r1, #0
 8006852:	d041      	beq.n	80068d8 <_free_r+0x8c>
 8006854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006858:	1f0c      	subs	r4, r1, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	bfb8      	it	lt
 800685e:	18e4      	addlt	r4, r4, r3
 8006860:	f000 f8e0 	bl	8006a24 <__malloc_lock>
 8006864:	4a1d      	ldr	r2, [pc, #116]	@ (80068dc <_free_r+0x90>)
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	b933      	cbnz	r3, 8006878 <_free_r+0x2c>
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	6014      	str	r4, [r2, #0]
 800686e:	4628      	mov	r0, r5
 8006870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006874:	f000 b8dc 	b.w	8006a30 <__malloc_unlock>
 8006878:	42a3      	cmp	r3, r4
 800687a:	d908      	bls.n	800688e <_free_r+0x42>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	1821      	adds	r1, r4, r0
 8006880:	428b      	cmp	r3, r1
 8006882:	bf01      	itttt	eq
 8006884:	6819      	ldreq	r1, [r3, #0]
 8006886:	685b      	ldreq	r3, [r3, #4]
 8006888:	1809      	addeq	r1, r1, r0
 800688a:	6021      	streq	r1, [r4, #0]
 800688c:	e7ed      	b.n	800686a <_free_r+0x1e>
 800688e:	461a      	mov	r2, r3
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	b10b      	cbz	r3, 8006898 <_free_r+0x4c>
 8006894:	42a3      	cmp	r3, r4
 8006896:	d9fa      	bls.n	800688e <_free_r+0x42>
 8006898:	6811      	ldr	r1, [r2, #0]
 800689a:	1850      	adds	r0, r2, r1
 800689c:	42a0      	cmp	r0, r4
 800689e:	d10b      	bne.n	80068b8 <_free_r+0x6c>
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	4401      	add	r1, r0
 80068a4:	1850      	adds	r0, r2, r1
 80068a6:	4283      	cmp	r3, r0
 80068a8:	6011      	str	r1, [r2, #0]
 80068aa:	d1e0      	bne.n	800686e <_free_r+0x22>
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	6053      	str	r3, [r2, #4]
 80068b2:	4408      	add	r0, r1
 80068b4:	6010      	str	r0, [r2, #0]
 80068b6:	e7da      	b.n	800686e <_free_r+0x22>
 80068b8:	d902      	bls.n	80068c0 <_free_r+0x74>
 80068ba:	230c      	movs	r3, #12
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	e7d6      	b.n	800686e <_free_r+0x22>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	1821      	adds	r1, r4, r0
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf04      	itt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	6063      	str	r3, [r4, #4]
 80068ce:	bf04      	itt	eq
 80068d0:	1809      	addeq	r1, r1, r0
 80068d2:	6021      	streq	r1, [r4, #0]
 80068d4:	6054      	str	r4, [r2, #4]
 80068d6:	e7ca      	b.n	800686e <_free_r+0x22>
 80068d8:	bd38      	pop	{r3, r4, r5, pc}
 80068da:	bf00      	nop
 80068dc:	20025d2c 	.word	0x20025d2c

080068e0 <sbrk_aligned>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006920 <sbrk_aligned+0x40>)
 80068e4:	460c      	mov	r4, r1
 80068e6:	6831      	ldr	r1, [r6, #0]
 80068e8:	4605      	mov	r5, r0
 80068ea:	b911      	cbnz	r1, 80068f2 <sbrk_aligned+0x12>
 80068ec:	f000 fca6 	bl	800723c <_sbrk_r>
 80068f0:	6030      	str	r0, [r6, #0]
 80068f2:	4621      	mov	r1, r4
 80068f4:	4628      	mov	r0, r5
 80068f6:	f000 fca1 	bl	800723c <_sbrk_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	d103      	bne.n	8006906 <sbrk_aligned+0x26>
 80068fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006902:	4620      	mov	r0, r4
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	1cc4      	adds	r4, r0, #3
 8006908:	f024 0403 	bic.w	r4, r4, #3
 800690c:	42a0      	cmp	r0, r4
 800690e:	d0f8      	beq.n	8006902 <sbrk_aligned+0x22>
 8006910:	1a21      	subs	r1, r4, r0
 8006912:	4628      	mov	r0, r5
 8006914:	f000 fc92 	bl	800723c <_sbrk_r>
 8006918:	3001      	adds	r0, #1
 800691a:	d1f2      	bne.n	8006902 <sbrk_aligned+0x22>
 800691c:	e7ef      	b.n	80068fe <sbrk_aligned+0x1e>
 800691e:	bf00      	nop
 8006920:	20025d28 	.word	0x20025d28

08006924 <_malloc_r>:
 8006924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006928:	1ccd      	adds	r5, r1, #3
 800692a:	f025 0503 	bic.w	r5, r5, #3
 800692e:	3508      	adds	r5, #8
 8006930:	2d0c      	cmp	r5, #12
 8006932:	bf38      	it	cc
 8006934:	250c      	movcc	r5, #12
 8006936:	2d00      	cmp	r5, #0
 8006938:	4606      	mov	r6, r0
 800693a:	db01      	blt.n	8006940 <_malloc_r+0x1c>
 800693c:	42a9      	cmp	r1, r5
 800693e:	d904      	bls.n	800694a <_malloc_r+0x26>
 8006940:	230c      	movs	r3, #12
 8006942:	6033      	str	r3, [r6, #0]
 8006944:	2000      	movs	r0, #0
 8006946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800694a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a20 <_malloc_r+0xfc>
 800694e:	f000 f869 	bl	8006a24 <__malloc_lock>
 8006952:	f8d8 3000 	ldr.w	r3, [r8]
 8006956:	461c      	mov	r4, r3
 8006958:	bb44      	cbnz	r4, 80069ac <_malloc_r+0x88>
 800695a:	4629      	mov	r1, r5
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff ffbf 	bl	80068e0 <sbrk_aligned>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	4604      	mov	r4, r0
 8006966:	d158      	bne.n	8006a1a <_malloc_r+0xf6>
 8006968:	f8d8 4000 	ldr.w	r4, [r8]
 800696c:	4627      	mov	r7, r4
 800696e:	2f00      	cmp	r7, #0
 8006970:	d143      	bne.n	80069fa <_malloc_r+0xd6>
 8006972:	2c00      	cmp	r4, #0
 8006974:	d04b      	beq.n	8006a0e <_malloc_r+0xea>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	4639      	mov	r1, r7
 800697a:	4630      	mov	r0, r6
 800697c:	eb04 0903 	add.w	r9, r4, r3
 8006980:	f000 fc5c 	bl	800723c <_sbrk_r>
 8006984:	4581      	cmp	r9, r0
 8006986:	d142      	bne.n	8006a0e <_malloc_r+0xea>
 8006988:	6821      	ldr	r1, [r4, #0]
 800698a:	1a6d      	subs	r5, r5, r1
 800698c:	4629      	mov	r1, r5
 800698e:	4630      	mov	r0, r6
 8006990:	f7ff ffa6 	bl	80068e0 <sbrk_aligned>
 8006994:	3001      	adds	r0, #1
 8006996:	d03a      	beq.n	8006a0e <_malloc_r+0xea>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	442b      	add	r3, r5
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	f8d8 3000 	ldr.w	r3, [r8]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	bb62      	cbnz	r2, 8006a00 <_malloc_r+0xdc>
 80069a6:	f8c8 7000 	str.w	r7, [r8]
 80069aa:	e00f      	b.n	80069cc <_malloc_r+0xa8>
 80069ac:	6822      	ldr	r2, [r4, #0]
 80069ae:	1b52      	subs	r2, r2, r5
 80069b0:	d420      	bmi.n	80069f4 <_malloc_r+0xd0>
 80069b2:	2a0b      	cmp	r2, #11
 80069b4:	d917      	bls.n	80069e6 <_malloc_r+0xc2>
 80069b6:	1961      	adds	r1, r4, r5
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	6025      	str	r5, [r4, #0]
 80069bc:	bf18      	it	ne
 80069be:	6059      	strne	r1, [r3, #4]
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	bf08      	it	eq
 80069c4:	f8c8 1000 	streq.w	r1, [r8]
 80069c8:	5162      	str	r2, [r4, r5]
 80069ca:	604b      	str	r3, [r1, #4]
 80069cc:	4630      	mov	r0, r6
 80069ce:	f000 f82f 	bl	8006a30 <__malloc_unlock>
 80069d2:	f104 000b 	add.w	r0, r4, #11
 80069d6:	1d23      	adds	r3, r4, #4
 80069d8:	f020 0007 	bic.w	r0, r0, #7
 80069dc:	1ac2      	subs	r2, r0, r3
 80069de:	bf1c      	itt	ne
 80069e0:	1a1b      	subne	r3, r3, r0
 80069e2:	50a3      	strne	r3, [r4, r2]
 80069e4:	e7af      	b.n	8006946 <_malloc_r+0x22>
 80069e6:	6862      	ldr	r2, [r4, #4]
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	bf0c      	ite	eq
 80069ec:	f8c8 2000 	streq.w	r2, [r8]
 80069f0:	605a      	strne	r2, [r3, #4]
 80069f2:	e7eb      	b.n	80069cc <_malloc_r+0xa8>
 80069f4:	4623      	mov	r3, r4
 80069f6:	6864      	ldr	r4, [r4, #4]
 80069f8:	e7ae      	b.n	8006958 <_malloc_r+0x34>
 80069fa:	463c      	mov	r4, r7
 80069fc:	687f      	ldr	r7, [r7, #4]
 80069fe:	e7b6      	b.n	800696e <_malloc_r+0x4a>
 8006a00:	461a      	mov	r2, r3
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	d1fb      	bne.n	8006a00 <_malloc_r+0xdc>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	6053      	str	r3, [r2, #4]
 8006a0c:	e7de      	b.n	80069cc <_malloc_r+0xa8>
 8006a0e:	230c      	movs	r3, #12
 8006a10:	6033      	str	r3, [r6, #0]
 8006a12:	4630      	mov	r0, r6
 8006a14:	f000 f80c 	bl	8006a30 <__malloc_unlock>
 8006a18:	e794      	b.n	8006944 <_malloc_r+0x20>
 8006a1a:	6005      	str	r5, [r0, #0]
 8006a1c:	e7d6      	b.n	80069cc <_malloc_r+0xa8>
 8006a1e:	bf00      	nop
 8006a20:	20025d2c 	.word	0x20025d2c

08006a24 <__malloc_lock>:
 8006a24:	4801      	ldr	r0, [pc, #4]	@ (8006a2c <__malloc_lock+0x8>)
 8006a26:	f7ff bf0e 	b.w	8006846 <__retarget_lock_acquire_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	20025d24 	.word	0x20025d24

08006a30 <__malloc_unlock>:
 8006a30:	4801      	ldr	r0, [pc, #4]	@ (8006a38 <__malloc_unlock+0x8>)
 8006a32:	f7ff bf09 	b.w	8006848 <__retarget_lock_release_recursive>
 8006a36:	bf00      	nop
 8006a38:	20025d24 	.word	0x20025d24

08006a3c <__sfputc_r>:
 8006a3c:	6893      	ldr	r3, [r2, #8]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	b410      	push	{r4}
 8006a44:	6093      	str	r3, [r2, #8]
 8006a46:	da08      	bge.n	8006a5a <__sfputc_r+0x1e>
 8006a48:	6994      	ldr	r4, [r2, #24]
 8006a4a:	42a3      	cmp	r3, r4
 8006a4c:	db01      	blt.n	8006a52 <__sfputc_r+0x16>
 8006a4e:	290a      	cmp	r1, #10
 8006a50:	d103      	bne.n	8006a5a <__sfputc_r+0x1e>
 8006a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a56:	f7ff bde8 	b.w	800662a <__swbuf_r>
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	1c58      	adds	r0, r3, #1
 8006a5e:	6010      	str	r0, [r2, #0]
 8006a60:	7019      	strb	r1, [r3, #0]
 8006a62:	4608      	mov	r0, r1
 8006a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <__sfputs_r>:
 8006a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	460f      	mov	r7, r1
 8006a70:	4614      	mov	r4, r2
 8006a72:	18d5      	adds	r5, r2, r3
 8006a74:	42ac      	cmp	r4, r5
 8006a76:	d101      	bne.n	8006a7c <__sfputs_r+0x12>
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e007      	b.n	8006a8c <__sfputs_r+0x22>
 8006a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a80:	463a      	mov	r2, r7
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7ff ffda 	bl	8006a3c <__sfputc_r>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d1f3      	bne.n	8006a74 <__sfputs_r+0xa>
 8006a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a90 <_vfiprintf_r>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	460d      	mov	r5, r1
 8006a96:	b09d      	sub	sp, #116	@ 0x74
 8006a98:	4614      	mov	r4, r2
 8006a9a:	4698      	mov	r8, r3
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	b118      	cbz	r0, 8006aa8 <_vfiprintf_r+0x18>
 8006aa0:	6a03      	ldr	r3, [r0, #32]
 8006aa2:	b90b      	cbnz	r3, 8006aa8 <_vfiprintf_r+0x18>
 8006aa4:	f7ff fcd8 	bl	8006458 <__sinit>
 8006aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aaa:	07d9      	lsls	r1, r3, #31
 8006aac:	d405      	bmi.n	8006aba <_vfiprintf_r+0x2a>
 8006aae:	89ab      	ldrh	r3, [r5, #12]
 8006ab0:	059a      	lsls	r2, r3, #22
 8006ab2:	d402      	bmi.n	8006aba <_vfiprintf_r+0x2a>
 8006ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ab6:	f7ff fec6 	bl	8006846 <__retarget_lock_acquire_recursive>
 8006aba:	89ab      	ldrh	r3, [r5, #12]
 8006abc:	071b      	lsls	r3, r3, #28
 8006abe:	d501      	bpl.n	8006ac4 <_vfiprintf_r+0x34>
 8006ac0:	692b      	ldr	r3, [r5, #16]
 8006ac2:	b99b      	cbnz	r3, 8006aec <_vfiprintf_r+0x5c>
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7ff fdee 	bl	80066a8 <__swsetup_r>
 8006acc:	b170      	cbz	r0, 8006aec <_vfiprintf_r+0x5c>
 8006ace:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ad0:	07dc      	lsls	r4, r3, #31
 8006ad2:	d504      	bpl.n	8006ade <_vfiprintf_r+0x4e>
 8006ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad8:	b01d      	add	sp, #116	@ 0x74
 8006ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ade:	89ab      	ldrh	r3, [r5, #12]
 8006ae0:	0598      	lsls	r0, r3, #22
 8006ae2:	d4f7      	bmi.n	8006ad4 <_vfiprintf_r+0x44>
 8006ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ae6:	f7ff feaf 	bl	8006848 <__retarget_lock_release_recursive>
 8006aea:	e7f3      	b.n	8006ad4 <_vfiprintf_r+0x44>
 8006aec:	2300      	movs	r3, #0
 8006aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006af0:	2320      	movs	r3, #32
 8006af2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006afa:	2330      	movs	r3, #48	@ 0x30
 8006afc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cac <_vfiprintf_r+0x21c>
 8006b00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b04:	f04f 0901 	mov.w	r9, #1
 8006b08:	4623      	mov	r3, r4
 8006b0a:	469a      	mov	sl, r3
 8006b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b10:	b10a      	cbz	r2, 8006b16 <_vfiprintf_r+0x86>
 8006b12:	2a25      	cmp	r2, #37	@ 0x25
 8006b14:	d1f9      	bne.n	8006b0a <_vfiprintf_r+0x7a>
 8006b16:	ebba 0b04 	subs.w	fp, sl, r4
 8006b1a:	d00b      	beq.n	8006b34 <_vfiprintf_r+0xa4>
 8006b1c:	465b      	mov	r3, fp
 8006b1e:	4622      	mov	r2, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	4630      	mov	r0, r6
 8006b24:	f7ff ffa1 	bl	8006a6a <__sfputs_r>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	f000 80a7 	beq.w	8006c7c <_vfiprintf_r+0x1ec>
 8006b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b30:	445a      	add	r2, fp
 8006b32:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b34:	f89a 3000 	ldrb.w	r3, [sl]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 809f 	beq.w	8006c7c <_vfiprintf_r+0x1ec>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b48:	f10a 0a01 	add.w	sl, sl, #1
 8006b4c:	9304      	str	r3, [sp, #16]
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b54:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b56:	4654      	mov	r4, sl
 8006b58:	2205      	movs	r2, #5
 8006b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5e:	4853      	ldr	r0, [pc, #332]	@ (8006cac <_vfiprintf_r+0x21c>)
 8006b60:	f7f9 fb46 	bl	80001f0 <memchr>
 8006b64:	9a04      	ldr	r2, [sp, #16]
 8006b66:	b9d8      	cbnz	r0, 8006ba0 <_vfiprintf_r+0x110>
 8006b68:	06d1      	lsls	r1, r2, #27
 8006b6a:	bf44      	itt	mi
 8006b6c:	2320      	movmi	r3, #32
 8006b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b72:	0713      	lsls	r3, r2, #28
 8006b74:	bf44      	itt	mi
 8006b76:	232b      	movmi	r3, #43	@ 0x2b
 8006b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b82:	d015      	beq.n	8006bb0 <_vfiprintf_r+0x120>
 8006b84:	9a07      	ldr	r2, [sp, #28]
 8006b86:	4654      	mov	r4, sl
 8006b88:	2000      	movs	r0, #0
 8006b8a:	f04f 0c0a 	mov.w	ip, #10
 8006b8e:	4621      	mov	r1, r4
 8006b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b94:	3b30      	subs	r3, #48	@ 0x30
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d94b      	bls.n	8006c32 <_vfiprintf_r+0x1a2>
 8006b9a:	b1b0      	cbz	r0, 8006bca <_vfiprintf_r+0x13a>
 8006b9c:	9207      	str	r2, [sp, #28]
 8006b9e:	e014      	b.n	8006bca <_vfiprintf_r+0x13a>
 8006ba0:	eba0 0308 	sub.w	r3, r0, r8
 8006ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	46a2      	mov	sl, r4
 8006bae:	e7d2      	b.n	8006b56 <_vfiprintf_r+0xc6>
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	1d19      	adds	r1, r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	9103      	str	r1, [sp, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bfbb      	ittet	lt
 8006bbc:	425b      	neglt	r3, r3
 8006bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc2:	9307      	strge	r3, [sp, #28]
 8006bc4:	9307      	strlt	r3, [sp, #28]
 8006bc6:	bfb8      	it	lt
 8006bc8:	9204      	strlt	r2, [sp, #16]
 8006bca:	7823      	ldrb	r3, [r4, #0]
 8006bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bce:	d10a      	bne.n	8006be6 <_vfiprintf_r+0x156>
 8006bd0:	7863      	ldrb	r3, [r4, #1]
 8006bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bd4:	d132      	bne.n	8006c3c <_vfiprintf_r+0x1ac>
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	1d1a      	adds	r2, r3, #4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	9203      	str	r2, [sp, #12]
 8006bde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006be2:	3402      	adds	r4, #2
 8006be4:	9305      	str	r3, [sp, #20]
 8006be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cbc <_vfiprintf_r+0x22c>
 8006bea:	7821      	ldrb	r1, [r4, #0]
 8006bec:	2203      	movs	r2, #3
 8006bee:	4650      	mov	r0, sl
 8006bf0:	f7f9 fafe 	bl	80001f0 <memchr>
 8006bf4:	b138      	cbz	r0, 8006c06 <_vfiprintf_r+0x176>
 8006bf6:	9b04      	ldr	r3, [sp, #16]
 8006bf8:	eba0 000a 	sub.w	r0, r0, sl
 8006bfc:	2240      	movs	r2, #64	@ 0x40
 8006bfe:	4082      	lsls	r2, r0
 8006c00:	4313      	orrs	r3, r2
 8006c02:	3401      	adds	r4, #1
 8006c04:	9304      	str	r3, [sp, #16]
 8006c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0a:	4829      	ldr	r0, [pc, #164]	@ (8006cb0 <_vfiprintf_r+0x220>)
 8006c0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c10:	2206      	movs	r2, #6
 8006c12:	f7f9 faed 	bl	80001f0 <memchr>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d03f      	beq.n	8006c9a <_vfiprintf_r+0x20a>
 8006c1a:	4b26      	ldr	r3, [pc, #152]	@ (8006cb4 <_vfiprintf_r+0x224>)
 8006c1c:	bb1b      	cbnz	r3, 8006c66 <_vfiprintf_r+0x1d6>
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	3307      	adds	r3, #7
 8006c22:	f023 0307 	bic.w	r3, r3, #7
 8006c26:	3308      	adds	r3, #8
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c2c:	443b      	add	r3, r7
 8006c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c30:	e76a      	b.n	8006b08 <_vfiprintf_r+0x78>
 8006c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c36:	460c      	mov	r4, r1
 8006c38:	2001      	movs	r0, #1
 8006c3a:	e7a8      	b.n	8006b8e <_vfiprintf_r+0xfe>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	3401      	adds	r4, #1
 8006c40:	9305      	str	r3, [sp, #20]
 8006c42:	4619      	mov	r1, r3
 8006c44:	f04f 0c0a 	mov.w	ip, #10
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c4e:	3a30      	subs	r2, #48	@ 0x30
 8006c50:	2a09      	cmp	r2, #9
 8006c52:	d903      	bls.n	8006c5c <_vfiprintf_r+0x1cc>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0c6      	beq.n	8006be6 <_vfiprintf_r+0x156>
 8006c58:	9105      	str	r1, [sp, #20]
 8006c5a:	e7c4      	b.n	8006be6 <_vfiprintf_r+0x156>
 8006c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c60:	4604      	mov	r4, r0
 8006c62:	2301      	movs	r3, #1
 8006c64:	e7f0      	b.n	8006c48 <_vfiprintf_r+0x1b8>
 8006c66:	ab03      	add	r3, sp, #12
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	4b12      	ldr	r3, [pc, #72]	@ (8006cb8 <_vfiprintf_r+0x228>)
 8006c6e:	a904      	add	r1, sp, #16
 8006c70:	4630      	mov	r0, r6
 8006c72:	f3af 8000 	nop.w
 8006c76:	4607      	mov	r7, r0
 8006c78:	1c78      	adds	r0, r7, #1
 8006c7a:	d1d6      	bne.n	8006c2a <_vfiprintf_r+0x19a>
 8006c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c7e:	07d9      	lsls	r1, r3, #31
 8006c80:	d405      	bmi.n	8006c8e <_vfiprintf_r+0x1fe>
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	059a      	lsls	r2, r3, #22
 8006c86:	d402      	bmi.n	8006c8e <_vfiprintf_r+0x1fe>
 8006c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c8a:	f7ff fddd 	bl	8006848 <__retarget_lock_release_recursive>
 8006c8e:	89ab      	ldrh	r3, [r5, #12]
 8006c90:	065b      	lsls	r3, r3, #25
 8006c92:	f53f af1f 	bmi.w	8006ad4 <_vfiprintf_r+0x44>
 8006c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c98:	e71e      	b.n	8006ad8 <_vfiprintf_r+0x48>
 8006c9a:	ab03      	add	r3, sp, #12
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	462a      	mov	r2, r5
 8006ca0:	4b05      	ldr	r3, [pc, #20]	@ (8006cb8 <_vfiprintf_r+0x228>)
 8006ca2:	a904      	add	r1, sp, #16
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	f000 f879 	bl	8006d9c <_printf_i>
 8006caa:	e7e4      	b.n	8006c76 <_vfiprintf_r+0x1e6>
 8006cac:	08008488 	.word	0x08008488
 8006cb0:	08008492 	.word	0x08008492
 8006cb4:	00000000 	.word	0x00000000
 8006cb8:	08006a6b 	.word	0x08006a6b
 8006cbc:	0800848e 	.word	0x0800848e

08006cc0 <_printf_common>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	4698      	mov	r8, r3
 8006cc8:	688a      	ldr	r2, [r1, #8]
 8006cca:	690b      	ldr	r3, [r1, #16]
 8006ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	bfb8      	it	lt
 8006cd4:	4613      	movlt	r3, r2
 8006cd6:	6033      	str	r3, [r6, #0]
 8006cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cdc:	4607      	mov	r7, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	b10a      	cbz	r2, 8006ce6 <_printf_common+0x26>
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	0699      	lsls	r1, r3, #26
 8006cea:	bf42      	ittt	mi
 8006cec:	6833      	ldrmi	r3, [r6, #0]
 8006cee:	3302      	addmi	r3, #2
 8006cf0:	6033      	strmi	r3, [r6, #0]
 8006cf2:	6825      	ldr	r5, [r4, #0]
 8006cf4:	f015 0506 	ands.w	r5, r5, #6
 8006cf8:	d106      	bne.n	8006d08 <_printf_common+0x48>
 8006cfa:	f104 0a19 	add.w	sl, r4, #25
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	6832      	ldr	r2, [r6, #0]
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	42ab      	cmp	r3, r5
 8006d06:	dc26      	bgt.n	8006d56 <_printf_common+0x96>
 8006d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	3b00      	subs	r3, #0
 8006d10:	bf18      	it	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	0692      	lsls	r2, r2, #26
 8006d16:	d42b      	bmi.n	8006d70 <_printf_common+0xb0>
 8006d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	4638      	mov	r0, r7
 8006d20:	47c8      	blx	r9
 8006d22:	3001      	adds	r0, #1
 8006d24:	d01e      	beq.n	8006d64 <_printf_common+0xa4>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	6922      	ldr	r2, [r4, #16]
 8006d2a:	f003 0306 	and.w	r3, r3, #6
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	bf02      	ittt	eq
 8006d32:	68e5      	ldreq	r5, [r4, #12]
 8006d34:	6833      	ldreq	r3, [r6, #0]
 8006d36:	1aed      	subeq	r5, r5, r3
 8006d38:	68a3      	ldr	r3, [r4, #8]
 8006d3a:	bf0c      	ite	eq
 8006d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d40:	2500      	movne	r5, #0
 8006d42:	4293      	cmp	r3, r2
 8006d44:	bfc4      	itt	gt
 8006d46:	1a9b      	subgt	r3, r3, r2
 8006d48:	18ed      	addgt	r5, r5, r3
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	341a      	adds	r4, #26
 8006d4e:	42b5      	cmp	r5, r6
 8006d50:	d11a      	bne.n	8006d88 <_printf_common+0xc8>
 8006d52:	2000      	movs	r0, #0
 8006d54:	e008      	b.n	8006d68 <_printf_common+0xa8>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4652      	mov	r2, sl
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	47c8      	blx	r9
 8006d60:	3001      	adds	r0, #1
 8006d62:	d103      	bne.n	8006d6c <_printf_common+0xac>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	3501      	adds	r5, #1
 8006d6e:	e7c6      	b.n	8006cfe <_printf_common+0x3e>
 8006d70:	18e1      	adds	r1, r4, r3
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	2030      	movs	r0, #48	@ 0x30
 8006d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d7a:	4422      	add	r2, r4
 8006d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d84:	3302      	adds	r3, #2
 8006d86:	e7c7      	b.n	8006d18 <_printf_common+0x58>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c8      	blx	r9
 8006d92:	3001      	adds	r0, #1
 8006d94:	d0e6      	beq.n	8006d64 <_printf_common+0xa4>
 8006d96:	3601      	adds	r6, #1
 8006d98:	e7d9      	b.n	8006d4e <_printf_common+0x8e>
	...

08006d9c <_printf_i>:
 8006d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	7e0f      	ldrb	r7, [r1, #24]
 8006da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006da4:	2f78      	cmp	r7, #120	@ 0x78
 8006da6:	4691      	mov	r9, r2
 8006da8:	4680      	mov	r8, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	469a      	mov	sl, r3
 8006dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006db2:	d807      	bhi.n	8006dc4 <_printf_i+0x28>
 8006db4:	2f62      	cmp	r7, #98	@ 0x62
 8006db6:	d80a      	bhi.n	8006dce <_printf_i+0x32>
 8006db8:	2f00      	cmp	r7, #0
 8006dba:	f000 80d2 	beq.w	8006f62 <_printf_i+0x1c6>
 8006dbe:	2f58      	cmp	r7, #88	@ 0x58
 8006dc0:	f000 80b9 	beq.w	8006f36 <_printf_i+0x19a>
 8006dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dcc:	e03a      	b.n	8006e44 <_printf_i+0xa8>
 8006dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dd2:	2b15      	cmp	r3, #21
 8006dd4:	d8f6      	bhi.n	8006dc4 <_printf_i+0x28>
 8006dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8006ddc <_printf_i+0x40>)
 8006dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e49 	.word	0x08006e49
 8006de4:	08006dc5 	.word	0x08006dc5
 8006de8:	08006dc5 	.word	0x08006dc5
 8006dec:	08006dc5 	.word	0x08006dc5
 8006df0:	08006dc5 	.word	0x08006dc5
 8006df4:	08006e49 	.word	0x08006e49
 8006df8:	08006dc5 	.word	0x08006dc5
 8006dfc:	08006dc5 	.word	0x08006dc5
 8006e00:	08006dc5 	.word	0x08006dc5
 8006e04:	08006dc5 	.word	0x08006dc5
 8006e08:	08006f49 	.word	0x08006f49
 8006e0c:	08006e73 	.word	0x08006e73
 8006e10:	08006f03 	.word	0x08006f03
 8006e14:	08006dc5 	.word	0x08006dc5
 8006e18:	08006dc5 	.word	0x08006dc5
 8006e1c:	08006f6b 	.word	0x08006f6b
 8006e20:	08006dc5 	.word	0x08006dc5
 8006e24:	08006e73 	.word	0x08006e73
 8006e28:	08006dc5 	.word	0x08006dc5
 8006e2c:	08006dc5 	.word	0x08006dc5
 8006e30:	08006f0b 	.word	0x08006f0b
 8006e34:	6833      	ldr	r3, [r6, #0]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6032      	str	r2, [r6, #0]
 8006e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e44:	2301      	movs	r3, #1
 8006e46:	e09d      	b.n	8006f84 <_printf_i+0x1e8>
 8006e48:	6833      	ldr	r3, [r6, #0]
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	1d19      	adds	r1, r3, #4
 8006e4e:	6031      	str	r1, [r6, #0]
 8006e50:	0606      	lsls	r6, r0, #24
 8006e52:	d501      	bpl.n	8006e58 <_printf_i+0xbc>
 8006e54:	681d      	ldr	r5, [r3, #0]
 8006e56:	e003      	b.n	8006e60 <_printf_i+0xc4>
 8006e58:	0645      	lsls	r5, r0, #25
 8006e5a:	d5fb      	bpl.n	8006e54 <_printf_i+0xb8>
 8006e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	da03      	bge.n	8006e6c <_printf_i+0xd0>
 8006e64:	232d      	movs	r3, #45	@ 0x2d
 8006e66:	426d      	negs	r5, r5
 8006e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e6c:	4859      	ldr	r0, [pc, #356]	@ (8006fd4 <_printf_i+0x238>)
 8006e6e:	230a      	movs	r3, #10
 8006e70:	e011      	b.n	8006e96 <_printf_i+0xfa>
 8006e72:	6821      	ldr	r1, [r4, #0]
 8006e74:	6833      	ldr	r3, [r6, #0]
 8006e76:	0608      	lsls	r0, r1, #24
 8006e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e7c:	d402      	bmi.n	8006e84 <_printf_i+0xe8>
 8006e7e:	0649      	lsls	r1, r1, #25
 8006e80:	bf48      	it	mi
 8006e82:	b2ad      	uxthmi	r5, r5
 8006e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e86:	4853      	ldr	r0, [pc, #332]	@ (8006fd4 <_printf_i+0x238>)
 8006e88:	6033      	str	r3, [r6, #0]
 8006e8a:	bf14      	ite	ne
 8006e8c:	230a      	movne	r3, #10
 8006e8e:	2308      	moveq	r3, #8
 8006e90:	2100      	movs	r1, #0
 8006e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e96:	6866      	ldr	r6, [r4, #4]
 8006e98:	60a6      	str	r6, [r4, #8]
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	bfa2      	ittt	ge
 8006e9e:	6821      	ldrge	r1, [r4, #0]
 8006ea0:	f021 0104 	bicge.w	r1, r1, #4
 8006ea4:	6021      	strge	r1, [r4, #0]
 8006ea6:	b90d      	cbnz	r5, 8006eac <_printf_i+0x110>
 8006ea8:	2e00      	cmp	r6, #0
 8006eaa:	d04b      	beq.n	8006f44 <_printf_i+0x1a8>
 8006eac:	4616      	mov	r6, r2
 8006eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8006eb6:	5dc7      	ldrb	r7, [r0, r7]
 8006eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ebc:	462f      	mov	r7, r5
 8006ebe:	42bb      	cmp	r3, r7
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	d9f4      	bls.n	8006eae <_printf_i+0x112>
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d10b      	bne.n	8006ee0 <_printf_i+0x144>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	07df      	lsls	r7, r3, #31
 8006ecc:	d508      	bpl.n	8006ee0 <_printf_i+0x144>
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	6861      	ldr	r1, [r4, #4]
 8006ed2:	4299      	cmp	r1, r3
 8006ed4:	bfde      	ittt	le
 8006ed6:	2330      	movle	r3, #48	@ 0x30
 8006ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ee0:	1b92      	subs	r2, r2, r6
 8006ee2:	6122      	str	r2, [r4, #16]
 8006ee4:	f8cd a000 	str.w	sl, [sp]
 8006ee8:	464b      	mov	r3, r9
 8006eea:	aa03      	add	r2, sp, #12
 8006eec:	4621      	mov	r1, r4
 8006eee:	4640      	mov	r0, r8
 8006ef0:	f7ff fee6 	bl	8006cc0 <_printf_common>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d14a      	bne.n	8006f8e <_printf_i+0x1f2>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	b004      	add	sp, #16
 8006efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	f043 0320 	orr.w	r3, r3, #32
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	4833      	ldr	r0, [pc, #204]	@ (8006fd8 <_printf_i+0x23c>)
 8006f0c:	2778      	movs	r7, #120	@ 0x78
 8006f0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	6831      	ldr	r1, [r6, #0]
 8006f16:	061f      	lsls	r7, r3, #24
 8006f18:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f1c:	d402      	bmi.n	8006f24 <_printf_i+0x188>
 8006f1e:	065f      	lsls	r7, r3, #25
 8006f20:	bf48      	it	mi
 8006f22:	b2ad      	uxthmi	r5, r5
 8006f24:	6031      	str	r1, [r6, #0]
 8006f26:	07d9      	lsls	r1, r3, #31
 8006f28:	bf44      	itt	mi
 8006f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f2e:	6023      	strmi	r3, [r4, #0]
 8006f30:	b11d      	cbz	r5, 8006f3a <_printf_i+0x19e>
 8006f32:	2310      	movs	r3, #16
 8006f34:	e7ac      	b.n	8006e90 <_printf_i+0xf4>
 8006f36:	4827      	ldr	r0, [pc, #156]	@ (8006fd4 <_printf_i+0x238>)
 8006f38:	e7e9      	b.n	8006f0e <_printf_i+0x172>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f023 0320 	bic.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	e7f6      	b.n	8006f32 <_printf_i+0x196>
 8006f44:	4616      	mov	r6, r2
 8006f46:	e7bd      	b.n	8006ec4 <_printf_i+0x128>
 8006f48:	6833      	ldr	r3, [r6, #0]
 8006f4a:	6825      	ldr	r5, [r4, #0]
 8006f4c:	6961      	ldr	r1, [r4, #20]
 8006f4e:	1d18      	adds	r0, r3, #4
 8006f50:	6030      	str	r0, [r6, #0]
 8006f52:	062e      	lsls	r6, r5, #24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0x1c0>
 8006f58:	6019      	str	r1, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <_printf_i+0x1c6>
 8006f5c:	0668      	lsls	r0, r5, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0x1bc>
 8006f60:	8019      	strh	r1, [r3, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	4616      	mov	r6, r2
 8006f68:	e7bc      	b.n	8006ee4 <_printf_i+0x148>
 8006f6a:	6833      	ldr	r3, [r6, #0]
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	6032      	str	r2, [r6, #0]
 8006f70:	681e      	ldr	r6, [r3, #0]
 8006f72:	6862      	ldr	r2, [r4, #4]
 8006f74:	2100      	movs	r1, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7f9 f93a 	bl	80001f0 <memchr>
 8006f7c:	b108      	cbz	r0, 8006f82 <_printf_i+0x1e6>
 8006f7e:	1b80      	subs	r0, r0, r6
 8006f80:	6060      	str	r0, [r4, #4]
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	2300      	movs	r3, #0
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f8c:	e7aa      	b.n	8006ee4 <_printf_i+0x148>
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	4632      	mov	r2, r6
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0ad      	beq.n	8006ef8 <_printf_i+0x15c>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	079b      	lsls	r3, r3, #30
 8006fa0:	d413      	bmi.n	8006fca <_printf_i+0x22e>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	4298      	cmp	r0, r3
 8006fa8:	bfb8      	it	lt
 8006faa:	4618      	movlt	r0, r3
 8006fac:	e7a6      	b.n	8006efc <_printf_i+0x160>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d09d      	beq.n	8006ef8 <_printf_i+0x15c>
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	9903      	ldr	r1, [sp, #12]
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dcf2      	bgt.n	8006fae <_printf_i+0x212>
 8006fc8:	e7eb      	b.n	8006fa2 <_printf_i+0x206>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	f104 0619 	add.w	r6, r4, #25
 8006fd0:	e7f5      	b.n	8006fbe <_printf_i+0x222>
 8006fd2:	bf00      	nop
 8006fd4:	08008499 	.word	0x08008499
 8006fd8:	080084aa 	.word	0x080084aa

08006fdc <__sflush_r>:
 8006fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe4:	0716      	lsls	r6, r2, #28
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	d454      	bmi.n	8007096 <__sflush_r+0xba>
 8006fec:	684b      	ldr	r3, [r1, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dc02      	bgt.n	8006ff8 <__sflush_r+0x1c>
 8006ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	dd48      	ble.n	800708a <__sflush_r+0xae>
 8006ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d045      	beq.n	800708a <__sflush_r+0xae>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007004:	682f      	ldr	r7, [r5, #0]
 8007006:	6a21      	ldr	r1, [r4, #32]
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	d030      	beq.n	800706e <__sflush_r+0x92>
 800700c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	0759      	lsls	r1, r3, #29
 8007012:	d505      	bpl.n	8007020 <__sflush_r+0x44>
 8007014:	6863      	ldr	r3, [r4, #4]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800701a:	b10b      	cbz	r3, 8007020 <__sflush_r+0x44>
 800701c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800701e:	1ad2      	subs	r2, r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007024:	6a21      	ldr	r1, [r4, #32]
 8007026:	4628      	mov	r0, r5
 8007028:	47b0      	blx	r6
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	d106      	bne.n	800703e <__sflush_r+0x62>
 8007030:	6829      	ldr	r1, [r5, #0]
 8007032:	291d      	cmp	r1, #29
 8007034:	d82b      	bhi.n	800708e <__sflush_r+0xb2>
 8007036:	4a2a      	ldr	r2, [pc, #168]	@ (80070e0 <__sflush_r+0x104>)
 8007038:	410a      	asrs	r2, r1
 800703a:	07d6      	lsls	r6, r2, #31
 800703c:	d427      	bmi.n	800708e <__sflush_r+0xb2>
 800703e:	2200      	movs	r2, #0
 8007040:	6062      	str	r2, [r4, #4]
 8007042:	04d9      	lsls	r1, r3, #19
 8007044:	6922      	ldr	r2, [r4, #16]
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	d504      	bpl.n	8007054 <__sflush_r+0x78>
 800704a:	1c42      	adds	r2, r0, #1
 800704c:	d101      	bne.n	8007052 <__sflush_r+0x76>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	b903      	cbnz	r3, 8007054 <__sflush_r+0x78>
 8007052:	6560      	str	r0, [r4, #84]	@ 0x54
 8007054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007056:	602f      	str	r7, [r5, #0]
 8007058:	b1b9      	cbz	r1, 800708a <__sflush_r+0xae>
 800705a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800705e:	4299      	cmp	r1, r3
 8007060:	d002      	beq.n	8007068 <__sflush_r+0x8c>
 8007062:	4628      	mov	r0, r5
 8007064:	f7ff fbf2 	bl	800684c <_free_r>
 8007068:	2300      	movs	r3, #0
 800706a:	6363      	str	r3, [r4, #52]	@ 0x34
 800706c:	e00d      	b.n	800708a <__sflush_r+0xae>
 800706e:	2301      	movs	r3, #1
 8007070:	4628      	mov	r0, r5
 8007072:	47b0      	blx	r6
 8007074:	4602      	mov	r2, r0
 8007076:	1c50      	adds	r0, r2, #1
 8007078:	d1c9      	bne.n	800700e <__sflush_r+0x32>
 800707a:	682b      	ldr	r3, [r5, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0c6      	beq.n	800700e <__sflush_r+0x32>
 8007080:	2b1d      	cmp	r3, #29
 8007082:	d001      	beq.n	8007088 <__sflush_r+0xac>
 8007084:	2b16      	cmp	r3, #22
 8007086:	d11e      	bne.n	80070c6 <__sflush_r+0xea>
 8007088:	602f      	str	r7, [r5, #0]
 800708a:	2000      	movs	r0, #0
 800708c:	e022      	b.n	80070d4 <__sflush_r+0xf8>
 800708e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007092:	b21b      	sxth	r3, r3
 8007094:	e01b      	b.n	80070ce <__sflush_r+0xf2>
 8007096:	690f      	ldr	r7, [r1, #16]
 8007098:	2f00      	cmp	r7, #0
 800709a:	d0f6      	beq.n	800708a <__sflush_r+0xae>
 800709c:	0793      	lsls	r3, r2, #30
 800709e:	680e      	ldr	r6, [r1, #0]
 80070a0:	bf08      	it	eq
 80070a2:	694b      	ldreq	r3, [r1, #20]
 80070a4:	600f      	str	r7, [r1, #0]
 80070a6:	bf18      	it	ne
 80070a8:	2300      	movne	r3, #0
 80070aa:	eba6 0807 	sub.w	r8, r6, r7
 80070ae:	608b      	str	r3, [r1, #8]
 80070b0:	f1b8 0f00 	cmp.w	r8, #0
 80070b4:	dde9      	ble.n	800708a <__sflush_r+0xae>
 80070b6:	6a21      	ldr	r1, [r4, #32]
 80070b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070ba:	4643      	mov	r3, r8
 80070bc:	463a      	mov	r2, r7
 80070be:	4628      	mov	r0, r5
 80070c0:	47b0      	blx	r6
 80070c2:	2800      	cmp	r0, #0
 80070c4:	dc08      	bgt.n	80070d8 <__sflush_r+0xfc>
 80070c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d8:	4407      	add	r7, r0
 80070da:	eba8 0800 	sub.w	r8, r8, r0
 80070de:	e7e7      	b.n	80070b0 <__sflush_r+0xd4>
 80070e0:	dfbffffe 	.word	0xdfbffffe

080070e4 <_fflush_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	690b      	ldr	r3, [r1, #16]
 80070e8:	4605      	mov	r5, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	b913      	cbnz	r3, 80070f4 <_fflush_r+0x10>
 80070ee:	2500      	movs	r5, #0
 80070f0:	4628      	mov	r0, r5
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	b118      	cbz	r0, 80070fe <_fflush_r+0x1a>
 80070f6:	6a03      	ldr	r3, [r0, #32]
 80070f8:	b90b      	cbnz	r3, 80070fe <_fflush_r+0x1a>
 80070fa:	f7ff f9ad 	bl	8006458 <__sinit>
 80070fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0f3      	beq.n	80070ee <_fflush_r+0xa>
 8007106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007108:	07d0      	lsls	r0, r2, #31
 800710a:	d404      	bmi.n	8007116 <_fflush_r+0x32>
 800710c:	0599      	lsls	r1, r3, #22
 800710e:	d402      	bmi.n	8007116 <_fflush_r+0x32>
 8007110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007112:	f7ff fb98 	bl	8006846 <__retarget_lock_acquire_recursive>
 8007116:	4628      	mov	r0, r5
 8007118:	4621      	mov	r1, r4
 800711a:	f7ff ff5f 	bl	8006fdc <__sflush_r>
 800711e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007120:	07da      	lsls	r2, r3, #31
 8007122:	4605      	mov	r5, r0
 8007124:	d4e4      	bmi.n	80070f0 <_fflush_r+0xc>
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	059b      	lsls	r3, r3, #22
 800712a:	d4e1      	bmi.n	80070f0 <_fflush_r+0xc>
 800712c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800712e:	f7ff fb8b 	bl	8006848 <__retarget_lock_release_recursive>
 8007132:	e7dd      	b.n	80070f0 <_fflush_r+0xc>

08007134 <__swhatbuf_r>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	460c      	mov	r4, r1
 8007138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713c:	2900      	cmp	r1, #0
 800713e:	b096      	sub	sp, #88	@ 0x58
 8007140:	4615      	mov	r5, r2
 8007142:	461e      	mov	r6, r3
 8007144:	da0d      	bge.n	8007162 <__swhatbuf_r+0x2e>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800714c:	f04f 0100 	mov.w	r1, #0
 8007150:	bf14      	ite	ne
 8007152:	2340      	movne	r3, #64	@ 0x40
 8007154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007158:	2000      	movs	r0, #0
 800715a:	6031      	str	r1, [r6, #0]
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	b016      	add	sp, #88	@ 0x58
 8007160:	bd70      	pop	{r4, r5, r6, pc}
 8007162:	466a      	mov	r2, sp
 8007164:	f000 f848 	bl	80071f8 <_fstat_r>
 8007168:	2800      	cmp	r0, #0
 800716a:	dbec      	blt.n	8007146 <__swhatbuf_r+0x12>
 800716c:	9901      	ldr	r1, [sp, #4]
 800716e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007176:	4259      	negs	r1, r3
 8007178:	4159      	adcs	r1, r3
 800717a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800717e:	e7eb      	b.n	8007158 <__swhatbuf_r+0x24>

08007180 <__smakebuf_r>:
 8007180:	898b      	ldrh	r3, [r1, #12]
 8007182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007184:	079d      	lsls	r5, r3, #30
 8007186:	4606      	mov	r6, r0
 8007188:	460c      	mov	r4, r1
 800718a:	d507      	bpl.n	800719c <__smakebuf_r+0x1c>
 800718c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	2301      	movs	r3, #1
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	b003      	add	sp, #12
 800719a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719c:	ab01      	add	r3, sp, #4
 800719e:	466a      	mov	r2, sp
 80071a0:	f7ff ffc8 	bl	8007134 <__swhatbuf_r>
 80071a4:	9f00      	ldr	r7, [sp, #0]
 80071a6:	4605      	mov	r5, r0
 80071a8:	4639      	mov	r1, r7
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff fbba 	bl	8006924 <_malloc_r>
 80071b0:	b948      	cbnz	r0, 80071c6 <__smakebuf_r+0x46>
 80071b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b6:	059a      	lsls	r2, r3, #22
 80071b8:	d4ee      	bmi.n	8007198 <__smakebuf_r+0x18>
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	f043 0302 	orr.w	r3, r3, #2
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	e7e2      	b.n	800718c <__smakebuf_r+0xc>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	6020      	str	r0, [r4, #0]
 80071ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071d6:	b15b      	cbz	r3, 80071f0 <__smakebuf_r+0x70>
 80071d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071dc:	4630      	mov	r0, r6
 80071de:	f000 f81d 	bl	800721c <_isatty_r>
 80071e2:	b128      	cbz	r0, 80071f0 <__smakebuf_r+0x70>
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	81a3      	strh	r3, [r4, #12]
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	431d      	orrs	r5, r3
 80071f4:	81a5      	strh	r5, [r4, #12]
 80071f6:	e7cf      	b.n	8007198 <__smakebuf_r+0x18>

080071f8 <_fstat_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	@ (8007218 <_fstat_r+0x20>)
 80071fc:	2300      	movs	r3, #0
 80071fe:	4604      	mov	r4, r0
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	f7fb fbf7 	bl	80029f8 <_fstat>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d102      	bne.n	8007214 <_fstat_r+0x1c>
 800720e:	682b      	ldr	r3, [r5, #0]
 8007210:	b103      	cbz	r3, 8007214 <_fstat_r+0x1c>
 8007212:	6023      	str	r3, [r4, #0]
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	bf00      	nop
 8007218:	20025d20 	.word	0x20025d20

0800721c <_isatty_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d06      	ldr	r5, [pc, #24]	@ (8007238 <_isatty_r+0x1c>)
 8007220:	2300      	movs	r3, #0
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	f7fb fbf6 	bl	8002a18 <_isatty>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_isatty_r+0x1a>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_isatty_r+0x1a>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20025d20 	.word	0x20025d20

0800723c <_sbrk_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d06      	ldr	r5, [pc, #24]	@ (8007258 <_sbrk_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	f7fb fbfe 	bl	8002a48 <_sbrk>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_sbrk_r+0x1a>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_sbrk_r+0x1a>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20025d20 	.word	0x20025d20

0800725c <_init>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	bf00      	nop
 8007260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007262:	bc08      	pop	{r3}
 8007264:	469e      	mov	lr, r3
 8007266:	4770      	bx	lr

08007268 <_fini>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	bf00      	nop
 800726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800726e:	bc08      	pop	{r3}
 8007270:	469e      	mov	lr, r3
 8007272:	4770      	bx	lr
