
EEdwardsFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001248  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008724  08008724  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  08008724  08008724  00009724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800872c  0800872c  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800872c  0800872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08008734  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025ce4  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d5c  20025d5c  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001373d  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003122  00000000  00000000  0001d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00020908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5b  00000000  00000000  00021ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270ee  00000000  00000000  00022c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186aa  00000000  00000000  00049d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f8c  00000000  00000000  000623d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014535f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a6c  00000000  00000000  001453a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014ae10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080074c4 	.word	0x080074c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080074c4 	.word	0x080074c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
static uint8_t game_board[6][7] = {0};



void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fb20 	bl	8002bc8 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fbfc 	bl	8000d84 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fbb9 	bl	8000d04 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fd12 	bl	8000fc0 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fe94 	bl	80012c8 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <ApplicationInit+0x2c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000094 	.word	0x20000094

080005b0 <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	visualDemo();
 80005b4:	f000 fdd6 	bl	8001164 <visualDemo>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_Touch_Polling_Demo>:

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_Touch_Polling_Demo(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 80005c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fcfb 	bl	8000fc0 <LCD_Clear>
	while (1) {
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 80005ca:	4827      	ldr	r0, [pc, #156]	@ (8000668 <LCD_Touch_Polling_Demo+0xac>)
 80005cc:	f000 fe87 	bl	80012de <returnTouchStateAndLocation>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d117      	bne.n	8000606 <LCD_Touch_Polling_Demo+0x4a>
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005d6:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <LCD_Touch_Polling_Demo+0xac>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <LCD_Touch_Polling_Demo+0xac>)
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4822      	ldr	r0, [pc, #136]	@ (800066c <LCD_Touch_Polling_Demo+0xb0>)
 80005e4:	f006 f8a2 	bl	800672c <iprintf>
			LCD_Clear(0, LCD_COLOR_WHITE);
 80005e8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fce7 	bl	8000fc0 <LCD_Clear>

			if(StaticTouchData.x < LCD_PIXEL_WIDTH/2){
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <LCD_Touch_Polling_Demo+0xac>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2b77      	cmp	r3, #119	@ 0x77
 80005f8:	d802      	bhi.n	8000600 <LCD_Touch_Polling_Demo+0x44>
				LCD_Gameplay();
 80005fa:	f000 f83d 	bl	8000678 <LCD_Gameplay>
 80005fe:	e7e4      	b.n	80005ca <LCD_Touch_Polling_Demo+0xe>
				//LCD_SetTextColor(LCD_COLOR_BLUE);
				//LCD_SetFont(&Font16x24);
				//LCD_DisplayChar(110,140,'1');

			} else {
				LCD_Visual_Demo();
 8000600:	f7ff ffd6 	bl	80005b0 <LCD_Visual_Demo>
 8000604:	e7e1      	b.n	80005ca <LCD_Touch_Polling_Demo+0xe>
				//LCD_DisplayChar(110,140,'2');

			}
		}else {
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 8000606:	481a      	ldr	r0, [pc, #104]	@ (8000670 <LCD_Touch_Polling_Demo+0xb4>)
 8000608:	f006 f8f8 	bl	80067fc <puts>
			LCD_Clear(0, LCD_COLOR_WHITE);
 800060c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000610:	2000      	movs	r0, #0
 8000612:	f000 fcd5 	bl	8000fc0 <LCD_Clear>
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fcf4 	bl	8001004 <LCD_SetTextColor>
			LCD_SetFont(&Font16x24);
 800061c:	4815      	ldr	r0, [pc, #84]	@ (8000674 <LCD_Touch_Polling_Demo+0xb8>)
 800061e:	f000 fd01 	bl	8001024 <LCD_SetFont>
			LCD_DisplayChar(50,140,'P');
 8000622:	2250      	movs	r2, #80	@ 0x50
 8000624:	218c      	movs	r1, #140	@ 0x8c
 8000626:	2032      	movs	r0, #50	@ 0x32
 8000628:	f000 fd7a 	bl	8001120 <LCD_DisplayChar>
			LCD_DisplayChar(60,140,'1');
 800062c:	2231      	movs	r2, #49	@ 0x31
 800062e:	218c      	movs	r1, #140	@ 0x8c
 8000630:	203c      	movs	r0, #60	@ 0x3c
 8000632:	f000 fd75 	bl	8001120 <LCD_DisplayChar>
			LCD_DisplayChar(180,140,'P');
 8000636:	2250      	movs	r2, #80	@ 0x50
 8000638:	218c      	movs	r1, #140	@ 0x8c
 800063a:	20b4      	movs	r0, #180	@ 0xb4
 800063c:	f000 fd70 	bl	8001120 <LCD_DisplayChar>
			LCD_DisplayChar(190,140,'2');
 8000640:	2232      	movs	r2, #50	@ 0x32
 8000642:	218c      	movs	r1, #140	@ 0x8c
 8000644:	20be      	movs	r0, #190	@ 0xbe
 8000646:	f000 fd6b 	bl	8001120 <LCD_DisplayChar>
			LCD_Draw_Circle_Fill(185,140,20,LCD_COLOR_GREY);
 800064a:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 800064e:	2214      	movs	r2, #20
 8000650:	218c      	movs	r1, #140	@ 0x8c
 8000652:	20b9      	movs	r0, #185	@ 0xb9
 8000654:	f000 fc12 	bl	8000e7c <LCD_Draw_Circle_Fill>
			LCD_Draw_Circle_Fill(55,140,20,LCD_COLOR_BLUE);
 8000658:	231f      	movs	r3, #31
 800065a:	2214      	movs	r2, #20
 800065c:	218c      	movs	r1, #140	@ 0x8c
 800065e:	2037      	movs	r0, #55	@ 0x37
 8000660:	f000 fc0c 	bl	8000e7c <LCD_Draw_Circle_Fill>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000664:	e7b1      	b.n	80005ca <LCD_Touch_Polling_Demo+0xe>
 8000666:	bf00      	nop
 8000668:	20000094 	.word	0x20000094
 800066c:	080074dc 	.word	0x080074dc
 8000670:	080074f0 	.word	0x080074f0
 8000674:	20000004 	.word	0x20000004

08000678 <LCD_Gameplay>:
}
#endif // COMPILE_TOUCH_FUNCTIONS


void LCD_Gameplay(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	/****************** Gameboard Visuals *******************/
	LCD_Clear(0, LCD_COLOR_WHITE);
 800067c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fc9d 	bl	8000fc0 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLUE);
 8000686:	201f      	movs	r0, #31
 8000688:	f000 fcbc 	bl	8001004 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800068c:	483a      	ldr	r0, [pc, #232]	@ (8000778 <LCD_Gameplay+0x100>)
 800068e:	f000 fcc9 	bl	8001024 <LCD_SetFont>

	LCD_Draw_Vertical_Line(205,45,270,LCD_COLOR_BLACK);
 8000692:	2300      	movs	r3, #0
 8000694:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8000698:	212d      	movs	r1, #45	@ 0x2d
 800069a:	20cd      	movs	r0, #205	@ 0xcd
 800069c:	f000 fc41 	bl	8000f22 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(170,45,270,LCD_COLOR_BLACK);
 80006a0:	2300      	movs	r3, #0
 80006a2:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006a6:	212d      	movs	r1, #45	@ 0x2d
 80006a8:	20aa      	movs	r0, #170	@ 0xaa
 80006aa:	f000 fc3a 	bl	8000f22 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(135,45,270,LCD_COLOR_BLACK);
 80006ae:	2300      	movs	r3, #0
 80006b0:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006b4:	212d      	movs	r1, #45	@ 0x2d
 80006b6:	2087      	movs	r0, #135	@ 0x87
 80006b8:	f000 fc33 	bl	8000f22 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(100,45,270,LCD_COLOR_BLACK);
 80006bc:	2300      	movs	r3, #0
 80006be:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006c2:	212d      	movs	r1, #45	@ 0x2d
 80006c4:	2064      	movs	r0, #100	@ 0x64
 80006c6:	f000 fc2c 	bl	8000f22 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(65,45,270,LCD_COLOR_BLACK);
 80006ca:	2300      	movs	r3, #0
 80006cc:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006d0:	212d      	movs	r1, #45	@ 0x2d
 80006d2:	2041      	movs	r0, #65	@ 0x41
 80006d4:	f000 fc25 	bl	8000f22 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(33,45,270,LCD_COLOR_BLACK);
 80006d8:	2300      	movs	r3, #0
 80006da:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006de:	212d      	movs	r1, #45	@ 0x2d
 80006e0:	2021      	movs	r0, #33	@ 0x21
 80006e2:	f000 fc1e 	bl	8000f22 <LCD_Draw_Vertical_Line>

	LCD_Draw_Horizontal_Line(200,45,200,LCD_COLOR_BLACK);
 80006e6:	2300      	movs	r3, #0
 80006e8:	22c8      	movs	r2, #200	@ 0xc8
 80006ea:	212d      	movs	r1, #45	@ 0x2d
 80006ec:	20c8      	movs	r0, #200	@ 0xc8
 80006ee:	f000 fc3f 	bl	8000f70 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,95,200,LCD_COLOR_BLACK);
 80006f2:	2300      	movs	r3, #0
 80006f4:	22c8      	movs	r2, #200	@ 0xc8
 80006f6:	215f      	movs	r1, #95	@ 0x5f
 80006f8:	20c8      	movs	r0, #200	@ 0xc8
 80006fa:	f000 fc39 	bl	8000f70 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,140,200,LCD_COLOR_BLACK);
 80006fe:	2300      	movs	r3, #0
 8000700:	22c8      	movs	r2, #200	@ 0xc8
 8000702:	218c      	movs	r1, #140	@ 0x8c
 8000704:	20c8      	movs	r0, #200	@ 0xc8
 8000706:	f000 fc33 	bl	8000f70 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,185,200,LCD_COLOR_BLACK);
 800070a:	2300      	movs	r3, #0
 800070c:	22c8      	movs	r2, #200	@ 0xc8
 800070e:	21b9      	movs	r1, #185	@ 0xb9
 8000710:	20c8      	movs	r0, #200	@ 0xc8
 8000712:	f000 fc2d 	bl	8000f70 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,230,200,LCD_COLOR_BLACK);
 8000716:	2300      	movs	r3, #0
 8000718:	22c8      	movs	r2, #200	@ 0xc8
 800071a:	21e6      	movs	r1, #230	@ 0xe6
 800071c:	20c8      	movs	r0, #200	@ 0xc8
 800071e:	f000 fc27 	bl	8000f70 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,273,200,LCD_COLOR_BLACK);
 8000722:	2300      	movs	r3, #0
 8000724:	22c8      	movs	r2, #200	@ 0xc8
 8000726:	f240 1111 	movw	r1, #273	@ 0x111
 800072a:	20c8      	movs	r0, #200	@ 0xc8
 800072c:	f000 fc20 	bl	8000f70 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(200,315,200,LCD_COLOR_BLACK);
 8000730:	2300      	movs	r3, #0
 8000732:	22c8      	movs	r2, #200	@ 0xc8
 8000734:	f240 113b 	movw	r1, #315	@ 0x13b
 8000738:	20c8      	movs	r0, #200	@ 0xc8
 800073a:	f000 fc19 	bl	8000f70 <LCD_Draw_Horizontal_Line>
	/**************************** Gameplay ******************************/
	while(1) // set macro
	{
		//uint8_t game_board[6][7] = {0}; // Initialize game board to empty
		//uint8_t player1_turn = 1;
		if(PlayerOneChoice == 1)
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <LCD_Gameplay+0x104>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d10f      	bne.n	8000766 <LCD_Gameplay+0xee>
		{
			LCD_PieceMovement();
 8000746:	f000 f95f 	bl	8000a08 <LCD_PieceMovement>
			// Store value in matrix
			// Create function for matrix manipulation cases
			InterruptPress = 0; // Reset
 800074a:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <LCD_Gameplay+0x108>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
			PLAYER_PiecePlacement(current_position);
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <LCD_Gameplay+0x10c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800075c:	eeb0 0a67 	vmov.f32	s0, s15
 8000760:	f000 f812 	bl	8000788 <PLAYER_PiecePlacement>
 8000764:	e7eb      	b.n	800073e <LCD_Gameplay+0xc6>

		}
		else
		{
			//Random Generator
			HAL_Delay(1000);
 8000766:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800076a:	f002 fb85 	bl	8002e78 <HAL_Delay>
			PlayerOneChoice = 1;
 800076e:	4b03      	ldr	r3, [pc, #12]	@ (800077c <LCD_Gameplay+0x104>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
		if(PlayerOneChoice == 1)
 8000774:	e7e3      	b.n	800073e <LCD_Gameplay+0xc6>
 8000776:	bf00      	nop
 8000778:	20000004 	.word	0x20000004
 800077c:	20000000 	.word	0x20000000
 8000780:	2000009c 	.word	0x2000009c
 8000784:	20000001 	.word	0x20000001

08000788 <PLAYER_PiecePlacement>:

    }


void PLAYER_PiecePlacement(float vert_column)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	ed87 0a01 	vstr	s0, [r7, #4]

	if(vert_column >= (COLUMN_ONE - 0.5) && vert_column < (COLUMN_ONE + 0.5))
 8000792:	edd7 7a01 	vldr	s15, [r7, #4]
 8000796:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 800079a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800079e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a2:	db0d      	blt.n	80007c0 <PLAYER_PiecePlacement+0x38>
 80007a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a8:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 80007ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b4:	d504      	bpl.n	80007c0 <PLAYER_PiecePlacement+0x38>
	{
		GAME_MatrixHandling(COLUMN1, PLAYER_ONE_TOKEN);
 80007b6:	2101      	movs	r1, #1
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 f8a9 	bl	8000910 <GAME_MatrixHandling>
 80007be:	e08b      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_TWO - 0.5) && vert_column < (COLUMN_TWO + 0.5))
 80007c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80007c4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80008e0 <PLAYER_PiecePlacement+0x158>
 80007c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d0:	db0d      	blt.n	80007ee <PLAYER_PiecePlacement+0x66>
 80007d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007d6:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80008e4 <PLAYER_PiecePlacement+0x15c>
 80007da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e2:	d504      	bpl.n	80007ee <PLAYER_PiecePlacement+0x66>
	{
		GAME_MatrixHandling(COLUMN2, PLAYER_ONE_TOKEN);
 80007e4:	2101      	movs	r1, #1
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 f892 	bl	8000910 <GAME_MatrixHandling>
 80007ec:	e074      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_THREE - 0.5) && vert_column < (COLUMN_THREE + 0.5))
 80007ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80007f2:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80008e8 <PLAYER_PiecePlacement+0x160>
 80007f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fe:	db0d      	blt.n	800081c <PLAYER_PiecePlacement+0x94>
 8000800:	edd7 7a01 	vldr	s15, [r7, #4]
 8000804:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80008ec <PLAYER_PiecePlacement+0x164>
 8000808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800080c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000810:	d504      	bpl.n	800081c <PLAYER_PiecePlacement+0x94>
	{
		GAME_MatrixHandling(COLUMN3, PLAYER_ONE_TOKEN);
 8000812:	2101      	movs	r1, #1
 8000814:	2002      	movs	r0, #2
 8000816:	f000 f87b 	bl	8000910 <GAME_MatrixHandling>
 800081a:	e05d      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_FOUR - 0.5) && vert_column < (COLUMN_FOUR + 0.5))
 800081c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000820:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80008f0 <PLAYER_PiecePlacement+0x168>
 8000824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082c:	db0d      	blt.n	800084a <PLAYER_PiecePlacement+0xc2>
 800082e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000832:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80008f4 <PLAYER_PiecePlacement+0x16c>
 8000836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d504      	bpl.n	800084a <PLAYER_PiecePlacement+0xc2>
	{
		GAME_MatrixHandling(COLUMN4, PLAYER_ONE_TOKEN);
 8000840:	2101      	movs	r1, #1
 8000842:	2003      	movs	r0, #3
 8000844:	f000 f864 	bl	8000910 <GAME_MatrixHandling>
 8000848:	e046      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_FIVE - 0.5) && vert_column < (COLUMN_FIVE + 0.5))
 800084a:	edd7 7a01 	vldr	s15, [r7, #4]
 800084e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80008f8 <PLAYER_PiecePlacement+0x170>
 8000852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085a:	db0d      	blt.n	8000878 <PLAYER_PiecePlacement+0xf0>
 800085c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000860:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80008fc <PLAYER_PiecePlacement+0x174>
 8000864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086c:	d504      	bpl.n	8000878 <PLAYER_PiecePlacement+0xf0>
	{
		GAME_MatrixHandling(COLUMN5, PLAYER_ONE_TOKEN);
 800086e:	2101      	movs	r1, #1
 8000870:	2004      	movs	r0, #4
 8000872:	f000 f84d 	bl	8000910 <GAME_MatrixHandling>
 8000876:	e02f      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_SIX - 0.5) && vert_column < (COLUMN_SIX + 0.5))
 8000878:	edd7 7a01 	vldr	s15, [r7, #4]
 800087c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000900 <PLAYER_PiecePlacement+0x178>
 8000880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000888:	db0d      	blt.n	80008a6 <PLAYER_PiecePlacement+0x11e>
 800088a:	edd7 7a01 	vldr	s15, [r7, #4]
 800088e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000904 <PLAYER_PiecePlacement+0x17c>
 8000892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089a:	d504      	bpl.n	80008a6 <PLAYER_PiecePlacement+0x11e>
	{
		GAME_MatrixHandling(COLUMN6, PLAYER_ONE_TOKEN);
 800089c:	2101      	movs	r1, #1
 800089e:	2005      	movs	r0, #5
 80008a0:	f000 f836 	bl	8000910 <GAME_MatrixHandling>
 80008a4:	e018      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_SEVEN - 0.5) && vert_column < (COLUMN_SEVEN + 0.5))
 80008a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80008aa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000908 <PLAYER_PiecePlacement+0x180>
 80008ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b6:	da00      	bge.n	80008ba <PLAYER_PiecePlacement+0x132>
	{
		GAME_MatrixHandling(COLUMN7, PLAYER_ONE_TOKEN);
	}
}
 80008b8:	e00e      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
	else if(vert_column >= (COLUMN_SEVEN - 0.5) && vert_column < (COLUMN_SEVEN + 0.5))
 80008ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80008be:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800090c <PLAYER_PiecePlacement+0x184>
 80008c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ca:	d400      	bmi.n	80008ce <PLAYER_PiecePlacement+0x146>
}
 80008cc:	e004      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
		GAME_MatrixHandling(COLUMN7, PLAYER_ONE_TOKEN);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2006      	movs	r0, #6
 80008d2:	f000 f81d 	bl	8000910 <GAME_MatrixHandling>
}
 80008d6:	e7ff      	b.n	80008d8 <PLAYER_PiecePlacement+0x150>
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	423c0000 	.word	0x423c0000
 80008e4:	42400000 	.word	0x42400000
 80008e8:	42a40000 	.word	0x42a40000
 80008ec:	42a60000 	.word	0x42a60000
 80008f0:	42ea0000 	.word	0x42ea0000
 80008f4:	42ec0000 	.word	0x42ec0000
 80008f8:	43180000 	.word	0x43180000
 80008fc:	43190000 	.word	0x43190000
 8000900:	433b0000 	.word	0x433b0000
 8000904:	433c0000 	.word	0x433c0000
 8000908:	435e0000 	.word	0x435e0000
 800090c:	435f0000 	.word	0x435f0000

08000910 <GAME_MatrixHandling>:


void GAME_MatrixHandling(uint8_t column_num, uint8_t player_token)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	460a      	mov	r2, r1
 800091a:	71fb      	strb	r3, [r7, #7]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]

	for(uint8_t row_num = 0; row_num <= 7; row_num++)
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
 8000924:	e063      	b.n	80009ee <GAME_MatrixHandling+0xde>
	{
		if(game_board[row_num][column_num] == 0)
 8000926:	7bfa      	ldrb	r2, [r7, #15]
 8000928:	79f9      	ldrb	r1, [r7, #7]
 800092a:	4835      	ldr	r0, [pc, #212]	@ (8000a00 <GAME_MatrixHandling+0xf0>)
 800092c:	4613      	mov	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	4403      	add	r3, r0
 8000934:	440b      	add	r3, r1
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d153      	bne.n	80009e4 <GAME_MatrixHandling+0xd4>
		{
			game_board[row_num][column_num] = player_token;
 800093c:	7bfa      	ldrb	r2, [r7, #15]
 800093e:	79f9      	ldrb	r1, [r7, #7]
 8000940:	482f      	ldr	r0, [pc, #188]	@ (8000a00 <GAME_MatrixHandling+0xf0>)
 8000942:	4613      	mov	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	4403      	add	r3, r0
 800094a:	440b      	add	r3, r1
 800094c:	79ba      	ldrb	r2, [r7, #6]
 800094e:	701a      	strb	r2, [r3, #0]
				switch(row_num)
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b05      	cmp	r3, #5
 8000954:	d84f      	bhi.n	80009f6 <GAME_MatrixHandling+0xe6>
 8000956:	a201      	add	r2, pc, #4	@ (adr r2, 800095c <GAME_MatrixHandling+0x4c>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	08000975 	.word	0x08000975
 8000960:	08000989 	.word	0x08000989
 8000964:	0800099b 	.word	0x0800099b
 8000968:	080009ad 	.word	0x080009ad
 800096c:	080009bf 	.word	0x080009bf
 8000970:	080009d1 	.word	0x080009d1
				{
				case ROW1:
					LCD_Draw_Circle_Fill(current_position,ROW_ZERO,12,LCD_COLOR_BLUE);
 8000974:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <GAME_MatrixHandling+0xf4>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	231f      	movs	r3, #31
 800097c:	220c      	movs	r2, #12
 800097e:	f240 1127 	movw	r1, #295	@ 0x127
 8000982:	f000 fa7b 	bl	8000e7c <LCD_Draw_Circle_Fill>
				break;
 8000986:	e02c      	b.n	80009e2 <GAME_MatrixHandling+0xd2>

				case ROW2:
					LCD_Draw_Circle_Fill(current_position,ROW_ONE,12,LCD_COLOR_BLUE);
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <GAME_MatrixHandling+0xf4>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	231f      	movs	r3, #31
 8000990:	220c      	movs	r2, #12
 8000992:	21fa      	movs	r1, #250	@ 0xfa
 8000994:	f000 fa72 	bl	8000e7c <LCD_Draw_Circle_Fill>
				break;
 8000998:	e023      	b.n	80009e2 <GAME_MatrixHandling+0xd2>

				case ROW3:
					LCD_Draw_Circle_Fill(current_position,ROW_TWO,12,LCD_COLOR_BLUE);
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <GAME_MatrixHandling+0xf4>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	231f      	movs	r3, #31
 80009a2:	220c      	movs	r2, #12
 80009a4:	21d2      	movs	r1, #210	@ 0xd2
 80009a6:	f000 fa69 	bl	8000e7c <LCD_Draw_Circle_Fill>
				break;
 80009aa:	e01a      	b.n	80009e2 <GAME_MatrixHandling+0xd2>

				case ROW4:
					LCD_Draw_Circle_Fill(current_position,ROW_THREE,12,LCD_COLOR_BLUE);
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <GAME_MatrixHandling+0xf4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	231f      	movs	r3, #31
 80009b4:	220c      	movs	r2, #12
 80009b6:	21a0      	movs	r1, #160	@ 0xa0
 80009b8:	f000 fa60 	bl	8000e7c <LCD_Draw_Circle_Fill>
				break;
 80009bc:	e011      	b.n	80009e2 <GAME_MatrixHandling+0xd2>

				case ROW5:
					LCD_Draw_Circle_Fill(current_position,ROW_FOUR,12,LCD_COLOR_BLUE);
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <GAME_MatrixHandling+0xf4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	231f      	movs	r3, #31
 80009c6:	220c      	movs	r2, #12
 80009c8:	2178      	movs	r1, #120	@ 0x78
 80009ca:	f000 fa57 	bl	8000e7c <LCD_Draw_Circle_Fill>
				break;
 80009ce:	e008      	b.n	80009e2 <GAME_MatrixHandling+0xd2>

				case ROW6:
					LCD_Draw_Circle_Fill(current_position,ROW_FIVE,12,LCD_COLOR_BLUE);
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <GAME_MatrixHandling+0xf4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	231f      	movs	r3, #31
 80009d8:	220c      	movs	r2, #12
 80009da:	2146      	movs	r1, #70	@ 0x46
 80009dc:	f000 fa4e 	bl	8000e7c <LCD_Draw_Circle_Fill>
				break;
 80009e0:	bf00      	nop
				}

			break; // get out of loop
 80009e2:	e008      	b.n	80009f6 <GAME_MatrixHandling+0xe6>
		}
		LCD_PieceMovement();
 80009e4:	f000 f810 	bl	8000a08 <LCD_PieceMovement>
	for(uint8_t row_num = 0; row_num <= 7; row_num++)
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	d998      	bls.n	8000926 <GAME_MatrixHandling+0x16>
	}

}
 80009f4:	e000      	b.n	80009f8 <GAME_MatrixHandling+0xe8>
			break; // get out of loop
 80009f6:	bf00      	nop
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000a0 	.word	0x200000a0
 8000a04:	20000001 	.word	0x20000001

08000a08 <LCD_PieceMovement>:




void LCD_PieceMovement(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	//uint8_t initial_position = COLUMN_FOUR;
	//uint8_t current_position = initial_position;
	//uint8_t new_position = 0;
	//uint8_t previous_position =0;

	while(PlayerOneChoice)
 8000a0c:	e053      	b.n	8000ab6 <LCD_PieceMovement+0xae>
	{


	  if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 8000a0e:	482d      	ldr	r0, [pc, #180]	@ (8000ac4 <LCD_PieceMovement+0xbc>)
 8000a10:	f000 fc65 	bl	80012de <returnTouchStateAndLocation>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d146      	bne.n	8000aa8 <LCD_PieceMovement+0xa0>
	  {
		/* Touch valid */
		printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <LCD_PieceMovement+0xbc>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <LCD_PieceMovement+0xbc>)
 8000a22:	885b      	ldrh	r3, [r3, #2]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4828      	ldr	r0, [pc, #160]	@ (8000ac8 <LCD_PieceMovement+0xc0>)
 8000a28:	f005 fe80 	bl	800672c <iprintf>
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2)
 8000a2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <LCD_PieceMovement+0xbc>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	2b77      	cmp	r3, #119	@ 0x77
 8000a32:	d812      	bhi.n	8000a5a <LCD_PieceMovement+0x52>
		{
			if(current_position > COLUMN_ONE)
 8000a34:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b0c      	cmp	r3, #12
 8000a3a:	d920      	bls.n	8000a7e <LCD_PieceMovement+0x76>
			{
				previous_position = current_position;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a3e:	781a      	ldrb	r2, [r3, #0]
 8000a40:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <LCD_PieceMovement+0xc8>)
 8000a42:	701a      	strb	r2, [r3, #0]
				new_position = current_position - 35;
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	3b23      	subs	r3, #35	@ 0x23
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <LCD_PieceMovement+0xcc>)
 8000a4e:	701a      	strb	r2, [r3, #0]
				current_position = new_position;
 8000a50:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <LCD_PieceMovement+0xcc>)
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e011      	b.n	8000a7e <LCD_PieceMovement+0x76>
			}
		}
		else
		{
			if(current_position < COLUMN_SIX)
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2bbb      	cmp	r3, #187	@ 0xbb
 8000a60:	d80d      	bhi.n	8000a7e <LCD_PieceMovement+0x76>
			{
				previous_position = current_position;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <LCD_PieceMovement+0xc8>)
 8000a68:	701a      	strb	r2, [r3, #0]
				new_position = current_position + 35;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3323      	adds	r3, #35	@ 0x23
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <LCD_PieceMovement+0xcc>)
 8000a74:	701a      	strb	r2, [r3, #0]
				current_position = new_position;
 8000a76:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <LCD_PieceMovement+0xcc>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a7c:	701a      	strb	r2, [r3, #0]
			}
		}
		LCD_Draw_Circle_Fill(previous_position,ROW_SIX,12,LCD_COLOR_WHITE);
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <LCD_PieceMovement+0xc8>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a88:	220c      	movs	r2, #12
 8000a8a:	2119      	movs	r1, #25
 8000a8c:	f000 f9f6 	bl	8000e7c <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(current_position,ROW_SIX,12,LCD_COLOR_BLUE);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <LCD_PieceMovement+0xc4>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	231f      	movs	r3, #31
 8000a98:	220c      	movs	r2, #12
 8000a9a:	2119      	movs	r1, #25
 8000a9c:	f000 f9ee 	bl	8000e7c <LCD_Draw_Circle_Fill>
		HAL_Delay(300);
 8000aa0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000aa4:	f002 f9e8 	bl	8002e78 <HAL_Delay>
	  }
	  else
	  {
		  // keep waiting for button push or piece movement
	  }
	  if(InterruptPress == 1)
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <LCD_PieceMovement+0xd0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d102      	bne.n	8000ab6 <LCD_PieceMovement+0xae>
	  {
		  PlayerOneChoice = 0;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <LCD_PieceMovement+0xd4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	while(PlayerOneChoice)
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <LCD_PieceMovement+0xd4>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1a7      	bne.n	8000a0e <LCD_PieceMovement+0x6>
	  }
	}


}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000094 	.word	0x20000094
 8000ac8:	080074dc 	.word	0x080074dc
 8000acc:	20000001 	.word	0x20000001
 8000ad0:	2000009e 	.word	0x2000009e
 8000ad4:	2000009d 	.word	0x2000009d
 8000ad8:	2000009c 	.word	0x2000009c
 8000adc:	20000000 	.word	0x20000000

08000ae0 <EXTI0_IRQHandler>:



// Button interrupt
void EXTI0_IRQHandler()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f002 fdcf 	bl	8003688 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
	InterruptPress = 1;
 8000aea:	4b02      	ldr	r3, [pc, #8]	@ (8000af4 <EXTI0_IRQHandler+0x14>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
	//__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI0_IRQn);
	//HAL_NVIC_EnableIRQ(EXTI0_IRQn);

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000009c 	.word	0x2000009c

08000af8 <InitButtonInterrupts>:
		return false;
	}
}*/

void InitButtonInterrupts()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef      Config;
		Config.Mode =         GPIO_MODE_IT_RISING;
 8000afe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b02:	60bb      	str	r3, [r7, #8]
		Config.Speed =        GPIO_SPEED_FREQ_MEDIUM;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
		Config.Pull =         GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
		Config.Pin =          BUTTON_PIN_NUM;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <InitButtonInterrupts+0x6c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <InitButtonInterrupts+0x6c>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <InitButtonInterrupts+0x6c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]
		HAL_GPIO_Init(GPIOA, &Config);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <InitButtonInterrupts+0x70>)
 8000b32:	f002 fad7 	bl	80030e4 <HAL_GPIO_Init>

		SYSCFG->EXTICR[0] |= (0x0 << (4 * BUTTON_PIN_NUM));
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <InitButtonInterrupts+0x74>)
 8000b38:	4a0c      	ldr	r2, [pc, #48]	@ (8000b6c <InitButtonInterrupts+0x74>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	6093      	str	r3, [r2, #8]
		EXTI->IMR |= (1 << BUTTON_PIN_NUM);
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <InitButtonInterrupts+0x78>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <InitButtonInterrupts+0x78>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6013      	str	r3, [r2, #0]
		EXTI->RTSR |= (1 << BUTTON_PIN_NUM);
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <InitButtonInterrupts+0x78>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <InitButtonInterrupts+0x78>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6093      	str	r3, [r2, #8]

		//HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b56:	2006      	movs	r0, #6
 8000b58:	f002 faa9 	bl	80030ae <HAL_NVIC_EnableIRQ>
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40013800 	.word	0x40013800
 8000b70:	40013c00 	.word	0x40013c00

08000b74 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	@ 0x30
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	4a59      	ldr	r2, [pc, #356]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000b84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8a:	4b57      	ldr	r3, [pc, #348]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	4b53      	ldr	r3, [pc, #332]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a52      	ldr	r2, [pc, #328]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b50      	ldr	r3, [pc, #320]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a4b      	ldr	r2, [pc, #300]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b49      	ldr	r3, [pc, #292]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b45      	ldr	r3, [pc, #276]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a44      	ldr	r2, [pc, #272]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b42      	ldr	r3, [pc, #264]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a36      	ldr	r2, [pc, #216]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000c10:	f043 0320 	orr.w	r3, r3, #32
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b34      	ldr	r3, [pc, #208]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0320 	and.w	r3, r3, #32
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b30      	ldr	r3, [pc, #192]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce8 <LCD_GPIO_Init+0x174>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000c3e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000c42:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000c50:	230e      	movs	r3, #14
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4824      	ldr	r0, [pc, #144]	@ (8000cec <LCD_GPIO_Init+0x178>)
 8000c5c:	f002 fa42 	bl	80030e4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000c60:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000c64:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4820      	ldr	r0, [pc, #128]	@ (8000cf0 <LCD_GPIO_Init+0x17c>)
 8000c6e:	f002 fa39 	bl	80030e4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000c72:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481d      	ldr	r0, [pc, #116]	@ (8000cf4 <LCD_GPIO_Init+0x180>)
 8000c80:	f002 fa30 	bl	80030e4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000c84:	2348      	movs	r3, #72	@ 0x48
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481a      	ldr	r0, [pc, #104]	@ (8000cf8 <LCD_GPIO_Init+0x184>)
 8000c90:	f002 fa28 	bl	80030e4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4816      	ldr	r0, [pc, #88]	@ (8000cfc <LCD_GPIO_Init+0x188>)
 8000ca2:	f002 fa1f 	bl	80030e4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ca6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000caa:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <LCD_GPIO_Init+0x18c>)
 8000cb4:	f002 fa16 	bl	80030e4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000cbc:	2309      	movs	r3, #9
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <LCD_GPIO_Init+0x17c>)
 8000cc8:	f002 fa0c 	bl	80030e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000ccc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4809      	ldr	r0, [pc, #36]	@ (8000d00 <LCD_GPIO_Init+0x18c>)
 8000cda:	f002 fa03 	bl	80030e4 <HAL_GPIO_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	@ 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	40021400 	.word	0x40021400
 8000d00:	40021800 	.word	0x40021800

08000d04 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b090      	sub	sp, #64	@ 0x40
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000d12:	23f0      	movs	r3, #240	@ 0xf0
 8000d14:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000d1a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d1e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000d24:	23ff      	movs	r3, #255	@ 0xff
 8000d26:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d32:	2305      	movs	r3, #5
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <LTCD_Layer_Init+0x78>)
 8000d3e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000d40:	23f0      	movs	r3, #240	@ 0xf0
 8000d42:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000d44:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <LTCD_Layer_Init+0x7c>)
 8000d66:	f003 fe23 	bl	80049b0 <HAL_LTDC_ConfigLayer>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000d70:	f000 faa4 	bl	80012bc <LCD_Error_Handler>
	}
}
 8000d74:	bf00      	nop
 8000d76:	3740      	adds	r7, #64	@ 0x40
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200001a8 	.word	0x200001a8
 8000d80:	200000cc 	.word	0x200000cc

08000d84 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <LTCD__Init+0xb0>)
 8000d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000e38 <LTCD__Init+0xb4>)
 8000d8c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	@ (8000e34 <LTCD__Init+0xb0>)
 8000d90:	2209      	movs	r2, #9
 8000d92:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000d94:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <LTCD__Init+0xb0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <LTCD__Init+0xb0>)
 8000d9c:	221d      	movs	r2, #29
 8000d9e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000da0:	4b24      	ldr	r3, [pc, #144]	@ (8000e34 <LTCD__Init+0xb0>)
 8000da2:	2203      	movs	r2, #3
 8000da4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000da6:	4b23      	ldr	r3, [pc, #140]	@ (8000e34 <LTCD__Init+0xb0>)
 8000da8:	f240 120d 	movw	r2, #269	@ 0x10d
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <LTCD__Init+0xb0>)
 8000db0:	f240 1243 	movw	r2, #323	@ 0x143
 8000db4:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <LTCD__Init+0xb0>)
 8000db8:	f240 1217 	movw	r2, #279	@ 0x117
 8000dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <LTCD__Init+0xb0>)
 8000dc0:	f240 1247 	movw	r2, #327	@ 0x147
 8000dc4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <LTCD__Init+0xb0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <LTCD__Init+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <LTCD__Init+0xb0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <LTCD__Init+0xb8>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000de4:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <LTCD__Init+0xb8>)
 8000de6:	22c0      	movs	r2, #192	@ 0xc0
 8000de8:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <LTCD__Init+0xb8>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <LTCD__Init+0xb8>)
 8000df2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000df8:	4810      	ldr	r0, [pc, #64]	@ (8000e3c <LTCD__Init+0xb8>)
 8000dfa:	f004 fc33 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000e34 <LTCD__Init+0xb0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <LTCD__Init+0xb0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <LTCD__Init+0xb0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <LTCD__Init+0xb0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000e16:	f7ff fead 	bl	8000b74 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e1a:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <LTCD__Init+0xb0>)
 8000e1c:	f003 fcf8 	bl	8004810 <HAL_LTDC_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000e26:	f000 fa49 	bl	80012bc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000e2a:	f000 fa64 	bl	80012f6 <ili9341_Init>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000cc 	.word	0x200000cc
 8000e38:	40016800 	.word	0x40016800
 8000e3c:	20000174 	.word	0x20000174

08000e40 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	80bb      	strh	r3, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000e52:	88ba      	ldrh	r2, [r7, #4]
 8000e54:	4613      	mov	r3, r2
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	1a9b      	subs	r3, r3, r2
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	4413      	add	r3, r2
 8000e62:	4905      	ldr	r1, [pc, #20]	@ (8000e78 <LCD_Draw_Pixel+0x38>)
 8000e64:	887a      	ldrh	r2, [r7, #2]
 8000e66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	200001a8 	.word	0x200001a8

08000e7c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	4611      	mov	r1, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	80fb      	strh	r3, [r7, #6]
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80bb      	strh	r3, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	807b      	strh	r3, [r7, #2]
 8000e96:	4613      	mov	r3, r2
 8000e98:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	81fb      	strh	r3, [r7, #14]
 8000ea2:	e034      	b.n	8000f0e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	81bb      	strh	r3, [r7, #12]
 8000eac:	e024      	b.n	8000ef8 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000eae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eb2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000eb6:	fb03 f202 	mul.w	r2, r3, r2
 8000eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ebe:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	441a      	add	r2, r3
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	8879      	ldrh	r1, [r7, #2]
 8000ecc:	fb01 f303 	mul.w	r3, r1, r3
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dc0b      	bgt.n	8000eec <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000ed4:	89ba      	ldrh	r2, [r7, #12]
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	4413      	add	r3, r2
 8000eda:	b298      	uxth	r0, r3
 8000edc:	89fa      	ldrh	r2, [r7, #14]
 8000ede:	88bb      	ldrh	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff ffaa 	bl	8000e40 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000eec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	81bb      	strh	r3, [r7, #12]
 8000ef8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	ddd5      	ble.n	8000eae <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	81fb      	strh	r3, [r7, #14]
 8000f0e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	ddc5      	ble.n	8000ea4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}

08000f22 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000f22:	b590      	push	{r4, r7, lr}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4604      	mov	r4, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4623      	mov	r3, r4
 8000f32:	80fb      	strh	r3, [r7, #6]
 8000f34:	4603      	mov	r3, r0
 8000f36:	80bb      	strh	r3, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	81fb      	strh	r3, [r7, #14]
 8000f44:	e00b      	b.n	8000f5e <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000f46:	89fa      	ldrh	r2, [r7, #14]
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	883a      	ldrh	r2, [r7, #0]
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff74 	bl	8000e40 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	81fb      	strh	r3, [r7, #14]
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3ef      	bcc.n	8000f46 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	80fb      	strh	r3, [r7, #6]
 8000f82:	4603      	mov	r3, r0
 8000f84:	80bb      	strh	r3, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	81fb      	strh	r3, [r7, #14]
 8000f92:	e00b      	b.n	8000fac <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8000f94:	88fa      	ldrh	r2, [r7, #6]
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	4413      	add	r3, r2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	883a      	ldrh	r2, [r7, #0]
 8000f9e:	88b9      	ldrh	r1, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff4d 	bl	8000e40 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	81fb      	strh	r3, [r7, #14]
 8000fac:	89fa      	ldrh	r2, [r7, #14]
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3ef      	bcc.n	8000f94 <LCD_Draw_Horizontal_Line+0x24>
  }


}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd90      	pop	{r4, r7, pc}
	...

08000fc0 <LCD_Clear>:



void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460a      	mov	r2, r1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10e      	bne.n	8000ff4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e007      	b.n	8000fec <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000fdc:	4908      	ldr	r1, [pc, #32]	@ (8001000 <LCD_Clear+0x40>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	88ba      	ldrh	r2, [r7, #4]
 8000fe2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000ff2:	d3f3      	bcc.n	8000fdc <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	200001a8 	.word	0x200001a8

08001004 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800100e:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <LCD_SetTextColor+0x1c>)
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	8013      	strh	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000002 	.word	0x20000002

08001024 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <LCD_SetFont+0x1c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200001a4 	.word	0x200001a4

08001044 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	603a      	str	r2, [r7, #0]
 800104e:	80fb      	strh	r3, [r7, #6]
 8001050:	460b      	mov	r3, r1
 8001052:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	e04c      	b.n	80010fc <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	e03f      	b.n	80010e8 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4413      	add	r3, r2
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	4619      	mov	r1, r3
 8001074:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <LCD_Draw_Char+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	889b      	ldrh	r3, [r3, #4]
 800107a:	4a27      	ldr	r2, [pc, #156]	@ (8001118 <LCD_Draw_Char+0xd4>)
 800107c:	fba2 2303 	umull	r2, r3, r2, r3
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	b29b      	uxth	r3, r3
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	409a      	lsls	r2, r3
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	fa42 f303 	asr.w	r3, r2, r3
 8001090:	400b      	ands	r3, r1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d104      	bne.n	80010a0 <LCD_Draw_Char+0x5c>
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <LCD_Draw_Char+0xd0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	889b      	ldrh	r3, [r3, #4]
 800109c:	2b0c      	cmp	r3, #12
 800109e:	d920      	bls.n	80010e2 <LCD_Draw_Char+0x9e>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	fa42 f303 	asr.w	r3, r2, r3
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d104      	bne.n	80010c4 <LCD_Draw_Char+0x80>
 80010ba:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <LCD_Draw_Char+0xd0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	2b0c      	cmp	r3, #12
 80010c2:	d80e      	bhi.n	80010e2 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	4413      	add	r3, r2
 80010cc:	b298      	uxth	r0, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	88bb      	ldrh	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4a10      	ldr	r2, [pc, #64]	@ (800111c <LCD_Draw_Char+0xd8>)
 80010da:	8812      	ldrh	r2, [r2, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff feaf 	bl	8000e40 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <LCD_Draw_Char+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	889b      	ldrh	r3, [r3, #4]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d3b8      	bcc.n	8001068 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <LCD_Draw_Char+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	88db      	ldrh	r3, [r3, #6]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4293      	cmp	r3, r2
 8001108:	d3ab      	bcc.n	8001062 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001a4 	.word	0x200001a4
 8001118:	aaaaaaab 	.word	0xaaaaaaab
 800111c:	20000002 	.word	0x20000002

08001120 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
 800112a:	460b      	mov	r3, r1
 800112c:	80bb      	strh	r3, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	3b20      	subs	r3, #32
 8001136:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <LCD_DisplayChar+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <LCD_DisplayChar+0x40>)
 8001142:	6809      	ldr	r1, [r1, #0]
 8001144:	88c9      	ldrh	r1, [r1, #6]
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	441a      	add	r2, r3
 800114e:	88b9      	ldrh	r1, [r7, #4]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff76 	bl	8001044 <LCD_Draw_Char>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001a4 	.word	0x200001a4

08001164 <visualDemo>:

void visualDemo(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	// This for loop just illustrates how with using logic and for loops, you can create interesting things
	// this may or not be useful ;)
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 800116a:	2300      	movs	r3, #0
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	e022      	b.n	80011b6 <visualDemo+0x52>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8001170:	2300      	movs	r3, #0
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	e019      	b.n	80011aa <visualDemo+0x46>
			if (x & 32)
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	2b00      	cmp	r3, #0
 800117e:	d009      	beq.n	8001194 <visualDemo+0x30>
				frameBuffer[x*y] = LCD_COLOR_WHITE;
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	88ba      	ldrh	r2, [r7, #4]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <visualDemo+0x150>)
 800118a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800118e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001192:	e007      	b.n	80011a4 <visualDemo+0x40>
			else
				frameBuffer[x*y] = LCD_COLOR_BLACK;
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	88ba      	ldrh	r2, [r7, #4]
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	4a45      	ldr	r2, [pc, #276]	@ (80012b4 <visualDemo+0x150>)
 800119e:	2100      	movs	r1, #0
 80011a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	3301      	adds	r3, #1
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	2bef      	cmp	r3, #239	@ 0xef
 80011ae:	d9e2      	bls.n	8001176 <visualDemo+0x12>
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	3301      	adds	r3, #1
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	88bb      	ldrh	r3, [r7, #4]
 80011b8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80011bc:	d3d8      	bcc.n	8001170 <visualDemo+0xc>
		}
	}

	HAL_Delay(1500);
 80011be:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80011c2:	f001 fe59 	bl	8002e78 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_GREEN);
 80011c6:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fef8 	bl	8000fc0 <LCD_Clear>
	HAL_Delay(1500);
 80011d0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80011d4:	f001 fe50 	bl	8002e78 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_RED);
 80011d8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff feef 	bl	8000fc0 <LCD_Clear>
	HAL_Delay(1500);
 80011e2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80011e6:	f001 fe47 	bl	8002e78 <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 80011ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fee6 	bl	8000fc0 <LCD_Clear>
	LCD_Draw_Vertical_Line(10,10,250,LCD_COLOR_MAGENTA);
 80011f4:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80011f8:	22fa      	movs	r2, #250	@ 0xfa
 80011fa:	210a      	movs	r1, #10
 80011fc:	200a      	movs	r0, #10
 80011fe:	f7ff fe90 	bl	8000f22 <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8001202:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001206:	f001 fe37 	bl	8002e78 <HAL_Delay>
	LCD_Draw_Vertical_Line(230,10,250,LCD_COLOR_MAGENTA);
 800120a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800120e:	22fa      	movs	r2, #250	@ 0xfa
 8001210:	210a      	movs	r1, #10
 8001212:	20e6      	movs	r0, #230	@ 0xe6
 8001214:	f7ff fe85 	bl	8000f22 <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8001218:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800121c:	f001 fe2c 	bl	8002e78 <HAL_Delay>

	LCD_Draw_Circle_Fill(125,150,20,LCD_COLOR_BLACK);
 8001220:	2300      	movs	r3, #0
 8001222:	2214      	movs	r2, #20
 8001224:	2196      	movs	r1, #150	@ 0x96
 8001226:	207d      	movs	r0, #125	@ 0x7d
 8001228:	f7ff fe28 	bl	8000e7c <LCD_Draw_Circle_Fill>
	HAL_Delay(2000);
 800122c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001230:	f001 fe22 	bl	8002e78 <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_BLUE);
 8001234:	211f      	movs	r1, #31
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fec2 	bl	8000fc0 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fee1 	bl	8001004 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001242:	481d      	ldr	r0, [pc, #116]	@ (80012b8 <visualDemo+0x154>)
 8001244:	f7ff feee 	bl	8001024 <LCD_SetFont>

	LCD_DisplayChar(100,140,'H');
 8001248:	2248      	movs	r2, #72	@ 0x48
 800124a:	218c      	movs	r1, #140	@ 0x8c
 800124c:	2064      	movs	r0, #100	@ 0x64
 800124e:	f7ff ff67 	bl	8001120 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'e');
 8001252:	2265      	movs	r2, #101	@ 0x65
 8001254:	218c      	movs	r1, #140	@ 0x8c
 8001256:	2073      	movs	r0, #115	@ 0x73
 8001258:	f7ff ff62 	bl	8001120 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'l');
 800125c:	226c      	movs	r2, #108	@ 0x6c
 800125e:	218c      	movs	r1, #140	@ 0x8c
 8001260:	207d      	movs	r0, #125	@ 0x7d
 8001262:	f7ff ff5d 	bl	8001120 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'l');
 8001266:	226c      	movs	r2, #108	@ 0x6c
 8001268:	218c      	movs	r1, #140	@ 0x8c
 800126a:	2082      	movs	r0, #130	@ 0x82
 800126c:	f7ff ff58 	bl	8001120 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'o');
 8001270:	226f      	movs	r2, #111	@ 0x6f
 8001272:	218c      	movs	r1, #140	@ 0x8c
 8001274:	208c      	movs	r0, #140	@ 0x8c
 8001276:	f7ff ff53 	bl	8001120 <LCD_DisplayChar>

	LCD_DisplayChar(100,160,'W');
 800127a:	2257      	movs	r2, #87	@ 0x57
 800127c:	21a0      	movs	r1, #160	@ 0xa0
 800127e:	2064      	movs	r0, #100	@ 0x64
 8001280:	f7ff ff4e 	bl	8001120 <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'o');
 8001284:	226f      	movs	r2, #111	@ 0x6f
 8001286:	21a0      	movs	r1, #160	@ 0xa0
 8001288:	2073      	movs	r0, #115	@ 0x73
 800128a:	f7ff ff49 	bl	8001120 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'r');
 800128e:	2272      	movs	r2, #114	@ 0x72
 8001290:	21a0      	movs	r1, #160	@ 0xa0
 8001292:	207d      	movs	r0, #125	@ 0x7d
 8001294:	f7ff ff44 	bl	8001120 <LCD_DisplayChar>
	LCD_DisplayChar(130,160,'l');
 8001298:	226c      	movs	r2, #108	@ 0x6c
 800129a:	21a0      	movs	r1, #160	@ 0xa0
 800129c:	2082      	movs	r0, #130	@ 0x82
 800129e:	f7ff ff3f 	bl	8001120 <LCD_DisplayChar>
	LCD_DisplayChar(140,160,'d');
 80012a2:	2264      	movs	r2, #100	@ 0x64
 80012a4:	21a0      	movs	r1, #160	@ 0xa0
 80012a6:	208c      	movs	r0, #140	@ 0x8c
 80012a8:	f7ff ff3a 	bl	8001120 <LCD_DisplayChar>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200001a8 	.word	0x200001a8
 80012b8:	20000004 	.word	0x20000004

080012bc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <LCD_Error_Handler+0x8>

080012c8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80012cc:	f001 f933 	bl	8002536 <STMPE811_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d001      	beq.n	80012da <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80012d6:	bf00      	nop
 80012d8:	e7fd      	b.n	80012d6 <InitializeLCDTouch+0xe>
  }
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}

080012de <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f001 f9dd 	bl	80026a6 <STMPE811_ReadTouch>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80012fa:	f000 f9ff 	bl	80016fc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80012fe:	20ca      	movs	r0, #202	@ 0xca
 8001300:	f000 f943 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001304:	20c3      	movs	r0, #195	@ 0xc3
 8001306:	f000 f94d 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800130a:	2008      	movs	r0, #8
 800130c:	f000 f94a 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001310:	2050      	movs	r0, #80	@ 0x50
 8001312:	f000 f947 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001316:	20cf      	movs	r0, #207	@ 0xcf
 8001318:	f000 f937 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800131c:	2000      	movs	r0, #0
 800131e:	f000 f941 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001322:	20c1      	movs	r0, #193	@ 0xc1
 8001324:	f000 f93e 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001328:	2030      	movs	r0, #48	@ 0x30
 800132a:	f000 f93b 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800132e:	20ed      	movs	r0, #237	@ 0xed
 8001330:	f000 f92b 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001334:	2064      	movs	r0, #100	@ 0x64
 8001336:	f000 f935 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f932 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001340:	2012      	movs	r0, #18
 8001342:	f000 f92f 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001346:	2081      	movs	r0, #129	@ 0x81
 8001348:	f000 f92c 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800134c:	20e8      	movs	r0, #232	@ 0xe8
 800134e:	f000 f91c 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001352:	2085      	movs	r0, #133	@ 0x85
 8001354:	f000 f926 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001358:	2000      	movs	r0, #0
 800135a:	f000 f923 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800135e:	2078      	movs	r0, #120	@ 0x78
 8001360:	f000 f920 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001364:	20cb      	movs	r0, #203	@ 0xcb
 8001366:	f000 f910 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800136a:	2039      	movs	r0, #57	@ 0x39
 800136c:	f000 f91a 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001370:	202c      	movs	r0, #44	@ 0x2c
 8001372:	f000 f917 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f914 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800137c:	2034      	movs	r0, #52	@ 0x34
 800137e:	f000 f911 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001382:	2002      	movs	r0, #2
 8001384:	f000 f90e 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001388:	20f7      	movs	r0, #247	@ 0xf7
 800138a:	f000 f8fe 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800138e:	2020      	movs	r0, #32
 8001390:	f000 f908 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001394:	20ea      	movs	r0, #234	@ 0xea
 8001396:	f000 f8f8 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f902 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 f8ff 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80013a6:	20b1      	movs	r0, #177	@ 0xb1
 80013a8:	f000 f8ef 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f8f9 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80013b2:	201b      	movs	r0, #27
 80013b4:	f000 f8f6 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80013b8:	20b6      	movs	r0, #182	@ 0xb6
 80013ba:	f000 f8e6 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80013be:	200a      	movs	r0, #10
 80013c0:	f000 f8f0 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80013c4:	20a2      	movs	r0, #162	@ 0xa2
 80013c6:	f000 f8ed 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80013ca:	20c0      	movs	r0, #192	@ 0xc0
 80013cc:	f000 f8dd 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80013d0:	2010      	movs	r0, #16
 80013d2:	f000 f8e7 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80013d6:	20c1      	movs	r0, #193	@ 0xc1
 80013d8:	f000 f8d7 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80013dc:	2010      	movs	r0, #16
 80013de:	f000 f8e1 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80013e2:	20c5      	movs	r0, #197	@ 0xc5
 80013e4:	f000 f8d1 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80013e8:	2045      	movs	r0, #69	@ 0x45
 80013ea:	f000 f8db 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80013ee:	2015      	movs	r0, #21
 80013f0:	f000 f8d8 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80013f4:	20c7      	movs	r0, #199	@ 0xc7
 80013f6:	f000 f8c8 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80013fa:	2090      	movs	r0, #144	@ 0x90
 80013fc:	f000 f8d2 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001400:	2036      	movs	r0, #54	@ 0x36
 8001402:	f000 f8c2 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001406:	20c8      	movs	r0, #200	@ 0xc8
 8001408:	f000 f8cc 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800140c:	20f2      	movs	r0, #242	@ 0xf2
 800140e:	f000 f8bc 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f8c6 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001418:	20b0      	movs	r0, #176	@ 0xb0
 800141a:	f000 f8b6 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800141e:	20c2      	movs	r0, #194	@ 0xc2
 8001420:	f000 f8c0 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001424:	20b6      	movs	r0, #182	@ 0xb6
 8001426:	f000 f8b0 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800142a:	200a      	movs	r0, #10
 800142c:	f000 f8ba 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001430:	20a7      	movs	r0, #167	@ 0xa7
 8001432:	f000 f8b7 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001436:	2027      	movs	r0, #39	@ 0x27
 8001438:	f000 f8b4 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800143c:	2004      	movs	r0, #4
 800143e:	f000 f8b1 	bl	80015a4 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001442:	202a      	movs	r0, #42	@ 0x2a
 8001444:	f000 f8a1 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001448:	2000      	movs	r0, #0
 800144a:	f000 f8ab 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800144e:	2000      	movs	r0, #0
 8001450:	f000 f8a8 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f8a5 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800145a:	20ef      	movs	r0, #239	@ 0xef
 800145c:	f000 f8a2 	bl	80015a4 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001460:	202b      	movs	r0, #43	@ 0x2b
 8001462:	f000 f892 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f89c 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800146c:	2000      	movs	r0, #0
 800146e:	f000 f899 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001472:	2001      	movs	r0, #1
 8001474:	f000 f896 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001478:	203f      	movs	r0, #63	@ 0x3f
 800147a:	f000 f893 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800147e:	20f6      	movs	r0, #246	@ 0xf6
 8001480:	f000 f883 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001484:	2001      	movs	r0, #1
 8001486:	f000 f88d 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f88a 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001490:	2006      	movs	r0, #6
 8001492:	f000 f887 	bl	80015a4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001496:	202c      	movs	r0, #44	@ 0x2c
 8001498:	f000 f877 	bl	800158a <ili9341_Write_Reg>
  LCD_Delay(200);
 800149c:	20c8      	movs	r0, #200	@ 0xc8
 800149e:	f000 f9e9 	bl	8001874 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80014a2:	2026      	movs	r0, #38	@ 0x26
 80014a4:	f000 f871 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 f87b 	bl	80015a4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80014ae:	20e0      	movs	r0, #224	@ 0xe0
 80014b0:	f000 f86b 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80014b4:	200f      	movs	r0, #15
 80014b6:	f000 f875 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80014ba:	2029      	movs	r0, #41	@ 0x29
 80014bc:	f000 f872 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80014c0:	2024      	movs	r0, #36	@ 0x24
 80014c2:	f000 f86f 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80014c6:	200c      	movs	r0, #12
 80014c8:	f000 f86c 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80014cc:	200e      	movs	r0, #14
 80014ce:	f000 f869 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80014d2:	2009      	movs	r0, #9
 80014d4:	f000 f866 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80014d8:	204e      	movs	r0, #78	@ 0x4e
 80014da:	f000 f863 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80014de:	2078      	movs	r0, #120	@ 0x78
 80014e0:	f000 f860 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80014e4:	203c      	movs	r0, #60	@ 0x3c
 80014e6:	f000 f85d 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80014ea:	2009      	movs	r0, #9
 80014ec:	f000 f85a 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80014f0:	2013      	movs	r0, #19
 80014f2:	f000 f857 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80014f6:	2005      	movs	r0, #5
 80014f8:	f000 f854 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80014fc:	2017      	movs	r0, #23
 80014fe:	f000 f851 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001502:	2011      	movs	r0, #17
 8001504:	f000 f84e 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001508:	2000      	movs	r0, #0
 800150a:	f000 f84b 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800150e:	20e1      	movs	r0, #225	@ 0xe1
 8001510:	f000 f83b 	bl	800158a <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001514:	2000      	movs	r0, #0
 8001516:	f000 f845 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800151a:	2016      	movs	r0, #22
 800151c:	f000 f842 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001520:	201b      	movs	r0, #27
 8001522:	f000 f83f 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001526:	2004      	movs	r0, #4
 8001528:	f000 f83c 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800152c:	2011      	movs	r0, #17
 800152e:	f000 f839 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001532:	2007      	movs	r0, #7
 8001534:	f000 f836 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001538:	2031      	movs	r0, #49	@ 0x31
 800153a:	f000 f833 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800153e:	2033      	movs	r0, #51	@ 0x33
 8001540:	f000 f830 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001544:	2042      	movs	r0, #66	@ 0x42
 8001546:	f000 f82d 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800154a:	2005      	movs	r0, #5
 800154c:	f000 f82a 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001550:	200c      	movs	r0, #12
 8001552:	f000 f827 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001556:	200a      	movs	r0, #10
 8001558:	f000 f824 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800155c:	2028      	movs	r0, #40	@ 0x28
 800155e:	f000 f821 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001562:	202f      	movs	r0, #47	@ 0x2f
 8001564:	f000 f81e 	bl	80015a4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001568:	200f      	movs	r0, #15
 800156a:	f000 f81b 	bl	80015a4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800156e:	2011      	movs	r0, #17
 8001570:	f000 f80b 	bl	800158a <ili9341_Write_Reg>
  LCD_Delay(200);
 8001574:	20c8      	movs	r0, #200	@ 0xc8
 8001576:	f000 f97d 	bl	8001874 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800157a:	2029      	movs	r0, #41	@ 0x29
 800157c:	f000 f805 	bl	800158a <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001580:	202c      	movs	r0, #44	@ 0x2c
 8001582:	f000 f802 	bl	800158a <ili9341_Write_Reg>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}

0800158a <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f94a 	bl	8001830 <LCD_IO_WriteReg>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f91b 	bl	80017ec <LCD_IO_WriteData>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80015c4:	4819      	ldr	r0, [pc, #100]	@ (800162c <SPI_Init+0x6c>)
 80015c6:	f004 fc2c 	bl	8005e22 <HAL_SPI_GetState>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d12b      	bne.n	8001628 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <SPI_Init+0x6c>)
 80015d2:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <SPI_Init+0x70>)
 80015d4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <SPI_Init+0x6c>)
 80015d8:	2218      	movs	r2, #24
 80015da:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <SPI_Init+0x6c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <SPI_Init+0x6c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <SPI_Init+0x6c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <SPI_Init+0x6c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <SPI_Init+0x6c>)
 80015f6:	2207      	movs	r2, #7
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <SPI_Init+0x6c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <SPI_Init+0x6c>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <SPI_Init+0x6c>)
 8001608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800160e:	4b07      	ldr	r3, [pc, #28]	@ (800162c <SPI_Init+0x6c>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <SPI_Init+0x6c>)
 8001616:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800161a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <SPI_Init+0x6c>)
 800161e:	f000 f833 	bl	8001688 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001622:	4802      	ldr	r0, [pc, #8]	@ (800162c <SPI_Init+0x6c>)
 8001624:	f004 fa08 	bl	8005a38 <HAL_SPI_Init>
  }
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200259a8 	.word	0x200259a8
 8001630:	40015000 	.word	0x40015000

08001634 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <SPI_Write+0x34>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	1db9      	adds	r1, r7, #6
 8001648:	2201      	movs	r2, #1
 800164a:	4808      	ldr	r0, [pc, #32]	@ (800166c <SPI_Write+0x38>)
 800164c:	f004 faa5 	bl	8005b9a <HAL_SPI_Transmit>
 8001650:	4603      	mov	r3, r0
 8001652:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800165a:	f000 f809 	bl	8001670 <SPI_Error>
  }
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000000c 	.word	0x2000000c
 800166c:	200259a8 	.word	0x200259a8

08001670 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001674:	4803      	ldr	r0, [pc, #12]	@ (8001684 <SPI_Error+0x14>)
 8001676:	f004 fa68 	bl	8005b4a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800167a:	f7ff ffa1 	bl	80015c0 <SPI_Init>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200259a8 	.word	0x200259a8

08001688 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	@ 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <SPI_MspInit+0x6c>)
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	4a16      	ldr	r2, [pc, #88]	@ (80016f4 <SPI_MspInit+0x6c>)
 800169a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800169e:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <SPI_MspInit+0x6c>)
 80016a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <SPI_MspInit+0x6c>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <SPI_MspInit+0x6c>)
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80016bc:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <SPI_MspInit+0x6c>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80016c8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80016d6:	2301      	movs	r3, #1
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80016da:	2305      	movs	r3, #5
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <SPI_MspInit+0x70>)
 80016e6:	f001 fcfd 	bl	80030e4 <HAL_GPIO_Init>
}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	@ 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40021400 	.word	0x40021400

080016fc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001702:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <LCD_IO_Init+0xe0>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d164      	bne.n	80017d4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800170a:	4b34      	ldr	r3, [pc, #208]	@ (80017dc <LCD_IO_Init+0xe0>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <LCD_IO_Init+0xe4>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001718:	4a31      	ldr	r2, [pc, #196]	@ (80017e0 <LCD_IO_Init+0xe4>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001720:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <LCD_IO_Init+0xe4>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800172c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001730:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4827      	ldr	r0, [pc, #156]	@ (80017e4 <LCD_IO_Init+0xe8>)
 8001746:	f001 fccd 	bl	80030e4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <LCD_IO_Init+0xe4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <LCD_IO_Init+0xe4>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <LCD_IO_Init+0xe4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001766:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4619      	mov	r1, r3
 800177e:	4819      	ldr	r0, [pc, #100]	@ (80017e4 <LCD_IO_Init+0xe8>)
 8001780:	f001 fcb0 	bl	80030e4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <LCD_IO_Init+0xe4>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <LCD_IO_Init+0xe4>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6313      	str	r3, [r2, #48]	@ 0x30
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <LCD_IO_Init+0xe4>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80017a0:	2304      	movs	r3, #4
 80017a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <LCD_IO_Init+0xec>)
 80017b8:	f001 fc94 	bl	80030e4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80017bc:	2200      	movs	r2, #0
 80017be:	2104      	movs	r1, #4
 80017c0:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <LCD_IO_Init+0xec>)
 80017c2:	f001 ff47 	bl	8003654 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80017c6:	2201      	movs	r2, #1
 80017c8:	2104      	movs	r1, #4
 80017ca:	4807      	ldr	r0, [pc, #28]	@ (80017e8 <LCD_IO_Init+0xec>)
 80017cc:	f001 ff42 	bl	8003654 <HAL_GPIO_WritePin>

    SPI_Init();
 80017d0:	f7ff fef6 	bl	80015c0 <SPI_Init>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20025a00 	.word	0x20025a00
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40020800 	.word	0x40020800

080017ec <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80017f6:	2201      	movs	r2, #1
 80017f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017fc:	480a      	ldr	r0, [pc, #40]	@ (8001828 <LCD_IO_WriteData+0x3c>)
 80017fe:	f001 ff29 	bl	8003654 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001802:	2200      	movs	r2, #0
 8001804:	2104      	movs	r1, #4
 8001806:	4809      	ldr	r0, [pc, #36]	@ (800182c <LCD_IO_WriteData+0x40>)
 8001808:	f001 ff24 	bl	8003654 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff10 	bl	8001634 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001814:	2201      	movs	r2, #1
 8001816:	2104      	movs	r1, #4
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <LCD_IO_WriteData+0x40>)
 800181a:	f001 ff1b 	bl	8003654 <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40020800 	.word	0x40020800

08001830 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001840:	480a      	ldr	r0, [pc, #40]	@ (800186c <LCD_IO_WriteReg+0x3c>)
 8001842:	f001 ff07 	bl	8003654 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001846:	2200      	movs	r2, #0
 8001848:	2104      	movs	r1, #4
 800184a:	4809      	ldr	r0, [pc, #36]	@ (8001870 <LCD_IO_WriteReg+0x40>)
 800184c:	f001 ff02 	bl	8003654 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff feed 	bl	8001634 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800185a:	2201      	movs	r2, #1
 800185c:	2104      	movs	r1, #4
 800185e:	4804      	ldr	r0, [pc, #16]	@ (8001870 <LCD_IO_WriteReg+0x40>)
 8001860:	f001 fef8 	bl	8003654 <HAL_GPIO_WritePin>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40020c00 	.word	0x40020c00
 8001870:	40020800 	.word	0x40020800

08001874 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f001 fafb 	bl	8002e78 <HAL_Delay>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188e:	f001 fa81 	bl	8002d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001892:	f000 f819 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001896:	f000 fa09 	bl	8001cac <MX_GPIO_Init>
  MX_LTDC_Init();
 800189a:	f000 f8bf 	bl	8001a1c <MX_LTDC_Init>
  MX_RNG_Init();
 800189e:	f000 f96f 	bl	8001b80 <MX_RNG_Init>
  MX_TIM2_Init();
 80018a2:	f000 f9b7 	bl	8001c14 <MX_TIM2_Init>
  MX_SPI5_Init();
 80018a6:	f000 f97f 	bl	8001ba8 <MX_SPI5_Init>
  MX_I2C3_Init();
 80018aa:	f000 f877 	bl	800199c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80018ae:	f7fe fe67 	bl	8000580 <ApplicationInit>
  InitButtonInterrupts();
 80018b2:	f7ff f921 	bl	8000af8 <InitButtonInterrupts>
  //LCD_Visual_Demo();
  HAL_Delay(2000);
 80018b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018ba:	f001 fadd 	bl	8002e78 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_Touch_Polling_Demo(); // This function Will not return
 80018be:	f7fe fe7d 	bl	80005bc <LCD_Touch_Polling_Demo>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018c2:	bf00      	nop
 80018c4:	e7fd      	b.n	80018c2 <main+0x38>
	...

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b094      	sub	sp, #80	@ 0x50
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2230      	movs	r2, #48	@ 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f005 f870 	bl	80069bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	4a27      	ldr	r2, [pc, #156]	@ (8001994 <SystemClock_Config+0xcc>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fc:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <SystemClock_Config+0xd0>)
 8001912:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001924:	2301      	movs	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001928:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192e:	2302      	movs	r3, #2
 8001930:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001932:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001938:	2308      	movs	r3, #8
 800193a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800193c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001940:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001942:	2302      	movs	r3, #2
 8001944:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001946:	2307      	movs	r3, #7
 8001948:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194a:	f107 0320 	add.w	r3, r7, #32
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fa04 	bl	8004d5c <HAL_RCC_OscConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800195a:	f000 fb55 	bl	8002008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195e:	230f      	movs	r3, #15
 8001960:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001962:	2302      	movs	r3, #2
 8001964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800196a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800196e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2105      	movs	r1, #5
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fc65 	bl	800524c <HAL_RCC_ClockConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001988:	f000 fb3e 	bl	8002008 <Error_Handler>
  }
}
 800198c:	bf00      	nop
 800198e:	3750      	adds	r7, #80	@ 0x50
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <MX_I2C3_Init+0x78>)
 80019a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a18 <MX_I2C3_Init+0x7c>)
 80019aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019d8:	480d      	ldr	r0, [pc, #52]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019da:	f001 fe79 	bl	80036d0 <HAL_I2C_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80019e4:	f000 fb10 	bl	8002008 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019e8:	2100      	movs	r1, #0
 80019ea:	4809      	ldr	r0, [pc, #36]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019ec:	f002 fe94 	bl	8004718 <HAL_I2CEx_ConfigAnalogFilter>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80019f6:	f000 fb07 	bl	8002008 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_I2C3_Init+0x74>)
 80019fe:	f002 fec7 	bl	8004790 <HAL_I2CEx_ConfigDigitalFilter>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a08:	f000 fafe 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20025a04 	.word	0x20025a04
 8001a14:	40005c00 	.word	0x40005c00
 8001a18:	000186a0 	.word	0x000186a0

08001a1c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b09a      	sub	sp, #104	@ 0x68
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a26:	2234      	movs	r2, #52	@ 0x34
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 ffc6 	bl	80069bc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	2234      	movs	r2, #52	@ 0x34
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f004 ffc0 	bl	80069bc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a3e:	4a4f      	ldr	r2, [pc, #316]	@ (8001b7c <MX_LTDC_Init+0x160>)
 8001a40:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a42:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a48:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a54:	4b48      	ldr	r3, [pc, #288]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001a5a:	4b47      	ldr	r3, [pc, #284]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001a60:	4b45      	ldr	r3, [pc, #276]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a62:	2203      	movs	r2, #3
 8001a64:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001a66:	4b44      	ldr	r3, [pc, #272]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a68:	220e      	movs	r2, #14
 8001a6a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001a6c:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a6e:	2205      	movs	r2, #5
 8001a70:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001a72:	4b41      	ldr	r3, [pc, #260]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a74:	f240 228e 	movw	r2, #654	@ 0x28e
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a7c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001a82:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a84:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001a88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a8c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001a90:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a92:	4b39      	ldr	r3, [pc, #228]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a9a:	4b37      	ldr	r3, [pc, #220]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001aa2:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001aaa:	4833      	ldr	r0, [pc, #204]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001aac:	f002 feb0 	bl	8004810 <HAL_LTDC_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001ab6:	f000 faa7 	bl	8002008 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001aca:	2300      	movs	r3, #0
 8001acc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ada:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001adc:	2305      	movs	r3, #5
 8001ade:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001afe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	481c      	ldr	r0, [pc, #112]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001b08:	f002 ff52 	bl	80049b0 <HAL_LTDC_ConfigLayer>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001b12:	f000 fa79 	bl	8002008 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b36:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b38:	2305      	movs	r3, #5
 8001b3a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_LTDC_Init+0x15c>)
 8001b62:	f002 ff25 	bl	80049b0 <HAL_LTDC_ConfigLayer>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001b6c:	f000 fa4c 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3768      	adds	r7, #104	@ 0x68
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20025a58 	.word	0x20025a58
 8001b7c:	40016800 	.word	0x40016800

08001b80 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <MX_RNG_Init+0x20>)
 8001b86:	4a07      	ldr	r2, [pc, #28]	@ (8001ba4 <MX_RNG_Init+0x24>)
 8001b88:	601a      	str	r2, [r3, #0]
  //hrng.Init.Lock = 42;
  //hrng.Init.State = 42;
  //hrng.Init.ErrorCode = 42;
  //hrng.Init.RandomNumber = 42;
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <MX_RNG_Init+0x20>)
 8001b8c:	f003 ff2a 	bl	80059e4 <HAL_RNG_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001b96:	f000 fa37 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20025b00 	.word	0x20025b00
 8001ba4:	50060800 	.word	0x50060800

08001ba8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bae:	4a18      	ldr	r2, [pc, #96]	@ (8001c10 <MX_SPI5_Init+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bb8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bba:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bf4:	220a      	movs	r2, #10
 8001bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <MX_SPI5_Init+0x64>)
 8001bfa:	f003 ff1d 	bl	8005a38 <HAL_SPI_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001c04:	f000 fa00 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20025b10 	.word	0x20025b10
 8001c10:	40015000 	.word	0x40015000

08001c14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c44:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c46:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c58:	4813      	ldr	r0, [pc, #76]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c5a:	f004 f9cd 	bl	8005ff8 <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c64:	f000 f9d0 	bl	8002008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4619      	mov	r1, r3
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c76:	f004 fa0e 	bl	8006096 <HAL_TIM_ConfigClockSource>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c80:	f000 f9c2 	bl	8002008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <MX_TIM2_Init+0x94>)
 8001c92:	f004 fc0d 	bl	80064b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c9c:	f000 f9b4 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20025b68 	.word	0x20025b68

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	@ 0x38
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	4bb2      	ldr	r3, [pc, #712]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4ab1      	ldr	r2, [pc, #708]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4baf      	ldr	r3, [pc, #700]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	4bab      	ldr	r3, [pc, #684]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4aaa      	ldr	r2, [pc, #680]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001ce8:	f043 0320 	orr.w	r3, r3, #32
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4ba8      	ldr	r3, [pc, #672]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	4ba4      	ldr	r3, [pc, #656]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4aa3      	ldr	r2, [pc, #652]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4ba1      	ldr	r3, [pc, #644]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	4b9d      	ldr	r3, [pc, #628]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a9c      	ldr	r2, [pc, #624]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b9a      	ldr	r3, [pc, #616]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b96      	ldr	r3, [pc, #600]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a95      	ldr	r2, [pc, #596]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b93      	ldr	r3, [pc, #588]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b8f      	ldr	r3, [pc, #572]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a8e      	ldr	r2, [pc, #568]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b8c      	ldr	r3, [pc, #560]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b88      	ldr	r3, [pc, #544]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a87      	ldr	r2, [pc, #540]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d74:	f043 0310 	orr.w	r3, r3, #16
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b85      	ldr	r3, [pc, #532]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b81      	ldr	r3, [pc, #516]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a80      	ldr	r2, [pc, #512]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b7e      	ldr	r3, [pc, #504]	@ (8001f90 <MX_GPIO_Init+0x2e4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2116      	movs	r1, #22
 8001da6:	487b      	ldr	r0, [pc, #492]	@ (8001f94 <MX_GPIO_Init+0x2e8>)
 8001da8:	f001 fc54 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2180      	movs	r1, #128	@ 0x80
 8001db0:	4879      	ldr	r0, [pc, #484]	@ (8001f98 <MX_GPIO_Init+0x2ec>)
 8001db2:	f001 fc4f 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001dbc:	4877      	ldr	r0, [pc, #476]	@ (8001f9c <MX_GPIO_Init+0x2f0>)
 8001dbe:	f001 fc49 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001dc8:	4875      	ldr	r0, [pc, #468]	@ (8001fa0 <MX_GPIO_Init+0x2f4>)
 8001dca:	f001 fc43 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001dce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001de0:	230c      	movs	r3, #12
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de8:	4619      	mov	r1, r3
 8001dea:	486e      	ldr	r0, [pc, #440]	@ (8001fa4 <MX_GPIO_Init+0x2f8>)
 8001dec:	f001 f97a 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001df0:	2301      	movs	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e00:	230c      	movs	r3, #12
 8001e02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4862      	ldr	r0, [pc, #392]	@ (8001f94 <MX_GPIO_Init+0x2e8>)
 8001e0c:	f001 f96a 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001e10:	2316      	movs	r3, #22
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e14:	2301      	movs	r3, #1
 8001e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	485b      	ldr	r0, [pc, #364]	@ (8001f94 <MX_GPIO_Init+0x2e8>)
 8001e28:	f001 f95c 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001e2c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e32:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e40:	4619      	mov	r1, r3
 8001e42:	4855      	ldr	r0, [pc, #340]	@ (8001f98 <MX_GPIO_Init+0x2ec>)
 8001e44:	f001 f94e 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	484e      	ldr	r0, [pc, #312]	@ (8001f98 <MX_GPIO_Init+0x2ec>)
 8001e60:	f001 f940 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001e64:	2320      	movs	r3, #32
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e68:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4846      	ldr	r0, [pc, #280]	@ (8001f94 <MX_GPIO_Init+0x2e8>)
 8001e7a:	f001 f933 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4845      	ldr	r0, [pc, #276]	@ (8001fa8 <MX_GPIO_Init+0x2fc>)
 8001e92:	f001 f927 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001e96:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ea8:	230c      	movs	r3, #12
 8001eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	483b      	ldr	r0, [pc, #236]	@ (8001fa0 <MX_GPIO_Init+0x2f4>)
 8001eb4:	f001 f916 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001eb8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eca:	230c      	movs	r3, #12
 8001ecc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4835      	ldr	r0, [pc, #212]	@ (8001fac <MX_GPIO_Init+0x300>)
 8001ed6:	f001 f905 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001eda:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001eec:	230c      	movs	r3, #12
 8001eee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	482c      	ldr	r0, [pc, #176]	@ (8001fa8 <MX_GPIO_Init+0x2fc>)
 8001ef8:	f001 f8f4 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001efc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4825      	ldr	r0, [pc, #148]	@ (8001fa8 <MX_GPIO_Init+0x2fc>)
 8001f12:	f001 f8e7 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001f16:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f30:	4619      	mov	r1, r3
 8001f32:	481a      	ldr	r0, [pc, #104]	@ (8001f9c <MX_GPIO_Init+0x2f0>)
 8001f34:	f001 f8d6 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001f38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4813      	ldr	r0, [pc, #76]	@ (8001f9c <MX_GPIO_Init+0x2f0>)
 8001f4e:	f001 f8c9 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001f52:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <MX_GPIO_Init+0x2f0>)
 8001f6c:	f001 f8ba 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001f70:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f82:	2307      	movs	r3, #7
 8001f84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	e010      	b.n	8001fb0 <MX_GPIO_Init+0x304>
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40021800 	.word	0x40021800
 8001fa4:	40021400 	.word	0x40021400
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	4812      	ldr	r0, [pc, #72]	@ (8001ffc <MX_GPIO_Init+0x350>)
 8001fb2:	f001 f897 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001fb6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480c      	ldr	r0, [pc, #48]	@ (8002000 <MX_GPIO_Init+0x354>)
 8001fd0:	f001 f888 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001fd4:	2360      	movs	r3, #96	@ 0x60
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fe4:	230c      	movs	r3, #12
 8001fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <MX_GPIO_Init+0x358>)
 8001ff0:	f001 f878 	bl	80030e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff4:	bf00      	nop
 8001ff6:	3738      	adds	r7, #56	@ 0x38
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40021800 	.word	0x40021800
 8002004:	40020400 	.word	0x40020400

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <Error_Handler+0x8>

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	4a0f      	ldr	r2, [pc, #60]	@ (8002060 <HAL_MspInit+0x4c>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002028:	6453      	str	r3, [r2, #68]	@ 0x44
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a08      	ldr	r2, [pc, #32]	@ (8002060 <HAL_MspInit+0x4c>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002052:	2007      	movs	r0, #7
 8002054:	f001 f804 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	@ 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a29      	ldr	r2, [pc, #164]	@ (8002128 <HAL_I2C_MspInit+0xc4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d14b      	bne.n	800211e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b28      	ldr	r3, [pc, #160]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a27      	ldr	r2, [pc, #156]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b25      	ldr	r3, [pc, #148]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b21      	ldr	r3, [pc, #132]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	4a20      	ldr	r2, [pc, #128]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80020be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020d0:	2304      	movs	r3, #4
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	4815      	ldr	r0, [pc, #84]	@ (8002130 <HAL_I2C_MspInit+0xcc>)
 80020dc:	f001 f802 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80020e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e6:	2312      	movs	r3, #18
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020f2:	2304      	movs	r3, #4
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4619      	mov	r1, r3
 80020fc:	480d      	ldr	r0, [pc, #52]	@ (8002134 <HAL_I2C_MspInit+0xd0>)
 80020fe:	f000 fff1 	bl	80030e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	4a08      	ldr	r2, [pc, #32]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 800210c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002110:	6413      	str	r3, [r2, #64]	@ 0x40
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_I2C_MspInit+0xc8>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800211e:	bf00      	nop
 8002120:	3728      	adds	r7, #40	@ 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40005c00 	.word	0x40005c00
 800212c:	40023800 	.word	0x40023800
 8002130:	40020800 	.word	0x40020800
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b09a      	sub	sp, #104	@ 0x68
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002154:	2230      	movs	r2, #48	@ 0x30
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f004 fc2f 	bl	80069bc <memset>
  if(hltdc->Instance==LTDC)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a81      	ldr	r2, [pc, #516]	@ (8002368 <HAL_LTDC_MspInit+0x230>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f040 80fb 	bne.w	8002360 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800216a:	2308      	movs	r3, #8
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800216e:	23c8      	movs	r3, #200	@ 0xc8
 8002170:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002172:	2302      	movs	r3, #2
 8002174:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002176:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800217a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fa6f 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 800218c:	f7ff ff3c 	bl	8002008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	4b75      	ldr	r3, [pc, #468]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 8002196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002198:	4a74      	ldr	r2, [pc, #464]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 800219a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800219e:	6453      	str	r3, [r2, #68]	@ 0x44
 80021a0:	4b72      	ldr	r3, [pc, #456]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	4b6e      	ldr	r3, [pc, #440]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	4a6d      	ldr	r2, [pc, #436]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021b6:	f043 0320 	orr.w	r3, r3, #32
 80021ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80021bc:	4b6b      	ldr	r3, [pc, #428]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	4b67      	ldr	r3, [pc, #412]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	4a66      	ldr	r2, [pc, #408]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d8:	4b64      	ldr	r3, [pc, #400]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	4b60      	ldr	r3, [pc, #384]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	4a5f      	ldr	r2, [pc, #380]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f4:	4b5d      	ldr	r3, [pc, #372]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	4b59      	ldr	r3, [pc, #356]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002208:	4a58      	ldr	r2, [pc, #352]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 800220a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800220e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002210:	4b56      	ldr	r3, [pc, #344]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	4b52      	ldr	r3, [pc, #328]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	4a51      	ldr	r2, [pc, #324]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6313      	str	r3, [r2, #48]	@ 0x30
 800222c:	4b4f      	ldr	r3, [pc, #316]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	4b4b      	ldr	r3, [pc, #300]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	4a4a      	ldr	r2, [pc, #296]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	6313      	str	r3, [r2, #48]	@ 0x30
 8002248:	4b48      	ldr	r3, [pc, #288]	@ (800236c <HAL_LTDC_MspInit+0x234>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002258:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002266:	230e      	movs	r3, #14
 8002268:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800226e:	4619      	mov	r1, r3
 8002270:	483f      	ldr	r0, [pc, #252]	@ (8002370 <HAL_LTDC_MspInit+0x238>)
 8002272:	f000 ff37 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002276:	f641 0358 	movw	r3, #6232	@ 0x1858
 800227a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002288:	230e      	movs	r3, #14
 800228a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002290:	4619      	mov	r1, r3
 8002292:	4838      	ldr	r0, [pc, #224]	@ (8002374 <HAL_LTDC_MspInit+0x23c>)
 8002294:	f000 ff26 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002298:	2303      	movs	r3, #3
 800229a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022a8:	2309      	movs	r3, #9
 80022aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022b0:	4619      	mov	r1, r3
 80022b2:	4831      	ldr	r0, [pc, #196]	@ (8002378 <HAL_LTDC_MspInit+0x240>)
 80022b4:	f000 ff16 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80022b8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80022bc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022ca:	230e      	movs	r3, #14
 80022cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022d2:	4619      	mov	r1, r3
 80022d4:	4828      	ldr	r0, [pc, #160]	@ (8002378 <HAL_LTDC_MspInit+0x240>)
 80022d6:	f000 ff05 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80022da:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80022de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022ec:	230e      	movs	r3, #14
 80022ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022f4:	4619      	mov	r1, r3
 80022f6:	4821      	ldr	r0, [pc, #132]	@ (800237c <HAL_LTDC_MspInit+0x244>)
 80022f8:	f000 fef4 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80022fc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002300:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800230e:	230e      	movs	r3, #14
 8002310:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002312:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002316:	4619      	mov	r1, r3
 8002318:	4819      	ldr	r0, [pc, #100]	@ (8002380 <HAL_LTDC_MspInit+0x248>)
 800231a:	f000 fee3 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800231e:	2348      	movs	r3, #72	@ 0x48
 8002320:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800232e:	230e      	movs	r3, #14
 8002330:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002332:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002336:	4619      	mov	r1, r3
 8002338:	4812      	ldr	r0, [pc, #72]	@ (8002384 <HAL_LTDC_MspInit+0x24c>)
 800233a:	f000 fed3 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800233e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002342:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002350:	2309      	movs	r3, #9
 8002352:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002354:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002358:	4619      	mov	r1, r3
 800235a:	4808      	ldr	r0, [pc, #32]	@ (800237c <HAL_LTDC_MspInit+0x244>)
 800235c:	f000 fec2 	bl	80030e4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002360:	bf00      	nop
 8002362:	3768      	adds	r7, #104	@ 0x68
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40016800 	.word	0x40016800
 800236c:	40023800 	.word	0x40023800
 8002370:	40021400 	.word	0x40021400
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40021800 	.word	0x40021800
 8002380:	40020800 	.word	0x40020800
 8002384:	40020c00 	.word	0x40020c00

08002388 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0b      	ldr	r2, [pc, #44]	@ (80023c4 <HAL_RNG_MspInit+0x3c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10d      	bne.n	80023b6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_RNG_MspInit+0x40>)
 80023a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a2:	4a09      	ldr	r2, [pc, #36]	@ (80023c8 <HAL_RNG_MspInit+0x40>)
 80023a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023a8:	6353      	str	r3, [r2, #52]	@ 0x34
 80023aa:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <HAL_RNG_MspInit+0x40>)
 80023ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	50060800 	.word	0x50060800
 80023c8:	40023800 	.word	0x40023800

080023cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a19      	ldr	r2, [pc, #100]	@ (8002450 <HAL_SPI_MspInit+0x84>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d12c      	bne.n	8002448 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 80023f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a10      	ldr	r2, [pc, #64]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 8002414:	f043 0320 	orr.w	r3, r3, #32
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <HAL_SPI_MspInit+0x88>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002426:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002438:	2305      	movs	r3, #5
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	4805      	ldr	r0, [pc, #20]	@ (8002458 <HAL_SPI_MspInit+0x8c>)
 8002444:	f000 fe4e 	bl	80030e4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	@ 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40015000 	.word	0x40015000
 8002454:	40023800 	.word	0x40023800
 8002458:	40021400 	.word	0x40021400

0800245c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a08      	ldr	r2, [pc, #32]	@ (800248c <HAL_SPI_MspDeInit+0x30>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10a      	bne.n	8002484 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800246e:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_SPI_MspDeInit+0x34>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_SPI_MspDeInit+0x34>)
 8002474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800247a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800247e:	4805      	ldr	r0, [pc, #20]	@ (8002494 <HAL_SPI_MspDeInit+0x38>)
 8002480:	f000 ffdc 	bl	800343c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40015000 	.word	0x40015000
 8002490:	40023800 	.word	0x40023800
 8002494:	40021400 	.word	0x40021400

08002498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a8:	d10d      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_TIM_Base_MspInit+0x3c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <HAL_TIM_Base_MspInit+0x3c>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_TIM_Base_MspInit+0x3c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800

080024d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <NMI_Handler+0x4>

080024e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <MemManage_Handler+0x4>

080024f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <UsageFault_Handler+0x4>

08002500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252e:	f000 fc83 	bl	8002e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}

08002536 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800253c:	f000 f9ce 	bl	80028dc <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002540:	f000 f98e 	bl	8002860 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002544:	2202      	movs	r2, #2
 8002546:	2103      	movs	r1, #3
 8002548:	2082      	movs	r0, #130	@ 0x82
 800254a:	f000 fa1b 	bl	8002984 <I2C3_Write>
    HAL_Delay(5);
 800254e:	2005      	movs	r0, #5
 8002550:	f000 fc92 	bl	8002e78 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002554:	2200      	movs	r2, #0
 8002556:	2103      	movs	r1, #3
 8002558:	2082      	movs	r0, #130	@ 0x82
 800255a:	f000 fa13 	bl	8002984 <I2C3_Write>
    HAL_Delay(2);
 800255e:	2002      	movs	r0, #2
 8002560:	f000 fc8a 	bl	8002e78 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002564:	1cba      	adds	r2, r7, #2
 8002566:	2302      	movs	r3, #2
 8002568:	2100      	movs	r1, #0
 800256a:	2082      	movs	r0, #130	@ 0x82
 800256c:	f000 fa5a 	bl	8002a24 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002576:	887b      	ldrh	r3, [r7, #2]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29a      	uxth	r2, r3
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	4313      	orrs	r3, r2
 8002580:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	f640 0211 	movw	r2, #2065	@ 0x811
 8002588:	4293      	cmp	r3, r2
 800258a:	d001      	beq.n	8002590 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800258c:	2303      	movs	r3, #3
 800258e:	e075      	b.n	800267c <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002590:	2202      	movs	r2, #2
 8002592:	2103      	movs	r1, #3
 8002594:	2082      	movs	r0, #130	@ 0x82
 8002596:	f000 f9f5 	bl	8002984 <I2C3_Write>
    HAL_Delay(5);
 800259a:	2005      	movs	r0, #5
 800259c:	f000 fc6c 	bl	8002e78 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2103      	movs	r1, #3
 80025a4:	2082      	movs	r0, #130	@ 0x82
 80025a6:	f000 f9ed 	bl	8002984 <I2C3_Write>
    HAL_Delay(2);
 80025aa:	2002      	movs	r0, #2
 80025ac:	f000 fc64 	bl	8002e78 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80025b0:	2004      	movs	r0, #4
 80025b2:	f000 f867 	bl	8002684 <STMPE811_Read>
 80025b6:	4603      	mov	r3, r0
 80025b8:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80025ba:	797b      	ldrb	r3, [r7, #5]
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80025c2:	797b      	ldrb	r3, [r7, #5]
 80025c4:	461a      	mov	r2, r3
 80025c6:	2104      	movs	r1, #4
 80025c8:	2082      	movs	r0, #130	@ 0x82
 80025ca:	f000 f9db 	bl	8002984 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80025ce:	2004      	movs	r0, #4
 80025d0:	f000 f858 	bl	8002684 <STMPE811_Read>
 80025d4:	4603      	mov	r3, r0
 80025d6:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80025d8:	797b      	ldrb	r3, [r7, #5]
 80025da:	f023 0302 	bic.w	r3, r3, #2
 80025de:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80025e0:	797b      	ldrb	r3, [r7, #5]
 80025e2:	461a      	mov	r2, r3
 80025e4:	2104      	movs	r1, #4
 80025e6:	2082      	movs	r0, #130	@ 0x82
 80025e8:	f000 f9cc 	bl	8002984 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80025ec:	2249      	movs	r2, #73	@ 0x49
 80025ee:	2120      	movs	r1, #32
 80025f0:	2082      	movs	r0, #130	@ 0x82
 80025f2:	f000 f9c7 	bl	8002984 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80025f6:	2002      	movs	r0, #2
 80025f8:	f000 fc3e 	bl	8002e78 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80025fc:	2201      	movs	r2, #1
 80025fe:	2121      	movs	r1, #33	@ 0x21
 8002600:	2082      	movs	r0, #130	@ 0x82
 8002602:	f000 f9bf 	bl	8002984 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002606:	2017      	movs	r0, #23
 8002608:	f000 f83c 	bl	8002684 <STMPE811_Read>
 800260c:	4603      	mov	r3, r0
 800260e:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002610:	797b      	ldrb	r3, [r7, #5]
 8002612:	f043 031e 	orr.w	r3, r3, #30
 8002616:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002618:	797b      	ldrb	r3, [r7, #5]
 800261a:	461a      	mov	r2, r3
 800261c:	2117      	movs	r1, #23
 800261e:	2082      	movs	r0, #130	@ 0x82
 8002620:	f000 f9b0 	bl	8002984 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002624:	229a      	movs	r2, #154	@ 0x9a
 8002626:	2141      	movs	r1, #65	@ 0x41
 8002628:	2082      	movs	r0, #130	@ 0x82
 800262a:	f000 f9ab 	bl	8002984 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800262e:	2201      	movs	r2, #1
 8002630:	214a      	movs	r1, #74	@ 0x4a
 8002632:	2082      	movs	r0, #130	@ 0x82
 8002634:	f000 f9a6 	bl	8002984 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002638:	2201      	movs	r2, #1
 800263a:	214b      	movs	r1, #75	@ 0x4b
 800263c:	2082      	movs	r0, #130	@ 0x82
 800263e:	f000 f9a1 	bl	8002984 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002642:	2200      	movs	r2, #0
 8002644:	214b      	movs	r1, #75	@ 0x4b
 8002646:	2082      	movs	r0, #130	@ 0x82
 8002648:	f000 f99c 	bl	8002984 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800264c:	2201      	movs	r2, #1
 800264e:	2156      	movs	r1, #86	@ 0x56
 8002650:	2082      	movs	r0, #130	@ 0x82
 8002652:	f000 f997 	bl	8002984 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002656:	2201      	movs	r2, #1
 8002658:	2158      	movs	r1, #88	@ 0x58
 800265a:	2082      	movs	r0, #130	@ 0x82
 800265c:	f000 f992 	bl	8002984 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002660:	2203      	movs	r2, #3
 8002662:	2140      	movs	r1, #64	@ 0x40
 8002664:	2082      	movs	r0, #130	@ 0x82
 8002666:	f000 f98d 	bl	8002984 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800266a:	22ff      	movs	r2, #255	@ 0xff
 800266c:	210b      	movs	r1, #11
 800266e:	2082      	movs	r0, #130	@ 0x82
 8002670:	f000 f988 	bl	8002984 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002674:	20c8      	movs	r0, #200	@ 0xc8
 8002676:	f000 fbff 	bl	8002e78 <HAL_Delay>

    return STMPE811_State_Ok;
 800267a:	2302      	movs	r3, #2

}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800268e:	f107 020f 	add.w	r2, r7, #15
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4619      	mov	r1, r3
 8002696:	2082      	movs	r0, #130	@ 0x82
 8002698:	f000 f99e 	bl	80029d8 <I2C3_Read>

    return readData;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	791a      	ldrb	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 80026b6:	2040      	movs	r0, #64	@ 0x40
 80026b8:	f7ff ffe4 	bl	8002684 <STMPE811_Read>
 80026bc:	4603      	mov	r3, r0
 80026be:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 80026c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0e      	blt.n	80026e6 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80026ce:	2201      	movs	r2, #1
 80026d0:	214b      	movs	r1, #75	@ 0x4b
 80026d2:	2082      	movs	r0, #130	@ 0x82
 80026d4:	f000 f956 	bl	8002984 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80026d8:	2200      	movs	r2, #0
 80026da:	214b      	movs	r1, #75	@ 0x4b
 80026dc:	2082      	movs	r0, #130	@ 0x82
 80026de:	f000 f951 	bl	8002984 <I2C3_Write>

        return STMPE811_State_Released;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0a7      	b.n	8002836 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	799b      	ldrb	r3, [r3, #6]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d117      	bne.n	800271e <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f9b8 	bl	8002a68 <TM_STMPE811_ReadX>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	885b      	ldrh	r3, [r3, #2]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fa0b 	bl	8002b24 <TM_STMPE811_ReadY>
 800270e:	4603      	mov	r3, r0
 8002710:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002714:	3301      	adds	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	805a      	strh	r2, [r3, #2]
 800271c:	e048      	b.n	80027b0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	799b      	ldrb	r3, [r3, #6]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d112      	bne.n	800274c <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f99c 	bl	8002a68 <TM_STMPE811_ReadX>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	885b      	ldrh	r3, [r3, #2]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f9f1 	bl	8002b24 <TM_STMPE811_ReadY>
 8002742:	4603      	mov	r3, r0
 8002744:	461a      	mov	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	805a      	strh	r2, [r3, #2]
 800274a:	e031      	b.n	80027b0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	799b      	ldrb	r3, [r3, #6]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d115      	bne.n	8002780 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	885b      	ldrh	r3, [r3, #2]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 f985 	bl	8002a68 <TM_STMPE811_ReadX>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f9da 	bl	8002b24 <TM_STMPE811_ReadY>
 8002770:	4603      	mov	r3, r0
 8002772:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002776:	3301      	adds	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	e017      	b.n	80027b0 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	799b      	ldrb	r3, [r3, #6]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d113      	bne.n	80027b0 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f96b 	bl	8002a68 <TM_STMPE811_ReadX>
 8002792:	4603      	mov	r3, r0
 8002794:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f9be 	bl	8002b24 <TM_STMPE811_ReadY>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80027b0:	2201      	movs	r2, #1
 80027b2:	214b      	movs	r1, #75	@ 0x4b
 80027b4:	2082      	movs	r0, #130	@ 0x82
 80027b6:	f000 f8e5 	bl	8002984 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80027ba:	2200      	movs	r2, #0
 80027bc:	214b      	movs	r1, #75	@ 0x4b
 80027be:	2082      	movs	r0, #130	@ 0x82
 80027c0:	f000 f8e0 	bl	8002984 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	799b      	ldrb	r3, [r3, #6]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <STMPE811_ReadTouch+0x12e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	799b      	ldrb	r3, [r3, #6]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d115      	bne.n	8002800 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d027      	beq.n	800282c <STMPE811_ReadTouch+0x186>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	2bee      	cmp	r3, #238	@ 0xee
 80027e2:	d823      	bhi.n	800282c <STMPE811_ReadTouch+0x186>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	885b      	ldrh	r3, [r3, #2]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01f      	beq.n	800282c <STMPE811_ReadTouch+0x186>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	885b      	ldrh	r3, [r3, #2]
 80027f0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80027f4:	d81a      	bhi.n	800282c <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e01a      	b.n	8002836 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <STMPE811_ReadTouch+0x188>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002810:	d80d      	bhi.n	800282e <STMPE811_ReadTouch+0x188>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	885b      	ldrh	r3, [r3, #2]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <STMPE811_ReadTouch+0x188>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	885b      	ldrh	r3, [r3, #2]
 800281e:	2bee      	cmp	r3, #238	@ 0xee
 8002820:	d805      	bhi.n	800282e <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002828:	2300      	movs	r3, #0
 800282a:	e004      	b.n	8002836 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800282c:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20025c04 	.word	0x20025c04

08002860 <I2C3_Init>:

static void I2C3_Init()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <I2C3_Init+0x6c>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <I2C3_Init+0x6c>)
 8002870:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002874:	6413      	str	r3, [r2, #64]	@ 0x40
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <I2C3_Init+0x6c>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <I2C3_Init+0x70>)
 8002884:	4a13      	ldr	r2, [pc, #76]	@ (80028d4 <I2C3_Init+0x74>)
 8002886:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <I2C3_Init+0x70>)
 800288a:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <I2C3_Init+0x78>)
 800288c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <I2C3_Init+0x70>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002894:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <I2C3_Init+0x70>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <I2C3_Init+0x70>)
 800289c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028a0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80028a2:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <I2C3_Init+0x70>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <I2C3_Init+0x70>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80028ae:	4808      	ldr	r0, [pc, #32]	@ (80028d0 <I2C3_Init+0x70>)
 80028b0:	f000 ff0e 	bl	80036d0 <HAL_I2C_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <I2C3_Init+0x5e>
    }
    return;
 80028c2:	bf00      	nop
}
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	20025bb0 	.word	0x20025bb0
 80028d4:	40005c00 	.word	0x40005c00
 80028d8:	000186a0 	.word	0x000186a0

080028dc <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <I2C3_MspInit+0x9c>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002978 <I2C3_MspInit+0x9c>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6313      	str	r3, [r2, #48]	@ 0x30
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <I2C3_MspInit+0x9c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <I2C3_MspInit+0x9c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a18      	ldr	r2, [pc, #96]	@ (8002978 <I2C3_MspInit+0x9c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <I2C3_MspInit+0x9c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800292a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800292e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002930:	2312      	movs	r3, #18
 8002932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800293c:	2304      	movs	r3, #4
 800293e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	4619      	mov	r1, r3
 8002946:	480d      	ldr	r0, [pc, #52]	@ (800297c <I2C3_MspInit+0xa0>)
 8002948:	f000 fbcc 	bl	80030e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800294c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002950:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002952:	2312      	movs	r3, #18
 8002954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800295e:	2304      	movs	r3, #4
 8002960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	4619      	mov	r1, r3
 8002968:	4805      	ldr	r0, [pc, #20]	@ (8002980 <I2C3_MspInit+0xa4>)
 800296a:	f000 fbbb 	bl	80030e4 <HAL_GPIO_Init>
    
}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40020800 	.word	0x40020800
 8002980:	40020000 	.word	0x40020000

08002984 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af04      	add	r7, sp, #16
 800298a:	4603      	mov	r3, r0
 800298c:	80fb      	strh	r3, [r7, #6]
 800298e:	460b      	mov	r3, r1
 8002990:	717b      	strb	r3, [r7, #5]
 8002992:	4613      	mov	r3, r2
 8002994:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002996:	793b      	ldrb	r3, [r7, #4]
 8002998:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800299a:	797b      	ldrb	r3, [r7, #5]
 800299c:	b29a      	uxth	r2, r3
 800299e:	88f9      	ldrh	r1, [r7, #6]
 80029a0:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <I2C3_Write+0x48>)
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	2301      	movs	r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	f107 030f 	add.w	r3, r7, #15
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	4807      	ldr	r0, [pc, #28]	@ (80029d0 <I2C3_Write+0x4c>)
 80029b2:	f000 ffd1 	bl	8003958 <HAL_I2C_Mem_Write>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <I2C3_Write+0x50>)
 80029bc:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80029be:	f7ff ff3f 	bl	8002840 <verifyHAL_I2C_IS_OKAY>
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	0003d090 	.word	0x0003d090
 80029d0:	20025bb0 	.word	0x20025bb0
 80029d4:	20025c04 	.word	0x20025c04

080029d8 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af04      	add	r7, sp, #16
 80029de:	4603      	mov	r3, r0
 80029e0:	603a      	str	r2, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	460b      	mov	r3, r1
 80029e6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	b299      	uxth	r1, r3
 80029ec:	79bb      	ldrb	r3, [r7, #6]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <I2C3_Read+0x40>)
 80029f2:	9302      	str	r3, [sp, #8]
 80029f4:	2301      	movs	r3, #1
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2301      	movs	r3, #1
 80029fe:	4807      	ldr	r0, [pc, #28]	@ (8002a1c <I2C3_Read+0x44>)
 8002a00:	f001 f8a4 	bl	8003b4c <HAL_I2C_Mem_Read>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <I2C3_Read+0x48>)
 8002a0a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002a0c:	f7ff ff18 	bl	8002840 <verifyHAL_I2C_IS_OKAY>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	0003d090 	.word	0x0003d090
 8002a1c:	20025bb0 	.word	0x20025bb0
 8002a20:	20025c04 	.word	0x20025c04

08002a24 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	603a      	str	r2, [r7, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	460b      	mov	r3, r1
 8002a34:	71bb      	strb	r3, [r7, #6]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	b299      	uxth	r1, r3
 8002a3e:	79bb      	ldrb	r3, [r7, #6]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <I2C3_MulitByteRead+0x3c>)
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	88bb      	ldrh	r3, [r7, #4]
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	4804      	ldr	r0, [pc, #16]	@ (8002a64 <I2C3_MulitByteRead+0x40>)
 8002a52:	f001 f87b 	bl	8003b4c <HAL_I2C_Mem_Read>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	0003d090 	.word	0x0003d090
 8002a64:	20025bb0 	.word	0x20025bb0

08002a68 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002a72:	204d      	movs	r0, #77	@ 0x4d
 8002a74:	f7ff fe06 	bl	8002684 <STMPE811_Read>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002a7c:	204e      	movs	r0, #78	@ 0x4e
 8002a7e:	f7ff fe01 	bl	8002684 <STMPE811_Read>
 8002a82:	4603      	mov	r3, r0
 8002a84:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002a86:	7a7b      	ldrb	r3, [r7, #9]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b21a      	sxth	r2, r3
 8002a8c:	7a3b      	ldrb	r3, [r7, #8]
 8002a8e:	b21b      	sxth	r3, r3
 8002a90:	4313      	orrs	r3, r2
 8002a92:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002a94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a98:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	dc06      	bgt.n	8002aae <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	81fb      	strh	r3, [r7, #14]
 8002aac:	e005      	b.n	8002aba <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002aae:	89fb      	ldrh	r3, [r7, #14]
 8002ab0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002ab4:	3308      	adds	r3, #8
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002abe:	4a18      	ldr	r2, [pc, #96]	@ (8002b20 <TM_STMPE811_ReadX+0xb8>)
 8002ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ac4:	441a      	add	r2, r3
 8002ac6:	10d2      	asrs	r2, r2, #3
 8002ac8:	17db      	asrs	r3, r3, #31
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002ace:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ad2:	2bef      	cmp	r3, #239	@ 0xef
 8002ad4:	dd02      	ble.n	8002adc <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002ad6:	23ef      	movs	r3, #239	@ 0xef
 8002ad8:	81fb      	strh	r3, [r7, #14]
 8002ada:	e005      	b.n	8002ae8 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002adc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	da01      	bge.n	8002ae8 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002ae8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	dd05      	ble.n	8002afe <TM_STMPE811_ReadX+0x96>
 8002af2:	89fa      	ldrh	r2, [r7, #14]
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	b21b      	sxth	r3, r3
 8002afc:	e004      	b.n	8002b08 <TM_STMPE811_ReadX+0xa0>
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002b0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	dd01      	ble.n	8002b16 <TM_STMPE811_ReadX+0xae>
        return val;
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	e000      	b.n	8002b18 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002b16:	88fb      	ldrh	r3, [r7, #6]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	88888889 	.word	0x88888889

08002b24 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002b2e:	204f      	movs	r0, #79	@ 0x4f
 8002b30:	f7ff fda8 	bl	8002684 <STMPE811_Read>
 8002b34:	4603      	mov	r3, r0
 8002b36:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002b38:	2050      	movs	r0, #80	@ 0x50
 8002b3a:	f7ff fda3 	bl	8002684 <STMPE811_Read>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002b42:	7a7b      	ldrb	r3, [r7, #9]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	b21a      	sxth	r2, r3
 8002b48:	7a3b      	ldrb	r3, [r7, #8]
 8002b4a:	b21b      	sxth	r3, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b5e:	4a19      	ldr	r2, [pc, #100]	@ (8002bc4 <TM_STMPE811_ReadY+0xa0>)
 8002b60:	fb82 1203 	smull	r1, r2, r2, r3
 8002b64:	1052      	asrs	r2, r2, #1
 8002b66:	17db      	asrs	r3, r3, #31
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002b6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	dc02      	bgt.n	8002b7a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	81fb      	strh	r3, [r7, #14]
 8002b78:	e007      	b.n	8002b8a <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b7e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b82:	db02      	blt.n	8002b8a <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002b84:	f240 133f 	movw	r3, #319	@ 0x13f
 8002b88:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002b8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dd05      	ble.n	8002ba0 <TM_STMPE811_ReadY+0x7c>
 8002b94:	89fa      	ldrh	r2, [r7, #14]
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	e004      	b.n	8002baa <TM_STMPE811_ReadY+0x86>
 8002ba0:	89fb      	ldrh	r3, [r7, #14]
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002bac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	dd01      	ble.n	8002bb8 <TM_STMPE811_ReadY+0x94>
        return val;
 8002bb4:	89fb      	ldrh	r3, [r7, #14]
 8002bb6:	e000      	b.n	8002bba <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2e8ba2e9 	.word	0x2e8ba2e9

08002bc8 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e00a      	b.n	8002bfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002be8:	f3af 8000 	nop.w
 8002bec:	4601      	mov	r1, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	60ba      	str	r2, [r7, #8]
 8002bf4:	b2ca      	uxtb	r2, r1
 8002bf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	dbf0      	blt.n	8002be8 <_read+0x12>
  }

  return len;
 8002c06:	687b      	ldr	r3, [r7, #4]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e009      	b.n	8002c36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	60ba      	str	r2, [r7, #8]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3301      	adds	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	dbf1      	blt.n	8002c22 <_write+0x12>
  }
  return len;
 8002c3e:	687b      	ldr	r3, [r7, #4]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_close>:

int _close(int file)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c70:	605a      	str	r2, [r3, #4]
  return 0;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <_isatty>:

int _isatty(int file)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c88:	2301      	movs	r3, #1
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb8:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <_sbrk+0x5c>)
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <_sbrk+0x60>)
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <_sbrk+0x64>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	@ (8002d18 <_sbrk+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd2:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <_sbrk+0x64>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d207      	bcs.n	8002cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce0:	f003 feba 	bl	8006a58 <__errno>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e009      	b.n	8002d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4a05      	ldr	r2, [pc, #20]	@ (8002d14 <_sbrk+0x64>)
 8002d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20030000 	.word	0x20030000
 8002d10:	00000400 	.word	0x00000400
 8002d14:	20025c08 	.word	0x20025c08
 8002d18:	20025d60 	.word	0x20025d60

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <SystemInit+0x20>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <SystemInit+0x20>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d44:	f7ff ffea 	bl	8002d1c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d48:	480c      	ldr	r0, [pc, #48]	@ (8002d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d4a:	490d      	ldr	r1, [pc, #52]	@ (8002d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d50:	e002      	b.n	8002d58 <LoopCopyDataInit>

08002d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d56:	3304      	adds	r3, #4

08002d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d5c:	d3f9      	bcc.n	8002d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d60:	4c0a      	ldr	r4, [pc, #40]	@ (8002d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d64:	e001      	b.n	8002d6a <LoopFillZerobss>

08002d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d68:	3204      	adds	r2, #4

08002d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d6c:	d3fb      	bcc.n	8002d66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f003 fe79 	bl	8006a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d72:	f7fe fd8a 	bl	800188a <main>
  bx  lr    
 8002d76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002d84:	08008734 	.word	0x08008734
  ldr r2, =_sbss
 8002d88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002d8c:	20025d5c 	.word	0x20025d5c

08002d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <ADC_IRQHandler>
	...

08002d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d98:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd4 <HAL_Init+0x40>)
 8002d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <HAL_Init+0x40>)
 8002daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	@ (8002dd4 <HAL_Init+0x40>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 f94f 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f000 f808 	bl	8002dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc8:	f7ff f924 	bl	8002014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <HAL_InitTick+0x54>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_InitTick+0x58>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f967 	bl	80030ca <HAL_SYSTICK_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00e      	b.n	8002e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d80a      	bhi.n	8002e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 f92f 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e18:	4a06      	ldr	r2, [pc, #24]	@ (8002e34 <HAL_InitTick+0x5c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000010 	.word	0x20000010
 8002e30:	20000018 	.word	0x20000018
 8002e34:	20000014 	.word	0x20000014

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000018 	.word	0x20000018
 8002e5c:	20025c0c 	.word	0x20025c0c

08002e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20025c0c 	.word	0x20025c0c

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000018 	.word	0x20000018

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	@ (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	@ (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	@ (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	@ 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	@ (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff29 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff3e 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff8e 	bl	8002fb4 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5d 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff31 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa2 	bl	800301c <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	@ 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e177      	b.n	80033f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 8166 	bne.w	80033ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	2b02      	cmp	r3, #2
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d017      	beq.n	80031d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d123      	bne.n	8003228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	08da      	lsrs	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3208      	adds	r2, #8
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80c0 	beq.w	80033ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b66      	ldr	r3, [pc, #408]	@ (8003408 <HAL_GPIO_Init+0x324>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	4a65      	ldr	r2, [pc, #404]	@ (8003408 <HAL_GPIO_Init+0x324>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003278:	6453      	str	r3, [r2, #68]	@ 0x44
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_GPIO_Init+0x324>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003286:	4a61      	ldr	r2, [pc, #388]	@ (800340c <HAL_GPIO_Init+0x328>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a58      	ldr	r2, [pc, #352]	@ (8003410 <HAL_GPIO_Init+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d037      	beq.n	8003322 <HAL_GPIO_Init+0x23e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a57      	ldr	r2, [pc, #348]	@ (8003414 <HAL_GPIO_Init+0x330>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_GPIO_Init+0x23a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a56      	ldr	r2, [pc, #344]	@ (8003418 <HAL_GPIO_Init+0x334>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d02b      	beq.n	800331a <HAL_GPIO_Init+0x236>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a55      	ldr	r2, [pc, #340]	@ (800341c <HAL_GPIO_Init+0x338>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d025      	beq.n	8003316 <HAL_GPIO_Init+0x232>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a54      	ldr	r2, [pc, #336]	@ (8003420 <HAL_GPIO_Init+0x33c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <HAL_GPIO_Init+0x22e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a53      	ldr	r2, [pc, #332]	@ (8003424 <HAL_GPIO_Init+0x340>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x22a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a52      	ldr	r2, [pc, #328]	@ (8003428 <HAL_GPIO_Init+0x344>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x226>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a51      	ldr	r2, [pc, #324]	@ (800342c <HAL_GPIO_Init+0x348>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x222>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a50      	ldr	r2, [pc, #320]	@ (8003430 <HAL_GPIO_Init+0x34c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x21e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003434 <HAL_GPIO_Init+0x350>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x21a>
 80032fa:	2309      	movs	r3, #9
 80032fc:	e012      	b.n	8003324 <HAL_GPIO_Init+0x240>
 80032fe:	230a      	movs	r3, #10
 8003300:	e010      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003302:	2308      	movs	r3, #8
 8003304:	e00e      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003306:	2307      	movs	r3, #7
 8003308:	e00c      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800330a:	2306      	movs	r3, #6
 800330c:	e00a      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800330e:	2305      	movs	r3, #5
 8003310:	e008      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003312:	2304      	movs	r3, #4
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003316:	2303      	movs	r3, #3
 8003318:	e004      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800331a:	2302      	movs	r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_Init+0x240>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_GPIO_Init+0x240>
 8003322:	2300      	movs	r3, #0
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	f002 0203 	and.w	r2, r2, #3
 800332a:	0092      	lsls	r2, r2, #2
 800332c:	4093      	lsls	r3, r2
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003334:	4935      	ldr	r1, [pc, #212]	@ (800340c <HAL_GPIO_Init+0x328>)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003342:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <HAL_GPIO_Init+0x354>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003366:	4a34      	ldr	r2, [pc, #208]	@ (8003438 <HAL_GPIO_Init+0x354>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800336c:	4b32      	ldr	r3, [pc, #200]	@ (8003438 <HAL_GPIO_Init+0x354>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003390:	4a29      	ldr	r2, [pc, #164]	@ (8003438 <HAL_GPIO_Init+0x354>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003396:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <HAL_GPIO_Init+0x354>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003438 <HAL_GPIO_Init+0x354>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <HAL_GPIO_Init+0x354>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e4:	4a14      	ldr	r2, [pc, #80]	@ (8003438 <HAL_GPIO_Init+0x354>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	f67f ae84 	bls.w	8003100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800
 800340c:	40013800 	.word	0x40013800
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800
 800341c:	40020c00 	.word	0x40020c00
 8003420:	40021000 	.word	0x40021000
 8003424:	40021400 	.word	0x40021400
 8003428:	40021800 	.word	0x40021800
 800342c:	40021c00 	.word	0x40021c00
 8003430:	40022000 	.word	0x40022000
 8003434:	40022400 	.word	0x40022400
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e0d9      	b.n	800360c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003458:	2201      	movs	r2, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	429a      	cmp	r2, r3
 8003470:	f040 80c9 	bne.w	8003606 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003474:	4a6b      	ldr	r2, [pc, #428]	@ (8003624 <HAL_GPIO_DeInit+0x1e8>)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003480:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4013      	ands	r3, r2
 8003494:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a63      	ldr	r2, [pc, #396]	@ (8003628 <HAL_GPIO_DeInit+0x1ec>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d037      	beq.n	800350e <HAL_GPIO_DeInit+0xd2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a62      	ldr	r2, [pc, #392]	@ (800362c <HAL_GPIO_DeInit+0x1f0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_GPIO_DeInit+0xce>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a61      	ldr	r2, [pc, #388]	@ (8003630 <HAL_GPIO_DeInit+0x1f4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d02b      	beq.n	8003506 <HAL_GPIO_DeInit+0xca>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a60      	ldr	r2, [pc, #384]	@ (8003634 <HAL_GPIO_DeInit+0x1f8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d025      	beq.n	8003502 <HAL_GPIO_DeInit+0xc6>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003638 <HAL_GPIO_DeInit+0x1fc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01f      	beq.n	80034fe <HAL_GPIO_DeInit+0xc2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a5e      	ldr	r2, [pc, #376]	@ (800363c <HAL_GPIO_DeInit+0x200>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d019      	beq.n	80034fa <HAL_GPIO_DeInit+0xbe>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003640 <HAL_GPIO_DeInit+0x204>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_GPIO_DeInit+0xba>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003644 <HAL_GPIO_DeInit+0x208>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00d      	beq.n	80034f2 <HAL_GPIO_DeInit+0xb6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003648 <HAL_GPIO_DeInit+0x20c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <HAL_GPIO_DeInit+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a5a      	ldr	r2, [pc, #360]	@ (800364c <HAL_GPIO_DeInit+0x210>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_GPIO_DeInit+0xae>
 80034e6:	2309      	movs	r3, #9
 80034e8:	e012      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 80034ea:	230a      	movs	r3, #10
 80034ec:	e010      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 80034ee:	2308      	movs	r3, #8
 80034f0:	e00e      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 80034f2:	2307      	movs	r3, #7
 80034f4:	e00c      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 80034f6:	2306      	movs	r3, #6
 80034f8:	e00a      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e008      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 8003502:	2303      	movs	r3, #3
 8003504:	e004      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 8003506:	2302      	movs	r3, #2
 8003508:	e002      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_GPIO_DeInit+0xd4>
 800350e:	2300      	movs	r3, #0
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	f002 0203 	and.w	r2, r2, #3
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	4093      	lsls	r3, r2
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d132      	bne.n	8003586 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003520:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_GPIO_DeInit+0x214>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	4949      	ldr	r1, [pc, #292]	@ (8003650 <HAL_GPIO_DeInit+0x214>)
 800352a:	4013      	ands	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800352e:	4b48      	ldr	r3, [pc, #288]	@ (8003650 <HAL_GPIO_DeInit+0x214>)
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	43db      	mvns	r3, r3
 8003536:	4946      	ldr	r1, [pc, #280]	@ (8003650 <HAL_GPIO_DeInit+0x214>)
 8003538:	4013      	ands	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800353c:	4b44      	ldr	r3, [pc, #272]	@ (8003650 <HAL_GPIO_DeInit+0x214>)
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43db      	mvns	r3, r3
 8003544:	4942      	ldr	r1, [pc, #264]	@ (8003650 <HAL_GPIO_DeInit+0x214>)
 8003546:	4013      	ands	r3, r2
 8003548:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800354a:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <HAL_GPIO_DeInit+0x214>)
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	493f      	ldr	r1, [pc, #252]	@ (8003650 <HAL_GPIO_DeInit+0x214>)
 8003554:	4013      	ands	r3, r2
 8003556:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	220f      	movs	r2, #15
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003568:	4a2e      	ldr	r2, [pc, #184]	@ (8003624 <HAL_GPIO_DeInit+0x1e8>)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	3302      	adds	r3, #2
 8003570:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	43da      	mvns	r2, r3
 8003578:	482a      	ldr	r0, [pc, #168]	@ (8003624 <HAL_GPIO_DeInit+0x1e8>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	400a      	ands	r2, r1
 8003580:	3302      	adds	r3, #2
 8003582:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	2103      	movs	r1, #3
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	401a      	ands	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	220f      	movs	r2, #15
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	08d2      	lsrs	r2, r2, #3
 80035bc:	4019      	ands	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3208      	adds	r2, #8
 80035c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2103      	movs	r1, #3
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	401a      	ands	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	2101      	movs	r1, #1
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	401a      	ands	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2103      	movs	r1, #3
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	401a      	ands	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3301      	adds	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b0f      	cmp	r3, #15
 8003610:	f67f af22 	bls.w	8003458 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40013800 	.word	0x40013800
 8003628:	40020000 	.word	0x40020000
 800362c:	40020400 	.word	0x40020400
 8003630:	40020800 	.word	0x40020800
 8003634:	40020c00 	.word	0x40020c00
 8003638:	40021000 	.word	0x40021000
 800363c:	40021400 	.word	0x40021400
 8003640:	40021800 	.word	0x40021800
 8003644:	40021c00 	.word	0x40021c00
 8003648:	40022000 	.word	0x40022000
 800364c:	40022400 	.word	0x40022400
 8003650:	40013c00 	.word	0x40013c00

08003654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003670:	e003      	b.n	800367a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	041a      	lsls	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	619a      	str	r2, [r3, #24]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003692:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800369e:	4a05      	ldr	r2, [pc, #20]	@ (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f806 	bl	80036b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40013c00 	.word	0x40013c00

080036b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e12b      	b.n	800393a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fcb4 	bl	8002064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	@ 0x24
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003734:	f001 ff82 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8003738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4a81      	ldr	r2, [pc, #516]	@ (8003944 <HAL_I2C_Init+0x274>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d807      	bhi.n	8003754 <HAL_I2C_Init+0x84>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a80      	ldr	r2, [pc, #512]	@ (8003948 <HAL_I2C_Init+0x278>)
 8003748:	4293      	cmp	r3, r2
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e006      	b.n	8003762 <HAL_I2C_Init+0x92>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a7d      	ldr	r2, [pc, #500]	@ (800394c <HAL_I2C_Init+0x27c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	bf94      	ite	ls
 800375c:	2301      	movls	r3, #1
 800375e:	2300      	movhi	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0e7      	b.n	800393a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a78      	ldr	r2, [pc, #480]	@ (8003950 <HAL_I2C_Init+0x280>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	0c9b      	lsrs	r3, r3, #18
 8003774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a6a      	ldr	r2, [pc, #424]	@ (8003944 <HAL_I2C_Init+0x274>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d802      	bhi.n	80037a4 <HAL_I2C_Init+0xd4>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3301      	adds	r3, #1
 80037a2:	e009      	b.n	80037b8 <HAL_I2C_Init+0xe8>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	4a69      	ldr	r2, [pc, #420]	@ (8003954 <HAL_I2C_Init+0x284>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	099b      	lsrs	r3, r3, #6
 80037b6:	3301      	adds	r3, #1
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	430b      	orrs	r3, r1
 80037be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	495c      	ldr	r1, [pc, #368]	@ (8003944 <HAL_I2C_Init+0x274>)
 80037d4:	428b      	cmp	r3, r1
 80037d6:	d819      	bhi.n	800380c <HAL_I2C_Init+0x13c>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e59      	subs	r1, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e6:	1c59      	adds	r1, r3, #1
 80037e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037ec:	400b      	ands	r3, r1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_I2C_Init+0x138>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1e59      	subs	r1, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003800:	3301      	adds	r3, #1
 8003802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003806:	e051      	b.n	80038ac <HAL_I2C_Init+0x1dc>
 8003808:	2304      	movs	r3, #4
 800380a:	e04f      	b.n	80038ac <HAL_I2C_Init+0x1dc>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d111      	bne.n	8003838 <HAL_I2C_Init+0x168>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1e58      	subs	r0, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	440b      	add	r3, r1
 8003822:	fbb0 f3f3 	udiv	r3, r0, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e012      	b.n	800385e <HAL_I2C_Init+0x18e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	0099      	lsls	r1, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Init+0x196>
 8003862:	2301      	movs	r3, #1
 8003864:	e022      	b.n	80038ac <HAL_I2C_Init+0x1dc>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10e      	bne.n	800388c <HAL_I2C_Init+0x1bc>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1e58      	subs	r0, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	440b      	add	r3, r1
 800387c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003880:	3301      	adds	r3, #1
 8003882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800388a:	e00f      	b.n	80038ac <HAL_I2C_Init+0x1dc>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e58      	subs	r0, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	0099      	lsls	r1, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	6809      	ldr	r1, [r1, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6911      	ldr	r1, [r2, #16]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	000186a0 	.word	0x000186a0
 8003948:	001e847f 	.word	0x001e847f
 800394c:	003d08ff 	.word	0x003d08ff
 8003950:	431bde83 	.word	0x431bde83
 8003954:	10624dd3 	.word	0x10624dd3

08003958 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	461a      	mov	r2, r3
 8003966:	4603      	mov	r3, r0
 8003968:	817b      	strh	r3, [r7, #10]
 800396a:	460b      	mov	r3, r1
 800396c:	813b      	strh	r3, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003972:	f7ff fa75 	bl	8002e60 <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b20      	cmp	r3, #32
 8003982:	f040 80d9 	bne.w	8003b38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	2319      	movs	r3, #25
 800398c:	2201      	movs	r2, #1
 800398e:	496d      	ldr	r1, [pc, #436]	@ (8003b44 <HAL_I2C_Mem_Write+0x1ec>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fc8b 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
 800399e:	e0cc      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_I2C_Mem_Write+0x56>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e0c5      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d007      	beq.n	80039d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2221      	movs	r2, #33	@ 0x21
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2240      	movs	r2, #64	@ 0x40
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a4d      	ldr	r2, [pc, #308]	@ (8003b48 <HAL_I2C_Mem_Write+0x1f0>)
 8003a14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a16:	88f8      	ldrh	r0, [r7, #6]
 8003a18:	893a      	ldrh	r2, [r7, #8]
 8003a1a:	8979      	ldrh	r1, [r7, #10]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	4603      	mov	r3, r0
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fac2 	bl	8003fb0 <I2C_RequestMemoryWrite>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d052      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e081      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fd50 	bl	80044e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d107      	bne.n	8003a5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06b      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_I2C_Mem_Write+0x180>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d017      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1aa      	bne.n	8003a36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fd43 	bl	8004570 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d107      	bne.n	8003b08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e016      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	00100002 	.word	0x00100002
 8003b48:	ffff0000 	.word	0xffff0000

08003b4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08c      	sub	sp, #48	@ 0x30
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b66:	f7ff f97b 	bl	8002e60 <HAL_GetTick>
 8003b6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	f040 8214 	bne.w	8003fa2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2319      	movs	r3, #25
 8003b80:	2201      	movs	r2, #1
 8003b82:	497b      	ldr	r1, [pc, #492]	@ (8003d70 <HAL_I2C_Mem_Read+0x224>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fb91 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
 8003b92:	e207      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2C_Mem_Read+0x56>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e200      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d007      	beq.n	8003bc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2222      	movs	r2, #34	@ 0x22
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2240      	movs	r2, #64	@ 0x40
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a5b      	ldr	r2, [pc, #364]	@ (8003d74 <HAL_I2C_Mem_Read+0x228>)
 8003c08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c0a:	88f8      	ldrh	r0, [r7, #6]
 8003c0c:	893a      	ldrh	r2, [r7, #8]
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa5e 	bl	80040dc <I2C_RequestMemoryRead>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e1bc      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d113      	bne.n	8003c5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	623b      	str	r3, [r7, #32]
 8003c46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e190      	b.n	8003f7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d11b      	bne.n	8003c9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e170      	b.n	8003f7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d11b      	bne.n	8003cda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	e150      	b.n	8003f7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cf0:	e144      	b.n	8003f7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	f200 80f1 	bhi.w	8003ede <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d123      	bne.n	8003d4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fc79 	bl	8004600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e145      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d4a:	e117      	b.n	8003f7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d14e      	bne.n	8003df2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4906      	ldr	r1, [pc, #24]	@ (8003d78 <HAL_I2C_Mem_Read+0x22c>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 faa4 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e11a      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
 8003d6e:	bf00      	nop
 8003d70:	00100002 	.word	0x00100002
 8003d74:	ffff0000 	.word	0xffff0000
 8003d78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003df0:	e0c4      	b.n	8003f7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	2200      	movs	r2, #0
 8003dfa:	496c      	ldr	r1, [pc, #432]	@ (8003fac <HAL_I2C_Mem_Read+0x460>)
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fa55 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0cb      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	2200      	movs	r2, #0
 8003e56:	4955      	ldr	r1, [pc, #340]	@ (8003fac <HAL_I2C_Mem_Read+0x460>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fa27 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e09d      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003edc:	e04e      	b.n	8003f7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fb8c 	bl	8004600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e058      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d124      	bne.n	8003f7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d107      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f47f aeb6 	bne.w	8003cf2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	@ 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010004 	.word	0x00010004

08003fb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	817b      	strh	r3, [r7, #10]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	813b      	strh	r3, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f960 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004000:	d103      	bne.n	800400a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004008:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e05f      	b.n	80040ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800401c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	492d      	ldr	r1, [pc, #180]	@ (80040d8 <I2C_RequestMemoryWrite+0x128>)
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f9bb 	bl	80043a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e04c      	b.n	80040ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fa46 	bl	80044e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	2b04      	cmp	r3, #4
 8004060:	d107      	bne.n	8004072 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e02b      	b.n	80040ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800407c:	893b      	ldrh	r3, [r7, #8]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	e021      	b.n	80040cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004088:	893b      	ldrh	r3, [r7, #8]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	b29b      	uxth	r3, r3
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004098:	6a39      	ldr	r1, [r7, #32]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fa20 	bl	80044e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d107      	bne.n	80040be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e005      	b.n	80040ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040c2:	893b      	ldrh	r3, [r7, #8]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	00010002 	.word	0x00010002

080040dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	817b      	strh	r3, [r7, #10]
 80040ee:	460b      	mov	r3, r1
 80040f0:	813b      	strh	r3, [r7, #8]
 80040f2:	4613      	mov	r3, r2
 80040f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004104:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004114:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2200      	movs	r2, #0
 800411e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f8c2 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800413c:	d103      	bne.n	8004146 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e0aa      	b.n	80042a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004158:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	4952      	ldr	r1, [pc, #328]	@ (80042a8 <I2C_RequestMemoryRead+0x1cc>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f91d 	bl	80043a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e097      	b.n	80042a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004188:	6a39      	ldr	r1, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f9a8 	bl	80044e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e076      	b.n	80042a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	611a      	str	r2, [r3, #16]
 80041c2:	e021      	b.n	8004208 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d4:	6a39      	ldr	r1, [r7, #32]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f982 	bl	80044e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d107      	bne.n	80041fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e050      	b.n	80042a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041fe:	893b      	ldrh	r3, [r7, #8]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420a:	6a39      	ldr	r1, [r7, #32]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f967 	bl	80044e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00d      	beq.n	8004234 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	2b04      	cmp	r3, #4
 800421e:	d107      	bne.n	8004230 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e035      	b.n	80042a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004242:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	2200      	movs	r2, #0
 800424c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f82b 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00d      	beq.n	8004278 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426a:	d103      	bne.n	8004274 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e013      	b.n	80042a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004278:	897b      	ldrh	r3, [r7, #10]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	6a3a      	ldr	r2, [r7, #32]
 800428c:	4906      	ldr	r1, [pc, #24]	@ (80042a8 <I2C_RequestMemoryRead+0x1cc>)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f886 	bl	80043a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	00010002 	.word	0x00010002

080042ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042bc:	e048      	b.n	8004350 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d044      	beq.n	8004350 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fe fdcb 	bl	8002e60 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d139      	bne.n	8004350 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10d      	bne.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	e00c      	b.n	800431c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	43da      	mvns	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4013      	ands	r3, r2
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	429a      	cmp	r2, r3
 8004320:	d116      	bne.n	8004350 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e023      	b.n	8004398 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d10d      	bne.n	8004376 <I2C_WaitOnFlagUntilTimeout+0xca>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	43da      	mvns	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	e00c      	b.n	8004390 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	43da      	mvns	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4013      	ands	r3, r2
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	429a      	cmp	r2, r3
 8004394:	d093      	beq.n	80042be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ae:	e071      	b.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043be:	d123      	bne.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0204 	orr.w	r2, r3, #4
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e067      	b.n	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d041      	beq.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004410:	f7fe fd26 	bl	8002e60 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d136      	bne.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10c      	bne.n	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	43da      	mvns	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	bf14      	ite	ne
 8004442:	2301      	movne	r3, #1
 8004444:	2300      	moveq	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	e00b      	b.n	8004462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	43da      	mvns	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e021      	b.n	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d10c      	bne.n	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	43da      	mvns	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4013      	ands	r3, r2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e00b      	b.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	43da      	mvns	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4013      	ands	r3, r2
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f af6d 	bne.w	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ec:	e034      	b.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f8e3 	bl	80046ba <I2C_IsAcknowledgeFailed>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e034      	b.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d028      	beq.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004506:	f7fe fcab 	bl	8002e60 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	d302      	bcc.n	800451c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11d      	bne.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004526:	2b80      	cmp	r3, #128	@ 0x80
 8004528:	d016      	beq.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	f043 0220 	orr.w	r2, r3, #32
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e007      	b.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b80      	cmp	r3, #128	@ 0x80
 8004564:	d1c3      	bne.n	80044ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800457c:	e034      	b.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f89b 	bl	80046ba <I2C_IsAcknowledgeFailed>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e034      	b.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d028      	beq.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7fe fc63 	bl	8002e60 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d11d      	bne.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d016      	beq.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e007      	b.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d1c3      	bne.n	800457e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800460c:	e049      	b.n	80046a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b10      	cmp	r3, #16
 800461a:	d119      	bne.n	8004650 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0210 	mvn.w	r2, #16
 8004624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e030      	b.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004650:	f7fe fc06 	bl	8002e60 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	429a      	cmp	r2, r3
 800465e:	d302      	bcc.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11d      	bne.n	80046a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d016      	beq.n	80046a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e007      	b.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d1ae      	bne.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d0:	d11b      	bne.n	800470a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	f043 0204 	orr.w	r2, r3, #4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	d129      	bne.n	8004782 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2224      	movs	r2, #36	@ 0x24
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0210 	bic.w	r2, r2, #16
 8004754:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d12a      	bne.n	8004800 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2224      	movs	r2, #36	@ 0x24
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80047ca:	89fb      	ldrh	r3, [r7, #14]
 80047cc:	f023 030f 	bic.w	r3, r3, #15
 80047d0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	4313      	orrs	r3, r2
 80047da:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	89fa      	ldrh	r2, [r7, #14]
 80047e2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
	...

08004810 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0bf      	b.n	80049a2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd fc7e 	bl	8002138 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004852:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6999      	ldr	r1, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004868:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6899      	ldr	r1, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b4a      	ldr	r3, [pc, #296]	@ (80049ac <HAL_LTDC_Init+0x19c>)
 8004884:	400b      	ands	r3, r1
 8004886:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68d9      	ldr	r1, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b3e      	ldr	r3, [pc, #248]	@ (80049ac <HAL_LTDC_Init+0x19c>)
 80048b2:	400b      	ands	r3, r1
 80048b4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68d9      	ldr	r1, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1a      	ldr	r2, [r3, #32]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6919      	ldr	r1, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b33      	ldr	r3, [pc, #204]	@ (80049ac <HAL_LTDC_Init+0x19c>)
 80048e0:	400b      	ands	r3, r1
 80048e2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	041b      	lsls	r3, r3, #16
 80048ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6959      	ldr	r1, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <HAL_LTDC_Init+0x19c>)
 800490e:	400b      	ands	r3, r1
 8004910:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6959      	ldr	r1, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004952:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0206 	orr.w	r2, r2, #6
 800497e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	f000f800 	.word	0xf000f800

080049b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049b0:	b5b0      	push	{r4, r5, r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_LTDC_ConfigLayer+0x1a>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e02c      	b.n	8004a24 <HAL_LTDC_ConfigLayer+0x74>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2134      	movs	r1, #52	@ 0x34
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f811 	bl	8004a2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bdb0      	pop	{r4, r5, r7, pc}

08004a2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	@ 0x24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a48:	4413      	add	r3, r2
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	01db      	lsls	r3, r3, #7
 8004a58:	4413      	add	r3, r2
 8004a5a:	3384      	adds	r3, #132	@ 0x84
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	4611      	mov	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	01d2      	lsls	r2, r2, #7
 8004a68:	440a      	add	r2, r1
 8004a6a:	3284      	adds	r2, #132	@ 0x84
 8004a6c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	01db      	lsls	r3, r3, #7
 8004a90:	440b      	add	r3, r1
 8004a92:	3384      	adds	r3, #132	@ 0x84
 8004a94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aaa:	4413      	add	r3, r2
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	01db      	lsls	r3, r3, #7
 8004aba:	4413      	add	r3, r2
 8004abc:	3384      	adds	r3, #132	@ 0x84
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	01d2      	lsls	r2, r2, #7
 8004aca:	440a      	add	r2, r1
 8004acc:	3284      	adds	r2, #132	@ 0x84
 8004ace:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ad2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ae2:	4413      	add	r3, r2
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4619      	mov	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	01db      	lsls	r3, r3, #7
 8004af0:	440b      	add	r3, r1
 8004af2:	3384      	adds	r3, #132	@ 0x84
 8004af4:	4619      	mov	r1, r3
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	01db      	lsls	r3, r3, #7
 8004b06:	4413      	add	r3, r2
 8004b08:	3384      	adds	r3, #132	@ 0x84
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4611      	mov	r1, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	01d2      	lsls	r2, r2, #7
 8004b16:	440a      	add	r2, r1
 8004b18:	3284      	adds	r2, #132	@ 0x84
 8004b1a:	f023 0307 	bic.w	r3, r3, #7
 8004b1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	01db      	lsls	r3, r3, #7
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3384      	adds	r3, #132	@ 0x84
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	01db      	lsls	r3, r3, #7
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3384      	adds	r3, #132	@ 0x84
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	01db      	lsls	r3, r3, #7
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3384      	adds	r3, #132	@ 0x84
 8004b70:	461a      	mov	r2, r3
 8004b72:	2300      	movs	r3, #0
 8004b74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	01db      	lsls	r3, r3, #7
 8004b90:	440b      	add	r3, r1
 8004b92:	3384      	adds	r3, #132	@ 0x84
 8004b94:	4619      	mov	r1, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	01db      	lsls	r3, r3, #7
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3384      	adds	r3, #132	@ 0x84
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	01d2      	lsls	r2, r2, #7
 8004bb6:	440a      	add	r2, r1
 8004bb8:	3284      	adds	r2, #132	@ 0x84
 8004bba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bbe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	4413      	add	r3, r2
 8004bcc:	3384      	adds	r3, #132	@ 0x84
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	01db      	lsls	r3, r3, #7
 8004be0:	4413      	add	r3, r2
 8004be2:	3384      	adds	r3, #132	@ 0x84
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	4611      	mov	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	01d2      	lsls	r2, r2, #7
 8004bf0:	440a      	add	r2, r1
 8004bf2:	3284      	adds	r2, #132	@ 0x84
 8004bf4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004bf8:	f023 0307 	bic.w	r3, r3, #7
 8004bfc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	69da      	ldr	r2, [r3, #28]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	6809      	ldr	r1, [r1, #0]
 8004c0a:	4608      	mov	r0, r1
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	01c9      	lsls	r1, r1, #7
 8004c10:	4401      	add	r1, r0
 8004c12:	3184      	adds	r1, #132	@ 0x84
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	01db      	lsls	r3, r3, #7
 8004c22:	4413      	add	r3, r2
 8004c24:	3384      	adds	r3, #132	@ 0x84
 8004c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	01db      	lsls	r3, r3, #7
 8004c32:	4413      	add	r3, r2
 8004c34:	3384      	adds	r3, #132	@ 0x84
 8004c36:	461a      	mov	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	01db      	lsls	r3, r3, #7
 8004c46:	4413      	add	r3, r2
 8004c48:	3384      	adds	r3, #132	@ 0x84
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	e01b      	b.n	8004c98 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d102      	bne.n	8004c6e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	e014      	b.n	8004c98 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d00b      	beq.n	8004c8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d007      	beq.n	8004c8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d003      	beq.n	8004c8e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c8a:	2b07      	cmp	r3, #7
 8004c8c:	d102      	bne.n	8004c94 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	e001      	b.n	8004c98 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c94:	2301      	movs	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	01db      	lsls	r3, r3, #7
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3384      	adds	r3, #132	@ 0x84
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	4611      	mov	r1, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	01d2      	lsls	r2, r2, #7
 8004cb2:	440a      	add	r2, r1
 8004cb4:	3284      	adds	r2, #132	@ 0x84
 8004cb6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004cba:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	1acb      	subs	r3, r1, r3
 8004cd2:	69f9      	ldr	r1, [r7, #28]
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cda:	68f9      	ldr	r1, [r7, #12]
 8004cdc:	6809      	ldr	r1, [r1, #0]
 8004cde:	4608      	mov	r0, r1
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	01c9      	lsls	r1, r1, #7
 8004ce4:	4401      	add	r1, r0
 8004ce6:	3184      	adds	r1, #132	@ 0x84
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	01db      	lsls	r3, r3, #7
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3384      	adds	r3, #132	@ 0x84
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4611      	mov	r1, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	01d2      	lsls	r2, r2, #7
 8004d06:	440a      	add	r2, r1
 8004d08:	3284      	adds	r2, #132	@ 0x84
 8004d0a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	01db      	lsls	r3, r3, #7
 8004d1e:	4413      	add	r3, r2
 8004d20:	3384      	adds	r3, #132	@ 0x84
 8004d22:	461a      	mov	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	01db      	lsls	r3, r3, #7
 8004d34:	4413      	add	r3, r2
 8004d36:	3384      	adds	r3, #132	@ 0x84
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	01d2      	lsls	r2, r2, #7
 8004d44:	440a      	add	r2, r1
 8004d46:	3284      	adds	r2, #132	@ 0x84
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	3724      	adds	r7, #36	@ 0x24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e267      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d075      	beq.n	8004e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d7a:	4b88      	ldr	r3, [pc, #544]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d00c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d86:	4b85      	ldr	r3, [pc, #532]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d112      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b82      	ldr	r3, [pc, #520]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d9e:	d10b      	bne.n	8004db8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	4b7e      	ldr	r3, [pc, #504]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05b      	beq.n	8004e64 <HAL_RCC_OscConfig+0x108>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d157      	bne.n	8004e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e242      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc0:	d106      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x74>
 8004dc2:	4b76      	ldr	r3, [pc, #472]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a75      	ldr	r2, [pc, #468]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e01d      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x98>
 8004dda:	4b70      	ldr	r3, [pc, #448]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a6f      	ldr	r2, [pc, #444]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6c      	ldr	r2, [pc, #432]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e00b      	b.n	8004e0c <HAL_RCC_OscConfig+0xb0>
 8004df4:	4b69      	ldr	r3, [pc, #420]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a68      	ldr	r2, [pc, #416]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b66      	ldr	r3, [pc, #408]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a65      	ldr	r2, [pc, #404]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fe f824 	bl	8002e60 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fe f820 	bl	8002e60 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	@ 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e207      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0xc0>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fe f810 	bl	8002e60 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fe f80c 	bl	8002e60 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	@ 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e1f3      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	4b51      	ldr	r3, [pc, #324]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0xe8>
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d063      	beq.n	8004f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e72:	4b4a      	ldr	r3, [pc, #296]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e7e:	4b47      	ldr	r3, [pc, #284]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d11c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b44      	ldr	r3, [pc, #272]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d116      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e96:	4b41      	ldr	r3, [pc, #260]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d001      	beq.n	8004eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e1c7      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	4b3b      	ldr	r3, [pc, #236]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4937      	ldr	r1, [pc, #220]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	e03a      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	4b34      	ldr	r3, [pc, #208]	@ (8004fa0 <HAL_RCC_OscConfig+0x244>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fd ffc5 	bl	8002e60 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fd ffc1 	bl	8002e60 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1a8      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	4b2b      	ldr	r3, [pc, #172]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	4b28      	ldr	r3, [pc, #160]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4925      	ldr	r1, [pc, #148]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0e:	4b24      	ldr	r3, [pc, #144]	@ (8004fa0 <HAL_RCC_OscConfig+0x244>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fd ffa4 	bl	8002e60 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1c:	f7fd ffa0 	bl	8002e60 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e187      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d036      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4e:	4b15      	ldr	r3, [pc, #84]	@ (8004fa4 <HAL_RCC_OscConfig+0x248>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fd ff84 	bl	8002e60 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fd ff80 	bl	8002e60 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e167      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f9c <HAL_RCC_OscConfig+0x240>)
 8004f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x200>
 8004f7a:	e01b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7c:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <HAL_RCC_OscConfig+0x248>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f82:	f7fd ff6d 	bl	8002e60 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	e00e      	b.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7fd ff69 	bl	8002e60 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d907      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e150      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470000 	.word	0x42470000
 8004fa4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	4b88      	ldr	r3, [pc, #544]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1ea      	bne.n	8004f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8097 	beq.w	80050f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b81      	ldr	r3, [pc, #516]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	4a7c      	ldr	r2, [pc, #496]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b77      	ldr	r3, [pc, #476]	@ (80051d0 <HAL_RCC_OscConfig+0x474>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d118      	bne.n	8005030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffe:	4b74      	ldr	r3, [pc, #464]	@ (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a73      	ldr	r2, [pc, #460]	@ (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500a:	f7fd ff29 	bl	8002e60 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fd ff25 	bl	8002e60 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e10c      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	4b6a      	ldr	r3, [pc, #424]	@ (80051d0 <HAL_RCC_OscConfig+0x474>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x2ea>
 8005038:	4b64      	ldr	r3, [pc, #400]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503c:	4a63      	ldr	r2, [pc, #396]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	6713      	str	r3, [r2, #112]	@ 0x70
 8005044:	e01c      	b.n	8005080 <HAL_RCC_OscConfig+0x324>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x30c>
 800504e:	4b5f      	ldr	r3, [pc, #380]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	4a5e      	ldr	r2, [pc, #376]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	6713      	str	r3, [r2, #112]	@ 0x70
 800505a:	4b5c      	ldr	r3, [pc, #368]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505e:	4a5b      	ldr	r2, [pc, #364]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6713      	str	r3, [r2, #112]	@ 0x70
 8005066:	e00b      	b.n	8005080 <HAL_RCC_OscConfig+0x324>
 8005068:	4b58      	ldr	r3, [pc, #352]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800506a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506c:	4a57      	ldr	r2, [pc, #348]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	6713      	str	r3, [r2, #112]	@ 0x70
 8005074:	4b55      	ldr	r3, [pc, #340]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005078:	4a54      	ldr	r2, [pc, #336]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 800507a:	f023 0304 	bic.w	r3, r3, #4
 800507e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d015      	beq.n	80050b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fd feea 	bl	8002e60 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fd fee6 	bl	8002e60 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0cb      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a6:	4b49      	ldr	r3, [pc, #292]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ee      	beq.n	8005090 <HAL_RCC_OscConfig+0x334>
 80050b2:	e014      	b.n	80050de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b4:	f7fd fed4 	bl	8002e60 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050bc:	f7fd fed0 	bl	8002e60 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e0b5      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d2:	4b3e      	ldr	r3, [pc, #248]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1ee      	bne.n	80050bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d105      	bne.n	80050f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e4:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	4a38      	ldr	r2, [pc, #224]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a1 	beq.w	800523c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050fa:	4b34      	ldr	r3, [pc, #208]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b08      	cmp	r3, #8
 8005104:	d05c      	beq.n	80051c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d141      	bne.n	8005192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b31      	ldr	r3, [pc, #196]	@ (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fd fea4 	bl	8002e60 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fd fea0 	bl	8002e60 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e087      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	4b27      	ldr	r3, [pc, #156]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	3b01      	subs	r3, #1
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	061b      	lsls	r3, r3, #24
 800515e:	491b      	ldr	r1, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b1b      	ldr	r3, [pc, #108]	@ (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fd fe79 	bl	8002e60 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005172:	f7fd fe75 	bl	8002e60 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e05c      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005184:	4b11      	ldr	r3, [pc, #68]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x416>
 8005190:	e054      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b10      	ldr	r3, [pc, #64]	@ (80051d4 <HAL_RCC_OscConfig+0x478>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fd fe62 	bl	8002e60 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fd fe5e 	bl	8002e60 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e045      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b2:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <HAL_RCC_OscConfig+0x470>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x444>
 80051be:	e03d      	b.n	800523c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e038      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40007000 	.word	0x40007000
 80051d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005248 <HAL_RCC_OscConfig+0x4ec>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d028      	beq.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d121      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d11a      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005208:	4013      	ands	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800520e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005210:	4293      	cmp	r3, r2
 8005212:	d111      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	3b01      	subs	r3, #1
 8005222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d107      	bne.n	8005238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800

0800524c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0cc      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b68      	ldr	r3, [pc, #416]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d90c      	bls.n	8005288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b65      	ldr	r3, [pc, #404]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b63      	ldr	r3, [pc, #396]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0b8      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d020      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a0:	4b59      	ldr	r3, [pc, #356]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4a58      	ldr	r2, [pc, #352]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b8:	4b53      	ldr	r3, [pc, #332]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a52      	ldr	r2, [pc, #328]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c4:	4b50      	ldr	r3, [pc, #320]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	494d      	ldr	r1, [pc, #308]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d044      	beq.n	800536c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b47      	ldr	r3, [pc, #284]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d119      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d003      	beq.n	800530a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005306:	2b03      	cmp	r3, #3
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530a:	4b3f      	ldr	r3, [pc, #252]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e06f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531a:	4b3b      	ldr	r3, [pc, #236]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e067      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800532a:	4b37      	ldr	r3, [pc, #220]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f023 0203 	bic.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4934      	ldr	r1, [pc, #208]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800533c:	f7fd fd90 	bl	8002e60 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	e00a      	b.n	800535a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005344:	f7fd fd8c 	bl	8002e60 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e04f      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	4b2b      	ldr	r3, [pc, #172]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 020c 	and.w	r2, r3, #12
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	429a      	cmp	r2, r3
 800536a:	d1eb      	bne.n	8005344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800536c:	4b25      	ldr	r3, [pc, #148]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d20c      	bcs.n	8005394 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b20      	ldr	r3, [pc, #128]	@ (8005404 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e032      	b.n	80053fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a0:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4916      	ldr	r1, [pc, #88]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053be:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	490e      	ldr	r1, [pc, #56]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053d2:	f000 f821 	bl	8005418 <HAL_RCC_GetSysClockFreq>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	490a      	ldr	r1, [pc, #40]	@ (800540c <HAL_RCC_ClockConfig+0x1c0>)
 80053e4:	5ccb      	ldrb	r3, [r1, r3]
 80053e6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ea:	4a09      	ldr	r2, [pc, #36]	@ (8005410 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053ee:	4b09      	ldr	r3, [pc, #36]	@ (8005414 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fd fcf0 	bl	8002dd8 <HAL_InitTick>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40023c00 	.word	0x40023c00
 8005408:	40023800 	.word	0x40023800
 800540c:	080086d8 	.word	0x080086d8
 8005410:	20000010 	.word	0x20000010
 8005414:	20000014 	.word	0x20000014

08005418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800541c:	b094      	sub	sp, #80	@ 0x50
 800541e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005430:	4b79      	ldr	r3, [pc, #484]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b08      	cmp	r3, #8
 800543a:	d00d      	beq.n	8005458 <HAL_RCC_GetSysClockFreq+0x40>
 800543c:	2b08      	cmp	r3, #8
 800543e:	f200 80e1 	bhi.w	8005604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_RCC_GetSysClockFreq+0x34>
 8005446:	2b04      	cmp	r3, #4
 8005448:	d003      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0x3a>
 800544a:	e0db      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800544c:	4b73      	ldr	r3, [pc, #460]	@ (800561c <HAL_RCC_GetSysClockFreq+0x204>)
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005450:	e0db      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005452:	4b73      	ldr	r3, [pc, #460]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x208>)
 8005454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005456:	e0d8      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005458:	4b6f      	ldr	r3, [pc, #444]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005460:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005462:	4b6d      	ldr	r3, [pc, #436]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d063      	beq.n	8005536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546e:	4b6a      	ldr	r3, [pc, #424]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	099b      	lsrs	r3, r3, #6
 8005474:	2200      	movs	r2, #0
 8005476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005478:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005480:	633b      	str	r3, [r7, #48]	@ 0x30
 8005482:	2300      	movs	r3, #0
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
 8005486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800548a:	4622      	mov	r2, r4
 800548c:	462b      	mov	r3, r5
 800548e:	f04f 0000 	mov.w	r0, #0
 8005492:	f04f 0100 	mov.w	r1, #0
 8005496:	0159      	lsls	r1, r3, #5
 8005498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800549c:	0150      	lsls	r0, r2, #5
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4621      	mov	r1, r4
 80054a4:	1a51      	subs	r1, r2, r1
 80054a6:	6139      	str	r1, [r7, #16]
 80054a8:	4629      	mov	r1, r5
 80054aa:	eb63 0301 	sbc.w	r3, r3, r1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054bc:	4659      	mov	r1, fp
 80054be:	018b      	lsls	r3, r1, #6
 80054c0:	4651      	mov	r1, sl
 80054c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054c6:	4651      	mov	r1, sl
 80054c8:	018a      	lsls	r2, r1, #6
 80054ca:	4651      	mov	r1, sl
 80054cc:	ebb2 0801 	subs.w	r8, r2, r1
 80054d0:	4659      	mov	r1, fp
 80054d2:	eb63 0901 	sbc.w	r9, r3, r1
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ea:	4690      	mov	r8, r2
 80054ec:	4699      	mov	r9, r3
 80054ee:	4623      	mov	r3, r4
 80054f0:	eb18 0303 	adds.w	r3, r8, r3
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	462b      	mov	r3, r5
 80054f8:	eb49 0303 	adc.w	r3, r9, r3
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800550a:	4629      	mov	r1, r5
 800550c:	024b      	lsls	r3, r1, #9
 800550e:	4621      	mov	r1, r4
 8005510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005514:	4621      	mov	r1, r4
 8005516:	024a      	lsls	r2, r1, #9
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800551e:	2200      	movs	r2, #0
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005528:	f7fa feb2 	bl	8000290 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4613      	mov	r3, r2
 8005532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005534:	e058      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005536:	4b38      	ldr	r3, [pc, #224]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	099b      	lsrs	r3, r3, #6
 800553c:	2200      	movs	r2, #0
 800553e:	4618      	mov	r0, r3
 8005540:	4611      	mov	r1, r2
 8005542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	2300      	movs	r3, #0
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24
 800554c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005550:	4642      	mov	r2, r8
 8005552:	464b      	mov	r3, r9
 8005554:	f04f 0000 	mov.w	r0, #0
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	0159      	lsls	r1, r3, #5
 800555e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005562:	0150      	lsls	r0, r2, #5
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4641      	mov	r1, r8
 800556a:	ebb2 0a01 	subs.w	sl, r2, r1
 800556e:	4649      	mov	r1, r9
 8005570:	eb63 0b01 	sbc.w	fp, r3, r1
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005588:	ebb2 040a 	subs.w	r4, r2, sl
 800558c:	eb63 050b 	sbc.w	r5, r3, fp
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	00eb      	lsls	r3, r5, #3
 800559a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800559e:	00e2      	lsls	r2, r4, #3
 80055a0:	4614      	mov	r4, r2
 80055a2:	461d      	mov	r5, r3
 80055a4:	4643      	mov	r3, r8
 80055a6:	18e3      	adds	r3, r4, r3
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	464b      	mov	r3, r9
 80055ac:	eb45 0303 	adc.w	r3, r5, r3
 80055b0:	607b      	str	r3, [r7, #4]
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055be:	4629      	mov	r1, r5
 80055c0:	028b      	lsls	r3, r1, #10
 80055c2:	4621      	mov	r1, r4
 80055c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055c8:	4621      	mov	r1, r4
 80055ca:	028a      	lsls	r2, r1, #10
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d2:	2200      	movs	r2, #0
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	61fa      	str	r2, [r7, #28]
 80055d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055dc:	f7fa fe58 	bl	8000290 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4613      	mov	r3, r2
 80055e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005618 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	3301      	adds	r3, #1
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005602:	e002      	b.n	800560a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005604:	4b05      	ldr	r3, [pc, #20]	@ (800561c <HAL_RCC_GetSysClockFreq+0x204>)
 8005606:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800560a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800560c:	4618      	mov	r0, r3
 800560e:	3750      	adds	r7, #80	@ 0x50
 8005610:	46bd      	mov	sp, r7
 8005612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	00f42400 	.word	0x00f42400
 8005620:	007a1200 	.word	0x007a1200

08005624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005628:	4b03      	ldr	r3, [pc, #12]	@ (8005638 <HAL_RCC_GetHCLKFreq+0x14>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000010 	.word	0x20000010

0800563c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005640:	f7ff fff0 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005644:	4602      	mov	r2, r0
 8005646:	4b05      	ldr	r3, [pc, #20]	@ (800565c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0a9b      	lsrs	r3, r3, #10
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4903      	ldr	r1, [pc, #12]	@ (8005660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005652:	5ccb      	ldrb	r3, [r1, r3]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	080086e8 	.word	0x080086e8

08005664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005694:	2b00      	cmp	r3, #0
 8005696:	d075      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005698:	4b91      	ldr	r3, [pc, #580]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800569e:	f7fd fbdf 	bl	8002e60 <HAL_GetTick>
 80056a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056a6:	f7fd fbdb 	bl	8002e60 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e189      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056b8:	4b8a      	ldr	r3, [pc, #552]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	019a      	lsls	r2, r3, #6
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	071b      	lsls	r3, r3, #28
 80056dc:	4981      	ldr	r1, [pc, #516]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01f      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056f0:	4b7c      	ldr	r3, [pc, #496]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056f6:	0f1b      	lsrs	r3, r3, #28
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	019a      	lsls	r2, r3, #6
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	061b      	lsls	r3, r3, #24
 800570a:	431a      	orrs	r2, r3
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	071b      	lsls	r3, r3, #28
 8005710:	4974      	ldr	r1, [pc, #464]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005718:	4b72      	ldr	r3, [pc, #456]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800571e:	f023 021f 	bic.w	r2, r3, #31
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	3b01      	subs	r3, #1
 8005728:	496e      	ldr	r1, [pc, #440]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00d      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	019a      	lsls	r2, r3, #6
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	071b      	lsls	r3, r3, #28
 8005750:	4964      	ldr	r1, [pc, #400]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005758:	4b61      	ldr	r3, [pc, #388]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800575e:	f7fd fb7f 	bl	8002e60 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005766:	f7fd fb7b 	bl	8002e60 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e129      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005778:	4b5a      	ldr	r3, [pc, #360]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005798:	2b00      	cmp	r3, #0
 800579a:	d079      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800579c:	4b52      	ldr	r3, [pc, #328]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057a2:	f7fd fb5d 	bl	8002e60 <HAL_GetTick>
 80057a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057aa:	f7fd fb59 	bl	8002e60 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e107      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057bc:	4b49      	ldr	r3, [pc, #292]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c8:	d0ef      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d020      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057d6:	4b43      	ldr	r3, [pc, #268]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057dc:	0f1b      	lsrs	r3, r3, #28
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	019a      	lsls	r2, r3, #6
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	061b      	lsls	r3, r3, #24
 80057f0:	431a      	orrs	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	071b      	lsls	r3, r3, #28
 80057f6:	493b      	ldr	r1, [pc, #236]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057fe:	4b39      	ldr	r3, [pc, #228]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005804:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	3b01      	subs	r3, #1
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	4934      	ldr	r1, [pc, #208]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01e      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005824:	4b2f      	ldr	r3, [pc, #188]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582a:	0e1b      	lsrs	r3, r3, #24
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	019a      	lsls	r2, r3, #6
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	061b      	lsls	r3, r3, #24
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	071b      	lsls	r3, r3, #28
 8005844:	4927      	ldr	r1, [pc, #156]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800584c:	4b25      	ldr	r3, [pc, #148]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005852:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585a:	4922      	ldr	r1, [pc, #136]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005862:	4b21      	ldr	r3, [pc, #132]	@ (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005868:	f7fd fafa 	bl	8002e60 <HAL_GetTick>
 800586c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005870:	f7fd faf6 	bl	8002e60 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e0a4      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005882:	4b18      	ldr	r3, [pc, #96]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800588a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800588e:	d1ef      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 808b 	beq.w	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	4a0f      	ldr	r2, [pc, #60]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80058ae:	4b0d      	ldr	r3, [pc, #52]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058ba:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a0b      	ldr	r2, [pc, #44]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058c6:	f7fd facb 	bl	8002e60 <HAL_GetTick>
 80058ca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80058cc:	e010      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ce:	f7fd fac7 	bl	8002e60 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d909      	bls.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e075      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80058e0:	42470068 	.word	0x42470068
 80058e4:	40023800 	.word	0x40023800
 80058e8:	42470070 	.word	0x42470070
 80058ec:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80058f0:	4b38      	ldr	r3, [pc, #224]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0e8      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058fc:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005904:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d02f      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	429a      	cmp	r2, r3
 8005918:	d028      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800591a:	4b2f      	ldr	r3, [pc, #188]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005922:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005924:	4b2d      	ldr	r3, [pc, #180]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800592a:	4b2c      	ldr	r3, [pc, #176]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005930:	4a29      	ldr	r2, [pc, #164]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005936:	4b28      	ldr	r3, [pc, #160]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d114      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005942:	f7fd fa8d 	bl	8002e60 <HAL_GetTick>
 8005946:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005948:	e00a      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fd fa89 	bl	8002e60 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d901      	bls.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e035      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005960:	4b1d      	ldr	r3, [pc, #116]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ee      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005978:	d10d      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800597a:	4b17      	ldr	r3, [pc, #92]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800598a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800598e:	4912      	ldr	r1, [pc, #72]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005990:	4313      	orrs	r3, r2
 8005992:	608b      	str	r3, [r1, #8]
 8005994:	e005      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005996:	4b10      	ldr	r3, [pc, #64]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	4a0f      	ldr	r2, [pc, #60]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800599c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059a0:	6093      	str	r3, [r2, #8]
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ae:	490a      	ldr	r1, [pc, #40]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d004      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80059c6:	4b06      	ldr	r3, [pc, #24]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80059c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40007000 	.word	0x40007000
 80059d8:	40023800 	.word	0x40023800
 80059dc:	42470e40 	.word	0x42470e40
 80059e0:	424711e0 	.word	0x424711e0

080059e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e01c      	b.n	8005a30 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	795b      	ldrb	r3, [r3, #5]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fc fcbe 	bl	8002388 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0204 	orr.w	r2, r2, #4
 8005a20:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e07b      	b.n	8005b42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d108      	bne.n	8005a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a5a:	d009      	beq.n	8005a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	61da      	str	r2, [r3, #28]
 8005a62:	e005      	b.n	8005a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc fc9e 	bl	80023cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af4:	ea42 0103 	orr.w	r1, r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	f003 0104 	and.w	r1, r3, #4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b16:	f003 0210 	and.w	r2, r3, #16
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e01a      	b.n	8005b92 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b72:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fc fc71 	bl	800245c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b088      	sub	sp, #32
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	603b      	str	r3, [r7, #0]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005baa:	f7fd f959 	bl	8002e60 <HAL_GetTick>
 8005bae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e12a      	b.n	8005e1a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Transmit+0x36>
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e122      	b.n	8005e1a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_SPI_Transmit+0x48>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e11b      	b.n	8005e1a <HAL_SPI_Transmit+0x280>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2203      	movs	r2, #3
 8005bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	88fa      	ldrh	r2, [r7, #6]
 8005c02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c30:	d10f      	bne.n	8005c52 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b40      	cmp	r3, #64	@ 0x40
 8005c5e:	d007      	beq.n	8005c70 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c78:	d152      	bne.n	8005d20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Transmit+0xee>
 8005c82:	8b7b      	ldrh	r3, [r7, #26]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d145      	bne.n	8005d14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8c:	881a      	ldrh	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c98:	1c9a      	adds	r2, r3, #2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cac:	e032      	b.n	8005d14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d112      	bne.n	8005ce2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ccc:	1c9a      	adds	r2, r3, #2
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ce0:	e018      	b.n	8005d14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ce2:	f7fd f8bd 	bl	8002e60 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d803      	bhi.n	8005cfa <HAL_SPI_Transmit+0x160>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d102      	bne.n	8005d00 <HAL_SPI_Transmit+0x166>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d109      	bne.n	8005d14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e082      	b.n	8005e1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1c7      	bne.n	8005cae <HAL_SPI_Transmit+0x114>
 8005d1e:	e053      	b.n	8005dc8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <HAL_SPI_Transmit+0x194>
 8005d28:	8b7b      	ldrh	r3, [r7, #26]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d147      	bne.n	8005dbe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d54:	e033      	b.n	8005dbe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d113      	bne.n	8005d8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	7812      	ldrb	r2, [r2, #0]
 8005d70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d8a:	e018      	b.n	8005dbe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d8c:	f7fd f868 	bl	8002e60 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d803      	bhi.n	8005da4 <HAL_SPI_Transmit+0x20a>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d102      	bne.n	8005daa <HAL_SPI_Transmit+0x210>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e02d      	b.n	8005e1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1c6      	bne.n	8005d56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f8bf 	bl	8005f50 <SPI_EndRxTxTransaction>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
  }
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e30:	b2db      	uxtb	r3, r3
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e50:	f7fd f806 	bl	8002e60 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	1a9b      	subs	r3, r3, r2
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e60:	f7fc fffe 	bl	8002e60 <HAL_GetTick>
 8005e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e66:	4b39      	ldr	r3, [pc, #228]	@ (8005f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	015b      	lsls	r3, r3, #5
 8005e6c:	0d1b      	lsrs	r3, r3, #20
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e76:	e054      	b.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7e:	d050      	beq.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e80:	f7fc ffee 	bl	8002e60 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d902      	bls.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d13d      	bne.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eae:	d111      	bne.n	8005ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eb8:	d004      	beq.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ec2:	d107      	bne.n	8005ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005edc:	d10f      	bne.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e017      	b.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	bf0c      	ite	eq
 8005f32:	2301      	moveq	r3, #1
 8005f34:	2300      	movne	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d19b      	bne.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000010 	.word	0x20000010

08005f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2201      	movs	r2, #1
 8005f64:	2102      	movs	r1, #2
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff ff6a 	bl	8005e40 <SPI_WaitFlagStateUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f76:	f043 0220 	orr.w	r2, r3, #32
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e032      	b.n	8005fe8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f82:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff0 <SPI_EndRxTxTransaction+0xa0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff4 <SPI_EndRxTxTransaction+0xa4>)
 8005f88:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8c:	0d5b      	lsrs	r3, r3, #21
 8005f8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fa0:	d112      	bne.n	8005fc8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2180      	movs	r1, #128	@ 0x80
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff ff47 	bl	8005e40 <SPI_WaitFlagStateUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d016      	beq.n	8005fe6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbc:	f043 0220 	orr.w	r2, r3, #32
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e00f      	b.n	8005fe8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fde:	2b80      	cmp	r3, #128	@ 0x80
 8005fe0:	d0f2      	beq.n	8005fc8 <SPI_EndRxTxTransaction+0x78>
 8005fe2:	e000      	b.n	8005fe6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005fe4:	bf00      	nop
  }

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000010 	.word	0x20000010
 8005ff4:	165e9f81 	.word	0x165e9f81

08005ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e041      	b.n	800608e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc fa3a 	bl	8002498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f000 f8f4 	bl	8006224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_ConfigClockSource+0x1c>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e0b4      	b.n	800621c <HAL_TIM_ConfigClockSource+0x186>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ea:	d03e      	beq.n	800616a <HAL_TIM_ConfigClockSource+0xd4>
 80060ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f0:	f200 8087 	bhi.w	8006202 <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f8:	f000 8086 	beq.w	8006208 <HAL_TIM_ConfigClockSource+0x172>
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006100:	d87f      	bhi.n	8006202 <HAL_TIM_ConfigClockSource+0x16c>
 8006102:	2b70      	cmp	r3, #112	@ 0x70
 8006104:	d01a      	beq.n	800613c <HAL_TIM_ConfigClockSource+0xa6>
 8006106:	2b70      	cmp	r3, #112	@ 0x70
 8006108:	d87b      	bhi.n	8006202 <HAL_TIM_ConfigClockSource+0x16c>
 800610a:	2b60      	cmp	r3, #96	@ 0x60
 800610c:	d050      	beq.n	80061b0 <HAL_TIM_ConfigClockSource+0x11a>
 800610e:	2b60      	cmp	r3, #96	@ 0x60
 8006110:	d877      	bhi.n	8006202 <HAL_TIM_ConfigClockSource+0x16c>
 8006112:	2b50      	cmp	r3, #80	@ 0x50
 8006114:	d03c      	beq.n	8006190 <HAL_TIM_ConfigClockSource+0xfa>
 8006116:	2b50      	cmp	r3, #80	@ 0x50
 8006118:	d873      	bhi.n	8006202 <HAL_TIM_ConfigClockSource+0x16c>
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d058      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0x13a>
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d86f      	bhi.n	8006202 <HAL_TIM_ConfigClockSource+0x16c>
 8006122:	2b30      	cmp	r3, #48	@ 0x30
 8006124:	d064      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0x15a>
 8006126:	2b30      	cmp	r3, #48	@ 0x30
 8006128:	d86b      	bhi.n	8006202 <HAL_TIM_ConfigClockSource+0x16c>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d060      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0x15a>
 800612e:	2b20      	cmp	r3, #32
 8006130:	d867      	bhi.n	8006202 <HAL_TIM_ConfigClockSource+0x16c>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d05c      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0x15a>
 8006136:	2b10      	cmp	r3, #16
 8006138:	d05a      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0x15a>
 800613a:	e062      	b.n	8006202 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800614c:	f000 f990 	bl	8006470 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800615e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	609a      	str	r2, [r3, #8]
      break;
 8006168:	e04f      	b.n	800620a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800617a:	f000 f979 	bl	8006470 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800618c:	609a      	str	r2, [r3, #8]
      break;
 800618e:	e03c      	b.n	800620a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800619c:	461a      	mov	r2, r3
 800619e:	f000 f8ed 	bl	800637c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2150      	movs	r1, #80	@ 0x50
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f946 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 80061ae:	e02c      	b.n	800620a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061bc:	461a      	mov	r2, r3
 80061be:	f000 f90c 	bl	80063da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2160      	movs	r1, #96	@ 0x60
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f936 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 80061ce:	e01c      	b.n	800620a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061dc:	461a      	mov	r2, r3
 80061de:	f000 f8cd 	bl	800637c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2140      	movs	r1, #64	@ 0x40
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 f926 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 80061ee:	e00c      	b.n	800620a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f000 f91d 	bl	800643a <TIM_ITRx_SetConfig>
      break;
 8006200:	e003      	b.n	800620a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	73fb      	strb	r3, [r7, #15]
      break;
 8006206:	e000      	b.n	800620a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006208:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a46      	ldr	r2, [pc, #280]	@ (8006350 <TIM_Base_SetConfig+0x12c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d013      	beq.n	8006264 <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006242:	d00f      	beq.n	8006264 <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a43      	ldr	r2, [pc, #268]	@ (8006354 <TIM_Base_SetConfig+0x130>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00b      	beq.n	8006264 <TIM_Base_SetConfig+0x40>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a42      	ldr	r2, [pc, #264]	@ (8006358 <TIM_Base_SetConfig+0x134>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d007      	beq.n	8006264 <TIM_Base_SetConfig+0x40>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a41      	ldr	r2, [pc, #260]	@ (800635c <TIM_Base_SetConfig+0x138>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0x40>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a40      	ldr	r2, [pc, #256]	@ (8006360 <TIM_Base_SetConfig+0x13c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d108      	bne.n	8006276 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a35      	ldr	r2, [pc, #212]	@ (8006350 <TIM_Base_SetConfig+0x12c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d02b      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006284:	d027      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a32      	ldr	r2, [pc, #200]	@ (8006354 <TIM_Base_SetConfig+0x130>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d023      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a31      	ldr	r2, [pc, #196]	@ (8006358 <TIM_Base_SetConfig+0x134>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01f      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a30      	ldr	r2, [pc, #192]	@ (800635c <TIM_Base_SetConfig+0x138>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d01b      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006360 <TIM_Base_SetConfig+0x13c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d017      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006364 <TIM_Base_SetConfig+0x140>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006368 <TIM_Base_SetConfig+0x144>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00f      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2c      	ldr	r2, [pc, #176]	@ (800636c <TIM_Base_SetConfig+0x148>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00b      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006370 <TIM_Base_SetConfig+0x14c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d007      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006374 <TIM_Base_SetConfig+0x150>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d003      	beq.n	80062d6 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a29      	ldr	r2, [pc, #164]	@ (8006378 <TIM_Base_SetConfig+0x154>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d108      	bne.n	80062e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a10      	ldr	r2, [pc, #64]	@ (8006350 <TIM_Base_SetConfig+0x12c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d003      	beq.n	800631c <TIM_Base_SetConfig+0xf8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a12      	ldr	r2, [pc, #72]	@ (8006360 <TIM_Base_SetConfig+0x13c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d103      	bne.n	8006324 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b01      	cmp	r3, #1
 8006334:	d105      	bne.n	8006342 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f023 0201 	bic.w	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	611a      	str	r2, [r3, #16]
  }
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40010000 	.word	0x40010000
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40010400 	.word	0x40010400
 8006364:	40014000 	.word	0x40014000
 8006368:	40014400 	.word	0x40014400
 800636c:	40014800 	.word	0x40014800
 8006370:	40001800 	.word	0x40001800
 8006374:	40001c00 	.word	0x40001c00
 8006378:	40002000 	.word	0x40002000

0800637c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f023 030a 	bic.w	r3, r3, #10
 80063b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063da:	b480      	push	{r7}
 80063dc:	b087      	sub	sp, #28
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f023 0210 	bic.w	r2, r3, #16
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	031b      	lsls	r3, r3, #12
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006416:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	f043 0307 	orr.w	r3, r3, #7
 800645c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	609a      	str	r2, [r3, #8]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800648a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	021a      	lsls	r2, r3, #8
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	431a      	orrs	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4313      	orrs	r3, r2
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	609a      	str	r2, [r3, #8]
}
 80064a4:	bf00      	nop
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e05a      	b.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a21      	ldr	r2, [pc, #132]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d022      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006514:	d01d      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1d      	ldr	r2, [pc, #116]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d018      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1b      	ldr	r2, [pc, #108]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1a      	ldr	r2, [pc, #104]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00e      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a18      	ldr	r2, [pc, #96]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a17      	ldr	r2, [pc, #92]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d004      	beq.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a15      	ldr	r2, [pc, #84]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d10c      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	4313      	orrs	r3, r2
 8006562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40010000 	.word	0x40010000
 8006590:	40000400 	.word	0x40000400
 8006594:	40000800 	.word	0x40000800
 8006598:	40000c00 	.word	0x40000c00
 800659c:	40010400 	.word	0x40010400
 80065a0:	40014000 	.word	0x40014000
 80065a4:	40001800 	.word	0x40001800

080065a8 <std>:
 80065a8:	2300      	movs	r3, #0
 80065aa:	b510      	push	{r4, lr}
 80065ac:	4604      	mov	r4, r0
 80065ae:	e9c0 3300 	strd	r3, r3, [r0]
 80065b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065b6:	6083      	str	r3, [r0, #8]
 80065b8:	8181      	strh	r1, [r0, #12]
 80065ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80065bc:	81c2      	strh	r2, [r0, #14]
 80065be:	6183      	str	r3, [r0, #24]
 80065c0:	4619      	mov	r1, r3
 80065c2:	2208      	movs	r2, #8
 80065c4:	305c      	adds	r0, #92	@ 0x5c
 80065c6:	f000 f9f9 	bl	80069bc <memset>
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <std+0x58>)
 80065cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80065ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006604 <std+0x5c>)
 80065d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006608 <std+0x60>)
 80065d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065d6:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <std+0x64>)
 80065d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <std+0x68>)
 80065dc:	6224      	str	r4, [r4, #32]
 80065de:	429c      	cmp	r4, r3
 80065e0:	d006      	beq.n	80065f0 <std+0x48>
 80065e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065e6:	4294      	cmp	r4, r2
 80065e8:	d002      	beq.n	80065f0 <std+0x48>
 80065ea:	33d0      	adds	r3, #208	@ 0xd0
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d105      	bne.n	80065fc <std+0x54>
 80065f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f8:	f000 ba58 	b.w	8006aac <__retarget_lock_init_recursive>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	0800680d 	.word	0x0800680d
 8006604:	0800682f 	.word	0x0800682f
 8006608:	08006867 	.word	0x08006867
 800660c:	0800688b 	.word	0x0800688b
 8006610:	20025c10 	.word	0x20025c10

08006614 <stdio_exit_handler>:
 8006614:	4a02      	ldr	r2, [pc, #8]	@ (8006620 <stdio_exit_handler+0xc>)
 8006616:	4903      	ldr	r1, [pc, #12]	@ (8006624 <stdio_exit_handler+0x10>)
 8006618:	4803      	ldr	r0, [pc, #12]	@ (8006628 <stdio_exit_handler+0x14>)
 800661a:	f000 b869 	b.w	80066f0 <_fwalk_sglue>
 800661e:	bf00      	nop
 8006620:	2000001c 	.word	0x2000001c
 8006624:	0800734d 	.word	0x0800734d
 8006628:	2000002c 	.word	0x2000002c

0800662c <cleanup_stdio>:
 800662c:	6841      	ldr	r1, [r0, #4]
 800662e:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <cleanup_stdio+0x34>)
 8006630:	4299      	cmp	r1, r3
 8006632:	b510      	push	{r4, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	d001      	beq.n	800663c <cleanup_stdio+0x10>
 8006638:	f000 fe88 	bl	800734c <_fflush_r>
 800663c:	68a1      	ldr	r1, [r4, #8]
 800663e:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <cleanup_stdio+0x38>)
 8006640:	4299      	cmp	r1, r3
 8006642:	d002      	beq.n	800664a <cleanup_stdio+0x1e>
 8006644:	4620      	mov	r0, r4
 8006646:	f000 fe81 	bl	800734c <_fflush_r>
 800664a:	68e1      	ldr	r1, [r4, #12]
 800664c:	4b06      	ldr	r3, [pc, #24]	@ (8006668 <cleanup_stdio+0x3c>)
 800664e:	4299      	cmp	r1, r3
 8006650:	d004      	beq.n	800665c <cleanup_stdio+0x30>
 8006652:	4620      	mov	r0, r4
 8006654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006658:	f000 be78 	b.w	800734c <_fflush_r>
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	20025c10 	.word	0x20025c10
 8006664:	20025c78 	.word	0x20025c78
 8006668:	20025ce0 	.word	0x20025ce0

0800666c <global_stdio_init.part.0>:
 800666c:	b510      	push	{r4, lr}
 800666e:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <global_stdio_init.part.0+0x30>)
 8006670:	4c0b      	ldr	r4, [pc, #44]	@ (80066a0 <global_stdio_init.part.0+0x34>)
 8006672:	4a0c      	ldr	r2, [pc, #48]	@ (80066a4 <global_stdio_init.part.0+0x38>)
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	4620      	mov	r0, r4
 8006678:	2200      	movs	r2, #0
 800667a:	2104      	movs	r1, #4
 800667c:	f7ff ff94 	bl	80065a8 <std>
 8006680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006684:	2201      	movs	r2, #1
 8006686:	2109      	movs	r1, #9
 8006688:	f7ff ff8e 	bl	80065a8 <std>
 800668c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006690:	2202      	movs	r2, #2
 8006692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006696:	2112      	movs	r1, #18
 8006698:	f7ff bf86 	b.w	80065a8 <std>
 800669c:	20025d48 	.word	0x20025d48
 80066a0:	20025c10 	.word	0x20025c10
 80066a4:	08006615 	.word	0x08006615

080066a8 <__sfp_lock_acquire>:
 80066a8:	4801      	ldr	r0, [pc, #4]	@ (80066b0 <__sfp_lock_acquire+0x8>)
 80066aa:	f000 ba00 	b.w	8006aae <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	20025d51 	.word	0x20025d51

080066b4 <__sfp_lock_release>:
 80066b4:	4801      	ldr	r0, [pc, #4]	@ (80066bc <__sfp_lock_release+0x8>)
 80066b6:	f000 b9fb 	b.w	8006ab0 <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	20025d51 	.word	0x20025d51

080066c0 <__sinit>:
 80066c0:	b510      	push	{r4, lr}
 80066c2:	4604      	mov	r4, r0
 80066c4:	f7ff fff0 	bl	80066a8 <__sfp_lock_acquire>
 80066c8:	6a23      	ldr	r3, [r4, #32]
 80066ca:	b11b      	cbz	r3, 80066d4 <__sinit+0x14>
 80066cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d0:	f7ff bff0 	b.w	80066b4 <__sfp_lock_release>
 80066d4:	4b04      	ldr	r3, [pc, #16]	@ (80066e8 <__sinit+0x28>)
 80066d6:	6223      	str	r3, [r4, #32]
 80066d8:	4b04      	ldr	r3, [pc, #16]	@ (80066ec <__sinit+0x2c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f5      	bne.n	80066cc <__sinit+0xc>
 80066e0:	f7ff ffc4 	bl	800666c <global_stdio_init.part.0>
 80066e4:	e7f2      	b.n	80066cc <__sinit+0xc>
 80066e6:	bf00      	nop
 80066e8:	0800662d 	.word	0x0800662d
 80066ec:	20025d48 	.word	0x20025d48

080066f0 <_fwalk_sglue>:
 80066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f4:	4607      	mov	r7, r0
 80066f6:	4688      	mov	r8, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	2600      	movs	r6, #0
 80066fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006700:	f1b9 0901 	subs.w	r9, r9, #1
 8006704:	d505      	bpl.n	8006712 <_fwalk_sglue+0x22>
 8006706:	6824      	ldr	r4, [r4, #0]
 8006708:	2c00      	cmp	r4, #0
 800670a:	d1f7      	bne.n	80066fc <_fwalk_sglue+0xc>
 800670c:	4630      	mov	r0, r6
 800670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006712:	89ab      	ldrh	r3, [r5, #12]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d907      	bls.n	8006728 <_fwalk_sglue+0x38>
 8006718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800671c:	3301      	adds	r3, #1
 800671e:	d003      	beq.n	8006728 <_fwalk_sglue+0x38>
 8006720:	4629      	mov	r1, r5
 8006722:	4638      	mov	r0, r7
 8006724:	47c0      	blx	r8
 8006726:	4306      	orrs	r6, r0
 8006728:	3568      	adds	r5, #104	@ 0x68
 800672a:	e7e9      	b.n	8006700 <_fwalk_sglue+0x10>

0800672c <iprintf>:
 800672c:	b40f      	push	{r0, r1, r2, r3}
 800672e:	b507      	push	{r0, r1, r2, lr}
 8006730:	4906      	ldr	r1, [pc, #24]	@ (800674c <iprintf+0x20>)
 8006732:	ab04      	add	r3, sp, #16
 8006734:	6808      	ldr	r0, [r1, #0]
 8006736:	f853 2b04 	ldr.w	r2, [r3], #4
 800673a:	6881      	ldr	r1, [r0, #8]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	f000 fadb 	bl	8006cf8 <_vfiprintf_r>
 8006742:	b003      	add	sp, #12
 8006744:	f85d eb04 	ldr.w	lr, [sp], #4
 8006748:	b004      	add	sp, #16
 800674a:	4770      	bx	lr
 800674c:	20000028 	.word	0x20000028

08006750 <_puts_r>:
 8006750:	6a03      	ldr	r3, [r0, #32]
 8006752:	b570      	push	{r4, r5, r6, lr}
 8006754:	6884      	ldr	r4, [r0, #8]
 8006756:	4605      	mov	r5, r0
 8006758:	460e      	mov	r6, r1
 800675a:	b90b      	cbnz	r3, 8006760 <_puts_r+0x10>
 800675c:	f7ff ffb0 	bl	80066c0 <__sinit>
 8006760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006762:	07db      	lsls	r3, r3, #31
 8006764:	d405      	bmi.n	8006772 <_puts_r+0x22>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	0598      	lsls	r0, r3, #22
 800676a:	d402      	bmi.n	8006772 <_puts_r+0x22>
 800676c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800676e:	f000 f99e 	bl	8006aae <__retarget_lock_acquire_recursive>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	0719      	lsls	r1, r3, #28
 8006776:	d502      	bpl.n	800677e <_puts_r+0x2e>
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d135      	bne.n	80067ea <_puts_r+0x9a>
 800677e:	4621      	mov	r1, r4
 8006780:	4628      	mov	r0, r5
 8006782:	f000 f8c5 	bl	8006910 <__swsetup_r>
 8006786:	b380      	cbz	r0, 80067ea <_puts_r+0x9a>
 8006788:	f04f 35ff 	mov.w	r5, #4294967295
 800678c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800678e:	07da      	lsls	r2, r3, #31
 8006790:	d405      	bmi.n	800679e <_puts_r+0x4e>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	059b      	lsls	r3, r3, #22
 8006796:	d402      	bmi.n	800679e <_puts_r+0x4e>
 8006798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800679a:	f000 f989 	bl	8006ab0 <__retarget_lock_release_recursive>
 800679e:	4628      	mov	r0, r5
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	da04      	bge.n	80067b0 <_puts_r+0x60>
 80067a6:	69a2      	ldr	r2, [r4, #24]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	dc17      	bgt.n	80067dc <_puts_r+0x8c>
 80067ac:	290a      	cmp	r1, #10
 80067ae:	d015      	beq.n	80067dc <_puts_r+0x8c>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	7019      	strb	r1, [r3, #0]
 80067b8:	68a3      	ldr	r3, [r4, #8]
 80067ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067be:	3b01      	subs	r3, #1
 80067c0:	60a3      	str	r3, [r4, #8]
 80067c2:	2900      	cmp	r1, #0
 80067c4:	d1ed      	bne.n	80067a2 <_puts_r+0x52>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da11      	bge.n	80067ee <_puts_r+0x9e>
 80067ca:	4622      	mov	r2, r4
 80067cc:	210a      	movs	r1, #10
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f85f 	bl	8006892 <__swbuf_r>
 80067d4:	3001      	adds	r0, #1
 80067d6:	d0d7      	beq.n	8006788 <_puts_r+0x38>
 80067d8:	250a      	movs	r5, #10
 80067da:	e7d7      	b.n	800678c <_puts_r+0x3c>
 80067dc:	4622      	mov	r2, r4
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 f857 	bl	8006892 <__swbuf_r>
 80067e4:	3001      	adds	r0, #1
 80067e6:	d1e7      	bne.n	80067b8 <_puts_r+0x68>
 80067e8:	e7ce      	b.n	8006788 <_puts_r+0x38>
 80067ea:	3e01      	subs	r6, #1
 80067ec:	e7e4      	b.n	80067b8 <_puts_r+0x68>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	6022      	str	r2, [r4, #0]
 80067f4:	220a      	movs	r2, #10
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	e7ee      	b.n	80067d8 <_puts_r+0x88>
	...

080067fc <puts>:
 80067fc:	4b02      	ldr	r3, [pc, #8]	@ (8006808 <puts+0xc>)
 80067fe:	4601      	mov	r1, r0
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f7ff bfa5 	b.w	8006750 <_puts_r>
 8006806:	bf00      	nop
 8006808:	20000028 	.word	0x20000028

0800680c <__sread>:
 800680c:	b510      	push	{r4, lr}
 800680e:	460c      	mov	r4, r1
 8006810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006814:	f000 f8fc 	bl	8006a10 <_read_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	bfab      	itete	ge
 800681c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800681e:	89a3      	ldrhlt	r3, [r4, #12]
 8006820:	181b      	addge	r3, r3, r0
 8006822:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006826:	bfac      	ite	ge
 8006828:	6563      	strge	r3, [r4, #84]	@ 0x54
 800682a:	81a3      	strhlt	r3, [r4, #12]
 800682c:	bd10      	pop	{r4, pc}

0800682e <__swrite>:
 800682e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006832:	461f      	mov	r7, r3
 8006834:	898b      	ldrh	r3, [r1, #12]
 8006836:	05db      	lsls	r3, r3, #23
 8006838:	4605      	mov	r5, r0
 800683a:	460c      	mov	r4, r1
 800683c:	4616      	mov	r6, r2
 800683e:	d505      	bpl.n	800684c <__swrite+0x1e>
 8006840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006844:	2302      	movs	r3, #2
 8006846:	2200      	movs	r2, #0
 8006848:	f000 f8d0 	bl	80069ec <_lseek_r>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006852:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006856:	81a3      	strh	r3, [r4, #12]
 8006858:	4632      	mov	r2, r6
 800685a:	463b      	mov	r3, r7
 800685c:	4628      	mov	r0, r5
 800685e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006862:	f000 b8e7 	b.w	8006a34 <_write_r>

08006866 <__sseek>:
 8006866:	b510      	push	{r4, lr}
 8006868:	460c      	mov	r4, r1
 800686a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686e:	f000 f8bd 	bl	80069ec <_lseek_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	bf15      	itete	ne
 8006878:	6560      	strne	r0, [r4, #84]	@ 0x54
 800687a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800687e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006882:	81a3      	strheq	r3, [r4, #12]
 8006884:	bf18      	it	ne
 8006886:	81a3      	strhne	r3, [r4, #12]
 8006888:	bd10      	pop	{r4, pc}

0800688a <__sclose>:
 800688a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688e:	f000 b89d 	b.w	80069cc <_close_r>

08006892 <__swbuf_r>:
 8006892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006894:	460e      	mov	r6, r1
 8006896:	4614      	mov	r4, r2
 8006898:	4605      	mov	r5, r0
 800689a:	b118      	cbz	r0, 80068a4 <__swbuf_r+0x12>
 800689c:	6a03      	ldr	r3, [r0, #32]
 800689e:	b90b      	cbnz	r3, 80068a4 <__swbuf_r+0x12>
 80068a0:	f7ff ff0e 	bl	80066c0 <__sinit>
 80068a4:	69a3      	ldr	r3, [r4, #24]
 80068a6:	60a3      	str	r3, [r4, #8]
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	071a      	lsls	r2, r3, #28
 80068ac:	d501      	bpl.n	80068b2 <__swbuf_r+0x20>
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	b943      	cbnz	r3, 80068c4 <__swbuf_r+0x32>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f82b 	bl	8006910 <__swsetup_r>
 80068ba:	b118      	cbz	r0, 80068c4 <__swbuf_r+0x32>
 80068bc:	f04f 37ff 	mov.w	r7, #4294967295
 80068c0:	4638      	mov	r0, r7
 80068c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	6922      	ldr	r2, [r4, #16]
 80068c8:	1a98      	subs	r0, r3, r2
 80068ca:	6963      	ldr	r3, [r4, #20]
 80068cc:	b2f6      	uxtb	r6, r6
 80068ce:	4283      	cmp	r3, r0
 80068d0:	4637      	mov	r7, r6
 80068d2:	dc05      	bgt.n	80068e0 <__swbuf_r+0x4e>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 fd38 	bl	800734c <_fflush_r>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d1ed      	bne.n	80068bc <__swbuf_r+0x2a>
 80068e0:	68a3      	ldr	r3, [r4, #8]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	60a3      	str	r3, [r4, #8]
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	6022      	str	r2, [r4, #0]
 80068ec:	701e      	strb	r6, [r3, #0]
 80068ee:	6962      	ldr	r2, [r4, #20]
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d004      	beq.n	8006900 <__swbuf_r+0x6e>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	07db      	lsls	r3, r3, #31
 80068fa:	d5e1      	bpl.n	80068c0 <__swbuf_r+0x2e>
 80068fc:	2e0a      	cmp	r6, #10
 80068fe:	d1df      	bne.n	80068c0 <__swbuf_r+0x2e>
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f000 fd22 	bl	800734c <_fflush_r>
 8006908:	2800      	cmp	r0, #0
 800690a:	d0d9      	beq.n	80068c0 <__swbuf_r+0x2e>
 800690c:	e7d6      	b.n	80068bc <__swbuf_r+0x2a>
	...

08006910 <__swsetup_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4b29      	ldr	r3, [pc, #164]	@ (80069b8 <__swsetup_r+0xa8>)
 8006914:	4605      	mov	r5, r0
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	460c      	mov	r4, r1
 800691a:	b118      	cbz	r0, 8006924 <__swsetup_r+0x14>
 800691c:	6a03      	ldr	r3, [r0, #32]
 800691e:	b90b      	cbnz	r3, 8006924 <__swsetup_r+0x14>
 8006920:	f7ff fece 	bl	80066c0 <__sinit>
 8006924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006928:	0719      	lsls	r1, r3, #28
 800692a:	d422      	bmi.n	8006972 <__swsetup_r+0x62>
 800692c:	06da      	lsls	r2, r3, #27
 800692e:	d407      	bmi.n	8006940 <__swsetup_r+0x30>
 8006930:	2209      	movs	r2, #9
 8006932:	602a      	str	r2, [r5, #0]
 8006934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	e033      	b.n	80069a8 <__swsetup_r+0x98>
 8006940:	0758      	lsls	r0, r3, #29
 8006942:	d512      	bpl.n	800696a <__swsetup_r+0x5a>
 8006944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006946:	b141      	cbz	r1, 800695a <__swsetup_r+0x4a>
 8006948:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800694c:	4299      	cmp	r1, r3
 800694e:	d002      	beq.n	8006956 <__swsetup_r+0x46>
 8006950:	4628      	mov	r0, r5
 8006952:	f000 f8af 	bl	8006ab4 <_free_r>
 8006956:	2300      	movs	r3, #0
 8006958:	6363      	str	r3, [r4, #52]	@ 0x34
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	2300      	movs	r3, #0
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f043 0308 	orr.w	r3, r3, #8
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	b94b      	cbnz	r3, 800698a <__swsetup_r+0x7a>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800697c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006980:	d003      	beq.n	800698a <__swsetup_r+0x7a>
 8006982:	4621      	mov	r1, r4
 8006984:	4628      	mov	r0, r5
 8006986:	f000 fd2f 	bl	80073e8 <__smakebuf_r>
 800698a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698e:	f013 0201 	ands.w	r2, r3, #1
 8006992:	d00a      	beq.n	80069aa <__swsetup_r+0x9a>
 8006994:	2200      	movs	r2, #0
 8006996:	60a2      	str	r2, [r4, #8]
 8006998:	6962      	ldr	r2, [r4, #20]
 800699a:	4252      	negs	r2, r2
 800699c:	61a2      	str	r2, [r4, #24]
 800699e:	6922      	ldr	r2, [r4, #16]
 80069a0:	b942      	cbnz	r2, 80069b4 <__swsetup_r+0xa4>
 80069a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069a6:	d1c5      	bne.n	8006934 <__swsetup_r+0x24>
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	0799      	lsls	r1, r3, #30
 80069ac:	bf58      	it	pl
 80069ae:	6962      	ldrpl	r2, [r4, #20]
 80069b0:	60a2      	str	r2, [r4, #8]
 80069b2:	e7f4      	b.n	800699e <__swsetup_r+0x8e>
 80069b4:	2000      	movs	r0, #0
 80069b6:	e7f7      	b.n	80069a8 <__swsetup_r+0x98>
 80069b8:	20000028 	.word	0x20000028

080069bc <memset>:
 80069bc:	4402      	add	r2, r0
 80069be:	4603      	mov	r3, r0
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d100      	bne.n	80069c6 <memset+0xa>
 80069c4:	4770      	bx	lr
 80069c6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ca:	e7f9      	b.n	80069c0 <memset+0x4>

080069cc <_close_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d06      	ldr	r5, [pc, #24]	@ (80069e8 <_close_r+0x1c>)
 80069d0:	2300      	movs	r3, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	f7fc f936 	bl	8002c48 <_close>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_close_r+0x1a>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_close_r+0x1a>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20025d4c 	.word	0x20025d4c

080069ec <_lseek_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4d07      	ldr	r5, [pc, #28]	@ (8006a0c <_lseek_r+0x20>)
 80069f0:	4604      	mov	r4, r0
 80069f2:	4608      	mov	r0, r1
 80069f4:	4611      	mov	r1, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	602a      	str	r2, [r5, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f7fc f94b 	bl	8002c96 <_lseek>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_lseek_r+0x1e>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_lseek_r+0x1e>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	20025d4c 	.word	0x20025d4c

08006a10 <_read_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d07      	ldr	r5, [pc, #28]	@ (8006a30 <_read_r+0x20>)
 8006a14:	4604      	mov	r4, r0
 8006a16:	4608      	mov	r0, r1
 8006a18:	4611      	mov	r1, r2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	602a      	str	r2, [r5, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f7fc f8d9 	bl	8002bd6 <_read>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d102      	bne.n	8006a2e <_read_r+0x1e>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	b103      	cbz	r3, 8006a2e <_read_r+0x1e>
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
 8006a30:	20025d4c 	.word	0x20025d4c

08006a34 <_write_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d07      	ldr	r5, [pc, #28]	@ (8006a54 <_write_r+0x20>)
 8006a38:	4604      	mov	r4, r0
 8006a3a:	4608      	mov	r0, r1
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	602a      	str	r2, [r5, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f7fc f8e4 	bl	8002c10 <_write>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_write_r+0x1e>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_write_r+0x1e>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	20025d4c 	.word	0x20025d4c

08006a58 <__errno>:
 8006a58:	4b01      	ldr	r3, [pc, #4]	@ (8006a60 <__errno+0x8>)
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20000028 	.word	0x20000028

08006a64 <__libc_init_array>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	4d0d      	ldr	r5, [pc, #52]	@ (8006a9c <__libc_init_array+0x38>)
 8006a68:	4c0d      	ldr	r4, [pc, #52]	@ (8006aa0 <__libc_init_array+0x3c>)
 8006a6a:	1b64      	subs	r4, r4, r5
 8006a6c:	10a4      	asrs	r4, r4, #2
 8006a6e:	2600      	movs	r6, #0
 8006a70:	42a6      	cmp	r6, r4
 8006a72:	d109      	bne.n	8006a88 <__libc_init_array+0x24>
 8006a74:	4d0b      	ldr	r5, [pc, #44]	@ (8006aa4 <__libc_init_array+0x40>)
 8006a76:	4c0c      	ldr	r4, [pc, #48]	@ (8006aa8 <__libc_init_array+0x44>)
 8006a78:	f000 fd24 	bl	80074c4 <_init>
 8006a7c:	1b64      	subs	r4, r4, r5
 8006a7e:	10a4      	asrs	r4, r4, #2
 8006a80:	2600      	movs	r6, #0
 8006a82:	42a6      	cmp	r6, r4
 8006a84:	d105      	bne.n	8006a92 <__libc_init_array+0x2e>
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8c:	4798      	blx	r3
 8006a8e:	3601      	adds	r6, #1
 8006a90:	e7ee      	b.n	8006a70 <__libc_init_array+0xc>
 8006a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a96:	4798      	blx	r3
 8006a98:	3601      	adds	r6, #1
 8006a9a:	e7f2      	b.n	8006a82 <__libc_init_array+0x1e>
 8006a9c:	0800872c 	.word	0x0800872c
 8006aa0:	0800872c 	.word	0x0800872c
 8006aa4:	0800872c 	.word	0x0800872c
 8006aa8:	08008730 	.word	0x08008730

08006aac <__retarget_lock_init_recursive>:
 8006aac:	4770      	bx	lr

08006aae <__retarget_lock_acquire_recursive>:
 8006aae:	4770      	bx	lr

08006ab0 <__retarget_lock_release_recursive>:
 8006ab0:	4770      	bx	lr
	...

08006ab4 <_free_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d041      	beq.n	8006b40 <_free_r+0x8c>
 8006abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac0:	1f0c      	subs	r4, r1, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfb8      	it	lt
 8006ac6:	18e4      	addlt	r4, r4, r3
 8006ac8:	f000 f8e0 	bl	8006c8c <__malloc_lock>
 8006acc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b44 <_free_r+0x90>)
 8006ace:	6813      	ldr	r3, [r2, #0]
 8006ad0:	b933      	cbnz	r3, 8006ae0 <_free_r+0x2c>
 8006ad2:	6063      	str	r3, [r4, #4]
 8006ad4:	6014      	str	r4, [r2, #0]
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006adc:	f000 b8dc 	b.w	8006c98 <__malloc_unlock>
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	d908      	bls.n	8006af6 <_free_r+0x42>
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	1821      	adds	r1, r4, r0
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	bf01      	itttt	eq
 8006aec:	6819      	ldreq	r1, [r3, #0]
 8006aee:	685b      	ldreq	r3, [r3, #4]
 8006af0:	1809      	addeq	r1, r1, r0
 8006af2:	6021      	streq	r1, [r4, #0]
 8006af4:	e7ed      	b.n	8006ad2 <_free_r+0x1e>
 8006af6:	461a      	mov	r2, r3
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	b10b      	cbz	r3, 8006b00 <_free_r+0x4c>
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d9fa      	bls.n	8006af6 <_free_r+0x42>
 8006b00:	6811      	ldr	r1, [r2, #0]
 8006b02:	1850      	adds	r0, r2, r1
 8006b04:	42a0      	cmp	r0, r4
 8006b06:	d10b      	bne.n	8006b20 <_free_r+0x6c>
 8006b08:	6820      	ldr	r0, [r4, #0]
 8006b0a:	4401      	add	r1, r0
 8006b0c:	1850      	adds	r0, r2, r1
 8006b0e:	4283      	cmp	r3, r0
 8006b10:	6011      	str	r1, [r2, #0]
 8006b12:	d1e0      	bne.n	8006ad6 <_free_r+0x22>
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	6053      	str	r3, [r2, #4]
 8006b1a:	4408      	add	r0, r1
 8006b1c:	6010      	str	r0, [r2, #0]
 8006b1e:	e7da      	b.n	8006ad6 <_free_r+0x22>
 8006b20:	d902      	bls.n	8006b28 <_free_r+0x74>
 8006b22:	230c      	movs	r3, #12
 8006b24:	602b      	str	r3, [r5, #0]
 8006b26:	e7d6      	b.n	8006ad6 <_free_r+0x22>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	1821      	adds	r1, r4, r0
 8006b2c:	428b      	cmp	r3, r1
 8006b2e:	bf04      	itt	eq
 8006b30:	6819      	ldreq	r1, [r3, #0]
 8006b32:	685b      	ldreq	r3, [r3, #4]
 8006b34:	6063      	str	r3, [r4, #4]
 8006b36:	bf04      	itt	eq
 8006b38:	1809      	addeq	r1, r1, r0
 8006b3a:	6021      	streq	r1, [r4, #0]
 8006b3c:	6054      	str	r4, [r2, #4]
 8006b3e:	e7ca      	b.n	8006ad6 <_free_r+0x22>
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	20025d58 	.word	0x20025d58

08006b48 <sbrk_aligned>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8006b88 <sbrk_aligned+0x40>)
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	6831      	ldr	r1, [r6, #0]
 8006b50:	4605      	mov	r5, r0
 8006b52:	b911      	cbnz	r1, 8006b5a <sbrk_aligned+0x12>
 8006b54:	f000 fca6 	bl	80074a4 <_sbrk_r>
 8006b58:	6030      	str	r0, [r6, #0]
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f000 fca1 	bl	80074a4 <_sbrk_r>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	d103      	bne.n	8006b6e <sbrk_aligned+0x26>
 8006b66:	f04f 34ff 	mov.w	r4, #4294967295
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}
 8006b6e:	1cc4      	adds	r4, r0, #3
 8006b70:	f024 0403 	bic.w	r4, r4, #3
 8006b74:	42a0      	cmp	r0, r4
 8006b76:	d0f8      	beq.n	8006b6a <sbrk_aligned+0x22>
 8006b78:	1a21      	subs	r1, r4, r0
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 fc92 	bl	80074a4 <_sbrk_r>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d1f2      	bne.n	8006b6a <sbrk_aligned+0x22>
 8006b84:	e7ef      	b.n	8006b66 <sbrk_aligned+0x1e>
 8006b86:	bf00      	nop
 8006b88:	20025d54 	.word	0x20025d54

08006b8c <_malloc_r>:
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	1ccd      	adds	r5, r1, #3
 8006b92:	f025 0503 	bic.w	r5, r5, #3
 8006b96:	3508      	adds	r5, #8
 8006b98:	2d0c      	cmp	r5, #12
 8006b9a:	bf38      	it	cc
 8006b9c:	250c      	movcc	r5, #12
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	db01      	blt.n	8006ba8 <_malloc_r+0x1c>
 8006ba4:	42a9      	cmp	r1, r5
 8006ba6:	d904      	bls.n	8006bb2 <_malloc_r+0x26>
 8006ba8:	230c      	movs	r3, #12
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	2000      	movs	r0, #0
 8006bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c88 <_malloc_r+0xfc>
 8006bb6:	f000 f869 	bl	8006c8c <__malloc_lock>
 8006bba:	f8d8 3000 	ldr.w	r3, [r8]
 8006bbe:	461c      	mov	r4, r3
 8006bc0:	bb44      	cbnz	r4, 8006c14 <_malloc_r+0x88>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7ff ffbf 	bl	8006b48 <sbrk_aligned>
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	4604      	mov	r4, r0
 8006bce:	d158      	bne.n	8006c82 <_malloc_r+0xf6>
 8006bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8006bd4:	4627      	mov	r7, r4
 8006bd6:	2f00      	cmp	r7, #0
 8006bd8:	d143      	bne.n	8006c62 <_malloc_r+0xd6>
 8006bda:	2c00      	cmp	r4, #0
 8006bdc:	d04b      	beq.n	8006c76 <_malloc_r+0xea>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	4639      	mov	r1, r7
 8006be2:	4630      	mov	r0, r6
 8006be4:	eb04 0903 	add.w	r9, r4, r3
 8006be8:	f000 fc5c 	bl	80074a4 <_sbrk_r>
 8006bec:	4581      	cmp	r9, r0
 8006bee:	d142      	bne.n	8006c76 <_malloc_r+0xea>
 8006bf0:	6821      	ldr	r1, [r4, #0]
 8006bf2:	1a6d      	subs	r5, r5, r1
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f7ff ffa6 	bl	8006b48 <sbrk_aligned>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d03a      	beq.n	8006c76 <_malloc_r+0xea>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	442b      	add	r3, r5
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	f8d8 3000 	ldr.w	r3, [r8]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	bb62      	cbnz	r2, 8006c68 <_malloc_r+0xdc>
 8006c0e:	f8c8 7000 	str.w	r7, [r8]
 8006c12:	e00f      	b.n	8006c34 <_malloc_r+0xa8>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	1b52      	subs	r2, r2, r5
 8006c18:	d420      	bmi.n	8006c5c <_malloc_r+0xd0>
 8006c1a:	2a0b      	cmp	r2, #11
 8006c1c:	d917      	bls.n	8006c4e <_malloc_r+0xc2>
 8006c1e:	1961      	adds	r1, r4, r5
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	6025      	str	r5, [r4, #0]
 8006c24:	bf18      	it	ne
 8006c26:	6059      	strne	r1, [r3, #4]
 8006c28:	6863      	ldr	r3, [r4, #4]
 8006c2a:	bf08      	it	eq
 8006c2c:	f8c8 1000 	streq.w	r1, [r8]
 8006c30:	5162      	str	r2, [r4, r5]
 8006c32:	604b      	str	r3, [r1, #4]
 8006c34:	4630      	mov	r0, r6
 8006c36:	f000 f82f 	bl	8006c98 <__malloc_unlock>
 8006c3a:	f104 000b 	add.w	r0, r4, #11
 8006c3e:	1d23      	adds	r3, r4, #4
 8006c40:	f020 0007 	bic.w	r0, r0, #7
 8006c44:	1ac2      	subs	r2, r0, r3
 8006c46:	bf1c      	itt	ne
 8006c48:	1a1b      	subne	r3, r3, r0
 8006c4a:	50a3      	strne	r3, [r4, r2]
 8006c4c:	e7af      	b.n	8006bae <_malloc_r+0x22>
 8006c4e:	6862      	ldr	r2, [r4, #4]
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	bf0c      	ite	eq
 8006c54:	f8c8 2000 	streq.w	r2, [r8]
 8006c58:	605a      	strne	r2, [r3, #4]
 8006c5a:	e7eb      	b.n	8006c34 <_malloc_r+0xa8>
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	6864      	ldr	r4, [r4, #4]
 8006c60:	e7ae      	b.n	8006bc0 <_malloc_r+0x34>
 8006c62:	463c      	mov	r4, r7
 8006c64:	687f      	ldr	r7, [r7, #4]
 8006c66:	e7b6      	b.n	8006bd6 <_malloc_r+0x4a>
 8006c68:	461a      	mov	r2, r3
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	d1fb      	bne.n	8006c68 <_malloc_r+0xdc>
 8006c70:	2300      	movs	r3, #0
 8006c72:	6053      	str	r3, [r2, #4]
 8006c74:	e7de      	b.n	8006c34 <_malloc_r+0xa8>
 8006c76:	230c      	movs	r3, #12
 8006c78:	6033      	str	r3, [r6, #0]
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f000 f80c 	bl	8006c98 <__malloc_unlock>
 8006c80:	e794      	b.n	8006bac <_malloc_r+0x20>
 8006c82:	6005      	str	r5, [r0, #0]
 8006c84:	e7d6      	b.n	8006c34 <_malloc_r+0xa8>
 8006c86:	bf00      	nop
 8006c88:	20025d58 	.word	0x20025d58

08006c8c <__malloc_lock>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	@ (8006c94 <__malloc_lock+0x8>)
 8006c8e:	f7ff bf0e 	b.w	8006aae <__retarget_lock_acquire_recursive>
 8006c92:	bf00      	nop
 8006c94:	20025d50 	.word	0x20025d50

08006c98 <__malloc_unlock>:
 8006c98:	4801      	ldr	r0, [pc, #4]	@ (8006ca0 <__malloc_unlock+0x8>)
 8006c9a:	f7ff bf09 	b.w	8006ab0 <__retarget_lock_release_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	20025d50 	.word	0x20025d50

08006ca4 <__sfputc_r>:
 8006ca4:	6893      	ldr	r3, [r2, #8]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	b410      	push	{r4}
 8006cac:	6093      	str	r3, [r2, #8]
 8006cae:	da08      	bge.n	8006cc2 <__sfputc_r+0x1e>
 8006cb0:	6994      	ldr	r4, [r2, #24]
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	db01      	blt.n	8006cba <__sfputc_r+0x16>
 8006cb6:	290a      	cmp	r1, #10
 8006cb8:	d103      	bne.n	8006cc2 <__sfputc_r+0x1e>
 8006cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cbe:	f7ff bde8 	b.w	8006892 <__swbuf_r>
 8006cc2:	6813      	ldr	r3, [r2, #0]
 8006cc4:	1c58      	adds	r0, r3, #1
 8006cc6:	6010      	str	r0, [r2, #0]
 8006cc8:	7019      	strb	r1, [r3, #0]
 8006cca:	4608      	mov	r0, r1
 8006ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <__sfputs_r>:
 8006cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	460f      	mov	r7, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	18d5      	adds	r5, r2, r3
 8006cdc:	42ac      	cmp	r4, r5
 8006cde:	d101      	bne.n	8006ce4 <__sfputs_r+0x12>
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e007      	b.n	8006cf4 <__sfputs_r+0x22>
 8006ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce8:	463a      	mov	r2, r7
 8006cea:	4630      	mov	r0, r6
 8006cec:	f7ff ffda 	bl	8006ca4 <__sfputc_r>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d1f3      	bne.n	8006cdc <__sfputs_r+0xa>
 8006cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cf8 <_vfiprintf_r>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	b09d      	sub	sp, #116	@ 0x74
 8006d00:	4614      	mov	r4, r2
 8006d02:	4698      	mov	r8, r3
 8006d04:	4606      	mov	r6, r0
 8006d06:	b118      	cbz	r0, 8006d10 <_vfiprintf_r+0x18>
 8006d08:	6a03      	ldr	r3, [r0, #32]
 8006d0a:	b90b      	cbnz	r3, 8006d10 <_vfiprintf_r+0x18>
 8006d0c:	f7ff fcd8 	bl	80066c0 <__sinit>
 8006d10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d12:	07d9      	lsls	r1, r3, #31
 8006d14:	d405      	bmi.n	8006d22 <_vfiprintf_r+0x2a>
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	059a      	lsls	r2, r3, #22
 8006d1a:	d402      	bmi.n	8006d22 <_vfiprintf_r+0x2a>
 8006d1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d1e:	f7ff fec6 	bl	8006aae <__retarget_lock_acquire_recursive>
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	071b      	lsls	r3, r3, #28
 8006d26:	d501      	bpl.n	8006d2c <_vfiprintf_r+0x34>
 8006d28:	692b      	ldr	r3, [r5, #16]
 8006d2a:	b99b      	cbnz	r3, 8006d54 <_vfiprintf_r+0x5c>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f7ff fdee 	bl	8006910 <__swsetup_r>
 8006d34:	b170      	cbz	r0, 8006d54 <_vfiprintf_r+0x5c>
 8006d36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d38:	07dc      	lsls	r4, r3, #31
 8006d3a:	d504      	bpl.n	8006d46 <_vfiprintf_r+0x4e>
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	b01d      	add	sp, #116	@ 0x74
 8006d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d46:	89ab      	ldrh	r3, [r5, #12]
 8006d48:	0598      	lsls	r0, r3, #22
 8006d4a:	d4f7      	bmi.n	8006d3c <_vfiprintf_r+0x44>
 8006d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d4e:	f7ff feaf 	bl	8006ab0 <__retarget_lock_release_recursive>
 8006d52:	e7f3      	b.n	8006d3c <_vfiprintf_r+0x44>
 8006d54:	2300      	movs	r3, #0
 8006d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d58:	2320      	movs	r3, #32
 8006d5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d62:	2330      	movs	r3, #48	@ 0x30
 8006d64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f14 <_vfiprintf_r+0x21c>
 8006d68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d6c:	f04f 0901 	mov.w	r9, #1
 8006d70:	4623      	mov	r3, r4
 8006d72:	469a      	mov	sl, r3
 8006d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d78:	b10a      	cbz	r2, 8006d7e <_vfiprintf_r+0x86>
 8006d7a:	2a25      	cmp	r2, #37	@ 0x25
 8006d7c:	d1f9      	bne.n	8006d72 <_vfiprintf_r+0x7a>
 8006d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d82:	d00b      	beq.n	8006d9c <_vfiprintf_r+0xa4>
 8006d84:	465b      	mov	r3, fp
 8006d86:	4622      	mov	r2, r4
 8006d88:	4629      	mov	r1, r5
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f7ff ffa1 	bl	8006cd2 <__sfputs_r>
 8006d90:	3001      	adds	r0, #1
 8006d92:	f000 80a7 	beq.w	8006ee4 <_vfiprintf_r+0x1ec>
 8006d96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d98:	445a      	add	r2, fp
 8006d9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 809f 	beq.w	8006ee4 <_vfiprintf_r+0x1ec>
 8006da6:	2300      	movs	r3, #0
 8006da8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006db0:	f10a 0a01 	add.w	sl, sl, #1
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	9307      	str	r3, [sp, #28]
 8006db8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dbe:	4654      	mov	r4, sl
 8006dc0:	2205      	movs	r2, #5
 8006dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc6:	4853      	ldr	r0, [pc, #332]	@ (8006f14 <_vfiprintf_r+0x21c>)
 8006dc8:	f7f9 fa12 	bl	80001f0 <memchr>
 8006dcc:	9a04      	ldr	r2, [sp, #16]
 8006dce:	b9d8      	cbnz	r0, 8006e08 <_vfiprintf_r+0x110>
 8006dd0:	06d1      	lsls	r1, r2, #27
 8006dd2:	bf44      	itt	mi
 8006dd4:	2320      	movmi	r3, #32
 8006dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dda:	0713      	lsls	r3, r2, #28
 8006ddc:	bf44      	itt	mi
 8006dde:	232b      	movmi	r3, #43	@ 0x2b
 8006de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006de4:	f89a 3000 	ldrb.w	r3, [sl]
 8006de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dea:	d015      	beq.n	8006e18 <_vfiprintf_r+0x120>
 8006dec:	9a07      	ldr	r2, [sp, #28]
 8006dee:	4654      	mov	r4, sl
 8006df0:	2000      	movs	r0, #0
 8006df2:	f04f 0c0a 	mov.w	ip, #10
 8006df6:	4621      	mov	r1, r4
 8006df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dfc:	3b30      	subs	r3, #48	@ 0x30
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d94b      	bls.n	8006e9a <_vfiprintf_r+0x1a2>
 8006e02:	b1b0      	cbz	r0, 8006e32 <_vfiprintf_r+0x13a>
 8006e04:	9207      	str	r2, [sp, #28]
 8006e06:	e014      	b.n	8006e32 <_vfiprintf_r+0x13a>
 8006e08:	eba0 0308 	sub.w	r3, r0, r8
 8006e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e10:	4313      	orrs	r3, r2
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	46a2      	mov	sl, r4
 8006e16:	e7d2      	b.n	8006dbe <_vfiprintf_r+0xc6>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	1d19      	adds	r1, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	9103      	str	r1, [sp, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	bfbb      	ittet	lt
 8006e24:	425b      	neglt	r3, r3
 8006e26:	f042 0202 	orrlt.w	r2, r2, #2
 8006e2a:	9307      	strge	r3, [sp, #28]
 8006e2c:	9307      	strlt	r3, [sp, #28]
 8006e2e:	bfb8      	it	lt
 8006e30:	9204      	strlt	r2, [sp, #16]
 8006e32:	7823      	ldrb	r3, [r4, #0]
 8006e34:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e36:	d10a      	bne.n	8006e4e <_vfiprintf_r+0x156>
 8006e38:	7863      	ldrb	r3, [r4, #1]
 8006e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e3c:	d132      	bne.n	8006ea4 <_vfiprintf_r+0x1ac>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	1d1a      	adds	r2, r3, #4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	9203      	str	r2, [sp, #12]
 8006e46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e4a:	3402      	adds	r4, #2
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f24 <_vfiprintf_r+0x22c>
 8006e52:	7821      	ldrb	r1, [r4, #0]
 8006e54:	2203      	movs	r2, #3
 8006e56:	4650      	mov	r0, sl
 8006e58:	f7f9 f9ca 	bl	80001f0 <memchr>
 8006e5c:	b138      	cbz	r0, 8006e6e <_vfiprintf_r+0x176>
 8006e5e:	9b04      	ldr	r3, [sp, #16]
 8006e60:	eba0 000a 	sub.w	r0, r0, sl
 8006e64:	2240      	movs	r2, #64	@ 0x40
 8006e66:	4082      	lsls	r2, r0
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	3401      	adds	r4, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e72:	4829      	ldr	r0, [pc, #164]	@ (8006f18 <_vfiprintf_r+0x220>)
 8006e74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e78:	2206      	movs	r2, #6
 8006e7a:	f7f9 f9b9 	bl	80001f0 <memchr>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d03f      	beq.n	8006f02 <_vfiprintf_r+0x20a>
 8006e82:	4b26      	ldr	r3, [pc, #152]	@ (8006f1c <_vfiprintf_r+0x224>)
 8006e84:	bb1b      	cbnz	r3, 8006ece <_vfiprintf_r+0x1d6>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	3307      	adds	r3, #7
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	3308      	adds	r3, #8
 8006e90:	9303      	str	r3, [sp, #12]
 8006e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e94:	443b      	add	r3, r7
 8006e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e98:	e76a      	b.n	8006d70 <_vfiprintf_r+0x78>
 8006e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	e7a8      	b.n	8006df6 <_vfiprintf_r+0xfe>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	3401      	adds	r4, #1
 8006ea8:	9305      	str	r3, [sp, #20]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f04f 0c0a 	mov.w	ip, #10
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb6:	3a30      	subs	r2, #48	@ 0x30
 8006eb8:	2a09      	cmp	r2, #9
 8006eba:	d903      	bls.n	8006ec4 <_vfiprintf_r+0x1cc>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0c6      	beq.n	8006e4e <_vfiprintf_r+0x156>
 8006ec0:	9105      	str	r1, [sp, #20]
 8006ec2:	e7c4      	b.n	8006e4e <_vfiprintf_r+0x156>
 8006ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ec8:	4604      	mov	r4, r0
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e7f0      	b.n	8006eb0 <_vfiprintf_r+0x1b8>
 8006ece:	ab03      	add	r3, sp, #12
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	462a      	mov	r2, r5
 8006ed4:	4b12      	ldr	r3, [pc, #72]	@ (8006f20 <_vfiprintf_r+0x228>)
 8006ed6:	a904      	add	r1, sp, #16
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f3af 8000 	nop.w
 8006ede:	4607      	mov	r7, r0
 8006ee0:	1c78      	adds	r0, r7, #1
 8006ee2:	d1d6      	bne.n	8006e92 <_vfiprintf_r+0x19a>
 8006ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ee6:	07d9      	lsls	r1, r3, #31
 8006ee8:	d405      	bmi.n	8006ef6 <_vfiprintf_r+0x1fe>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	059a      	lsls	r2, r3, #22
 8006eee:	d402      	bmi.n	8006ef6 <_vfiprintf_r+0x1fe>
 8006ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ef2:	f7ff fddd 	bl	8006ab0 <__retarget_lock_release_recursive>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	065b      	lsls	r3, r3, #25
 8006efa:	f53f af1f 	bmi.w	8006d3c <_vfiprintf_r+0x44>
 8006efe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f00:	e71e      	b.n	8006d40 <_vfiprintf_r+0x48>
 8006f02:	ab03      	add	r3, sp, #12
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	462a      	mov	r2, r5
 8006f08:	4b05      	ldr	r3, [pc, #20]	@ (8006f20 <_vfiprintf_r+0x228>)
 8006f0a:	a904      	add	r1, sp, #16
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 f879 	bl	8007004 <_printf_i>
 8006f12:	e7e4      	b.n	8006ede <_vfiprintf_r+0x1e6>
 8006f14:	080086f0 	.word	0x080086f0
 8006f18:	080086fa 	.word	0x080086fa
 8006f1c:	00000000 	.word	0x00000000
 8006f20:	08006cd3 	.word	0x08006cd3
 8006f24:	080086f6 	.word	0x080086f6

08006f28 <_printf_common>:
 8006f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f2c:	4616      	mov	r6, r2
 8006f2e:	4698      	mov	r8, r3
 8006f30:	688a      	ldr	r2, [r1, #8]
 8006f32:	690b      	ldr	r3, [r1, #16]
 8006f34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	bfb8      	it	lt
 8006f3c:	4613      	movlt	r3, r2
 8006f3e:	6033      	str	r3, [r6, #0]
 8006f40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f44:	4607      	mov	r7, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	b10a      	cbz	r2, 8006f4e <_printf_common+0x26>
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	6033      	str	r3, [r6, #0]
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	0699      	lsls	r1, r3, #26
 8006f52:	bf42      	ittt	mi
 8006f54:	6833      	ldrmi	r3, [r6, #0]
 8006f56:	3302      	addmi	r3, #2
 8006f58:	6033      	strmi	r3, [r6, #0]
 8006f5a:	6825      	ldr	r5, [r4, #0]
 8006f5c:	f015 0506 	ands.w	r5, r5, #6
 8006f60:	d106      	bne.n	8006f70 <_printf_common+0x48>
 8006f62:	f104 0a19 	add.w	sl, r4, #25
 8006f66:	68e3      	ldr	r3, [r4, #12]
 8006f68:	6832      	ldr	r2, [r6, #0]
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	42ab      	cmp	r3, r5
 8006f6e:	dc26      	bgt.n	8006fbe <_printf_common+0x96>
 8006f70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	3b00      	subs	r3, #0
 8006f78:	bf18      	it	ne
 8006f7a:	2301      	movne	r3, #1
 8006f7c:	0692      	lsls	r2, r2, #26
 8006f7e:	d42b      	bmi.n	8006fd8 <_printf_common+0xb0>
 8006f80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f84:	4641      	mov	r1, r8
 8006f86:	4638      	mov	r0, r7
 8006f88:	47c8      	blx	r9
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d01e      	beq.n	8006fcc <_printf_common+0xa4>
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	6922      	ldr	r2, [r4, #16]
 8006f92:	f003 0306 	and.w	r3, r3, #6
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	bf02      	ittt	eq
 8006f9a:	68e5      	ldreq	r5, [r4, #12]
 8006f9c:	6833      	ldreq	r3, [r6, #0]
 8006f9e:	1aed      	subeq	r5, r5, r3
 8006fa0:	68a3      	ldr	r3, [r4, #8]
 8006fa2:	bf0c      	ite	eq
 8006fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fa8:	2500      	movne	r5, #0
 8006faa:	4293      	cmp	r3, r2
 8006fac:	bfc4      	itt	gt
 8006fae:	1a9b      	subgt	r3, r3, r2
 8006fb0:	18ed      	addgt	r5, r5, r3
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	341a      	adds	r4, #26
 8006fb6:	42b5      	cmp	r5, r6
 8006fb8:	d11a      	bne.n	8006ff0 <_printf_common+0xc8>
 8006fba:	2000      	movs	r0, #0
 8006fbc:	e008      	b.n	8006fd0 <_printf_common+0xa8>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4652      	mov	r2, sl
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	47c8      	blx	r9
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d103      	bne.n	8006fd4 <_printf_common+0xac>
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	e7c6      	b.n	8006f66 <_printf_common+0x3e>
 8006fd8:	18e1      	adds	r1, r4, r3
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	2030      	movs	r0, #48	@ 0x30
 8006fde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fe2:	4422      	add	r2, r4
 8006fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fe8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fec:	3302      	adds	r3, #2
 8006fee:	e7c7      	b.n	8006f80 <_printf_common+0x58>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	4622      	mov	r2, r4
 8006ff4:	4641      	mov	r1, r8
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	47c8      	blx	r9
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d0e6      	beq.n	8006fcc <_printf_common+0xa4>
 8006ffe:	3601      	adds	r6, #1
 8007000:	e7d9      	b.n	8006fb6 <_printf_common+0x8e>
	...

08007004 <_printf_i>:
 8007004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	7e0f      	ldrb	r7, [r1, #24]
 800700a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800700c:	2f78      	cmp	r7, #120	@ 0x78
 800700e:	4691      	mov	r9, r2
 8007010:	4680      	mov	r8, r0
 8007012:	460c      	mov	r4, r1
 8007014:	469a      	mov	sl, r3
 8007016:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800701a:	d807      	bhi.n	800702c <_printf_i+0x28>
 800701c:	2f62      	cmp	r7, #98	@ 0x62
 800701e:	d80a      	bhi.n	8007036 <_printf_i+0x32>
 8007020:	2f00      	cmp	r7, #0
 8007022:	f000 80d2 	beq.w	80071ca <_printf_i+0x1c6>
 8007026:	2f58      	cmp	r7, #88	@ 0x58
 8007028:	f000 80b9 	beq.w	800719e <_printf_i+0x19a>
 800702c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007030:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007034:	e03a      	b.n	80070ac <_printf_i+0xa8>
 8007036:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800703a:	2b15      	cmp	r3, #21
 800703c:	d8f6      	bhi.n	800702c <_printf_i+0x28>
 800703e:	a101      	add	r1, pc, #4	@ (adr r1, 8007044 <_printf_i+0x40>)
 8007040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007044:	0800709d 	.word	0x0800709d
 8007048:	080070b1 	.word	0x080070b1
 800704c:	0800702d 	.word	0x0800702d
 8007050:	0800702d 	.word	0x0800702d
 8007054:	0800702d 	.word	0x0800702d
 8007058:	0800702d 	.word	0x0800702d
 800705c:	080070b1 	.word	0x080070b1
 8007060:	0800702d 	.word	0x0800702d
 8007064:	0800702d 	.word	0x0800702d
 8007068:	0800702d 	.word	0x0800702d
 800706c:	0800702d 	.word	0x0800702d
 8007070:	080071b1 	.word	0x080071b1
 8007074:	080070db 	.word	0x080070db
 8007078:	0800716b 	.word	0x0800716b
 800707c:	0800702d 	.word	0x0800702d
 8007080:	0800702d 	.word	0x0800702d
 8007084:	080071d3 	.word	0x080071d3
 8007088:	0800702d 	.word	0x0800702d
 800708c:	080070db 	.word	0x080070db
 8007090:	0800702d 	.word	0x0800702d
 8007094:	0800702d 	.word	0x0800702d
 8007098:	08007173 	.word	0x08007173
 800709c:	6833      	ldr	r3, [r6, #0]
 800709e:	1d1a      	adds	r2, r3, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6032      	str	r2, [r6, #0]
 80070a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070ac:	2301      	movs	r3, #1
 80070ae:	e09d      	b.n	80071ec <_printf_i+0x1e8>
 80070b0:	6833      	ldr	r3, [r6, #0]
 80070b2:	6820      	ldr	r0, [r4, #0]
 80070b4:	1d19      	adds	r1, r3, #4
 80070b6:	6031      	str	r1, [r6, #0]
 80070b8:	0606      	lsls	r6, r0, #24
 80070ba:	d501      	bpl.n	80070c0 <_printf_i+0xbc>
 80070bc:	681d      	ldr	r5, [r3, #0]
 80070be:	e003      	b.n	80070c8 <_printf_i+0xc4>
 80070c0:	0645      	lsls	r5, r0, #25
 80070c2:	d5fb      	bpl.n	80070bc <_printf_i+0xb8>
 80070c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	da03      	bge.n	80070d4 <_printf_i+0xd0>
 80070cc:	232d      	movs	r3, #45	@ 0x2d
 80070ce:	426d      	negs	r5, r5
 80070d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070d4:	4859      	ldr	r0, [pc, #356]	@ (800723c <_printf_i+0x238>)
 80070d6:	230a      	movs	r3, #10
 80070d8:	e011      	b.n	80070fe <_printf_i+0xfa>
 80070da:	6821      	ldr	r1, [r4, #0]
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	0608      	lsls	r0, r1, #24
 80070e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80070e4:	d402      	bmi.n	80070ec <_printf_i+0xe8>
 80070e6:	0649      	lsls	r1, r1, #25
 80070e8:	bf48      	it	mi
 80070ea:	b2ad      	uxthmi	r5, r5
 80070ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80070ee:	4853      	ldr	r0, [pc, #332]	@ (800723c <_printf_i+0x238>)
 80070f0:	6033      	str	r3, [r6, #0]
 80070f2:	bf14      	ite	ne
 80070f4:	230a      	movne	r3, #10
 80070f6:	2308      	moveq	r3, #8
 80070f8:	2100      	movs	r1, #0
 80070fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070fe:	6866      	ldr	r6, [r4, #4]
 8007100:	60a6      	str	r6, [r4, #8]
 8007102:	2e00      	cmp	r6, #0
 8007104:	bfa2      	ittt	ge
 8007106:	6821      	ldrge	r1, [r4, #0]
 8007108:	f021 0104 	bicge.w	r1, r1, #4
 800710c:	6021      	strge	r1, [r4, #0]
 800710e:	b90d      	cbnz	r5, 8007114 <_printf_i+0x110>
 8007110:	2e00      	cmp	r6, #0
 8007112:	d04b      	beq.n	80071ac <_printf_i+0x1a8>
 8007114:	4616      	mov	r6, r2
 8007116:	fbb5 f1f3 	udiv	r1, r5, r3
 800711a:	fb03 5711 	mls	r7, r3, r1, r5
 800711e:	5dc7      	ldrb	r7, [r0, r7]
 8007120:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007124:	462f      	mov	r7, r5
 8007126:	42bb      	cmp	r3, r7
 8007128:	460d      	mov	r5, r1
 800712a:	d9f4      	bls.n	8007116 <_printf_i+0x112>
 800712c:	2b08      	cmp	r3, #8
 800712e:	d10b      	bne.n	8007148 <_printf_i+0x144>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	07df      	lsls	r7, r3, #31
 8007134:	d508      	bpl.n	8007148 <_printf_i+0x144>
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	6861      	ldr	r1, [r4, #4]
 800713a:	4299      	cmp	r1, r3
 800713c:	bfde      	ittt	le
 800713e:	2330      	movle	r3, #48	@ 0x30
 8007140:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007144:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007148:	1b92      	subs	r2, r2, r6
 800714a:	6122      	str	r2, [r4, #16]
 800714c:	f8cd a000 	str.w	sl, [sp]
 8007150:	464b      	mov	r3, r9
 8007152:	aa03      	add	r2, sp, #12
 8007154:	4621      	mov	r1, r4
 8007156:	4640      	mov	r0, r8
 8007158:	f7ff fee6 	bl	8006f28 <_printf_common>
 800715c:	3001      	adds	r0, #1
 800715e:	d14a      	bne.n	80071f6 <_printf_i+0x1f2>
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	b004      	add	sp, #16
 8007166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	f043 0320 	orr.w	r3, r3, #32
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	4833      	ldr	r0, [pc, #204]	@ (8007240 <_printf_i+0x23c>)
 8007174:	2778      	movs	r7, #120	@ 0x78
 8007176:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	6831      	ldr	r1, [r6, #0]
 800717e:	061f      	lsls	r7, r3, #24
 8007180:	f851 5b04 	ldr.w	r5, [r1], #4
 8007184:	d402      	bmi.n	800718c <_printf_i+0x188>
 8007186:	065f      	lsls	r7, r3, #25
 8007188:	bf48      	it	mi
 800718a:	b2ad      	uxthmi	r5, r5
 800718c:	6031      	str	r1, [r6, #0]
 800718e:	07d9      	lsls	r1, r3, #31
 8007190:	bf44      	itt	mi
 8007192:	f043 0320 	orrmi.w	r3, r3, #32
 8007196:	6023      	strmi	r3, [r4, #0]
 8007198:	b11d      	cbz	r5, 80071a2 <_printf_i+0x19e>
 800719a:	2310      	movs	r3, #16
 800719c:	e7ac      	b.n	80070f8 <_printf_i+0xf4>
 800719e:	4827      	ldr	r0, [pc, #156]	@ (800723c <_printf_i+0x238>)
 80071a0:	e7e9      	b.n	8007176 <_printf_i+0x172>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	f023 0320 	bic.w	r3, r3, #32
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	e7f6      	b.n	800719a <_printf_i+0x196>
 80071ac:	4616      	mov	r6, r2
 80071ae:	e7bd      	b.n	800712c <_printf_i+0x128>
 80071b0:	6833      	ldr	r3, [r6, #0]
 80071b2:	6825      	ldr	r5, [r4, #0]
 80071b4:	6961      	ldr	r1, [r4, #20]
 80071b6:	1d18      	adds	r0, r3, #4
 80071b8:	6030      	str	r0, [r6, #0]
 80071ba:	062e      	lsls	r6, r5, #24
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	d501      	bpl.n	80071c4 <_printf_i+0x1c0>
 80071c0:	6019      	str	r1, [r3, #0]
 80071c2:	e002      	b.n	80071ca <_printf_i+0x1c6>
 80071c4:	0668      	lsls	r0, r5, #25
 80071c6:	d5fb      	bpl.n	80071c0 <_printf_i+0x1bc>
 80071c8:	8019      	strh	r1, [r3, #0]
 80071ca:	2300      	movs	r3, #0
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	4616      	mov	r6, r2
 80071d0:	e7bc      	b.n	800714c <_printf_i+0x148>
 80071d2:	6833      	ldr	r3, [r6, #0]
 80071d4:	1d1a      	adds	r2, r3, #4
 80071d6:	6032      	str	r2, [r6, #0]
 80071d8:	681e      	ldr	r6, [r3, #0]
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	2100      	movs	r1, #0
 80071de:	4630      	mov	r0, r6
 80071e0:	f7f9 f806 	bl	80001f0 <memchr>
 80071e4:	b108      	cbz	r0, 80071ea <_printf_i+0x1e6>
 80071e6:	1b80      	subs	r0, r0, r6
 80071e8:	6060      	str	r0, [r4, #4]
 80071ea:	6863      	ldr	r3, [r4, #4]
 80071ec:	6123      	str	r3, [r4, #16]
 80071ee:	2300      	movs	r3, #0
 80071f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f4:	e7aa      	b.n	800714c <_printf_i+0x148>
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	4632      	mov	r2, r6
 80071fa:	4649      	mov	r1, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	47d0      	blx	sl
 8007200:	3001      	adds	r0, #1
 8007202:	d0ad      	beq.n	8007160 <_printf_i+0x15c>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	079b      	lsls	r3, r3, #30
 8007208:	d413      	bmi.n	8007232 <_printf_i+0x22e>
 800720a:	68e0      	ldr	r0, [r4, #12]
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	4298      	cmp	r0, r3
 8007210:	bfb8      	it	lt
 8007212:	4618      	movlt	r0, r3
 8007214:	e7a6      	b.n	8007164 <_printf_i+0x160>
 8007216:	2301      	movs	r3, #1
 8007218:	4632      	mov	r2, r6
 800721a:	4649      	mov	r1, r9
 800721c:	4640      	mov	r0, r8
 800721e:	47d0      	blx	sl
 8007220:	3001      	adds	r0, #1
 8007222:	d09d      	beq.n	8007160 <_printf_i+0x15c>
 8007224:	3501      	adds	r5, #1
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	9903      	ldr	r1, [sp, #12]
 800722a:	1a5b      	subs	r3, r3, r1
 800722c:	42ab      	cmp	r3, r5
 800722e:	dcf2      	bgt.n	8007216 <_printf_i+0x212>
 8007230:	e7eb      	b.n	800720a <_printf_i+0x206>
 8007232:	2500      	movs	r5, #0
 8007234:	f104 0619 	add.w	r6, r4, #25
 8007238:	e7f5      	b.n	8007226 <_printf_i+0x222>
 800723a:	bf00      	nop
 800723c:	08008701 	.word	0x08008701
 8007240:	08008712 	.word	0x08008712

08007244 <__sflush_r>:
 8007244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724c:	0716      	lsls	r6, r2, #28
 800724e:	4605      	mov	r5, r0
 8007250:	460c      	mov	r4, r1
 8007252:	d454      	bmi.n	80072fe <__sflush_r+0xba>
 8007254:	684b      	ldr	r3, [r1, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	dc02      	bgt.n	8007260 <__sflush_r+0x1c>
 800725a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	dd48      	ble.n	80072f2 <__sflush_r+0xae>
 8007260:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007262:	2e00      	cmp	r6, #0
 8007264:	d045      	beq.n	80072f2 <__sflush_r+0xae>
 8007266:	2300      	movs	r3, #0
 8007268:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800726c:	682f      	ldr	r7, [r5, #0]
 800726e:	6a21      	ldr	r1, [r4, #32]
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	d030      	beq.n	80072d6 <__sflush_r+0x92>
 8007274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	0759      	lsls	r1, r3, #29
 800727a:	d505      	bpl.n	8007288 <__sflush_r+0x44>
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007282:	b10b      	cbz	r3, 8007288 <__sflush_r+0x44>
 8007284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007286:	1ad2      	subs	r2, r2, r3
 8007288:	2300      	movs	r3, #0
 800728a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800728c:	6a21      	ldr	r1, [r4, #32]
 800728e:	4628      	mov	r0, r5
 8007290:	47b0      	blx	r6
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	d106      	bne.n	80072a6 <__sflush_r+0x62>
 8007298:	6829      	ldr	r1, [r5, #0]
 800729a:	291d      	cmp	r1, #29
 800729c:	d82b      	bhi.n	80072f6 <__sflush_r+0xb2>
 800729e:	4a2a      	ldr	r2, [pc, #168]	@ (8007348 <__sflush_r+0x104>)
 80072a0:	410a      	asrs	r2, r1
 80072a2:	07d6      	lsls	r6, r2, #31
 80072a4:	d427      	bmi.n	80072f6 <__sflush_r+0xb2>
 80072a6:	2200      	movs	r2, #0
 80072a8:	6062      	str	r2, [r4, #4]
 80072aa:	04d9      	lsls	r1, r3, #19
 80072ac:	6922      	ldr	r2, [r4, #16]
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	d504      	bpl.n	80072bc <__sflush_r+0x78>
 80072b2:	1c42      	adds	r2, r0, #1
 80072b4:	d101      	bne.n	80072ba <__sflush_r+0x76>
 80072b6:	682b      	ldr	r3, [r5, #0]
 80072b8:	b903      	cbnz	r3, 80072bc <__sflush_r+0x78>
 80072ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80072bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072be:	602f      	str	r7, [r5, #0]
 80072c0:	b1b9      	cbz	r1, 80072f2 <__sflush_r+0xae>
 80072c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072c6:	4299      	cmp	r1, r3
 80072c8:	d002      	beq.n	80072d0 <__sflush_r+0x8c>
 80072ca:	4628      	mov	r0, r5
 80072cc:	f7ff fbf2 	bl	8006ab4 <_free_r>
 80072d0:	2300      	movs	r3, #0
 80072d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80072d4:	e00d      	b.n	80072f2 <__sflush_r+0xae>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4628      	mov	r0, r5
 80072da:	47b0      	blx	r6
 80072dc:	4602      	mov	r2, r0
 80072de:	1c50      	adds	r0, r2, #1
 80072e0:	d1c9      	bne.n	8007276 <__sflush_r+0x32>
 80072e2:	682b      	ldr	r3, [r5, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0c6      	beq.n	8007276 <__sflush_r+0x32>
 80072e8:	2b1d      	cmp	r3, #29
 80072ea:	d001      	beq.n	80072f0 <__sflush_r+0xac>
 80072ec:	2b16      	cmp	r3, #22
 80072ee:	d11e      	bne.n	800732e <__sflush_r+0xea>
 80072f0:	602f      	str	r7, [r5, #0]
 80072f2:	2000      	movs	r0, #0
 80072f4:	e022      	b.n	800733c <__sflush_r+0xf8>
 80072f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072fa:	b21b      	sxth	r3, r3
 80072fc:	e01b      	b.n	8007336 <__sflush_r+0xf2>
 80072fe:	690f      	ldr	r7, [r1, #16]
 8007300:	2f00      	cmp	r7, #0
 8007302:	d0f6      	beq.n	80072f2 <__sflush_r+0xae>
 8007304:	0793      	lsls	r3, r2, #30
 8007306:	680e      	ldr	r6, [r1, #0]
 8007308:	bf08      	it	eq
 800730a:	694b      	ldreq	r3, [r1, #20]
 800730c:	600f      	str	r7, [r1, #0]
 800730e:	bf18      	it	ne
 8007310:	2300      	movne	r3, #0
 8007312:	eba6 0807 	sub.w	r8, r6, r7
 8007316:	608b      	str	r3, [r1, #8]
 8007318:	f1b8 0f00 	cmp.w	r8, #0
 800731c:	dde9      	ble.n	80072f2 <__sflush_r+0xae>
 800731e:	6a21      	ldr	r1, [r4, #32]
 8007320:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007322:	4643      	mov	r3, r8
 8007324:	463a      	mov	r2, r7
 8007326:	4628      	mov	r0, r5
 8007328:	47b0      	blx	r6
 800732a:	2800      	cmp	r0, #0
 800732c:	dc08      	bgt.n	8007340 <__sflush_r+0xfc>
 800732e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007340:	4407      	add	r7, r0
 8007342:	eba8 0800 	sub.w	r8, r8, r0
 8007346:	e7e7      	b.n	8007318 <__sflush_r+0xd4>
 8007348:	dfbffffe 	.word	0xdfbffffe

0800734c <_fflush_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	690b      	ldr	r3, [r1, #16]
 8007350:	4605      	mov	r5, r0
 8007352:	460c      	mov	r4, r1
 8007354:	b913      	cbnz	r3, 800735c <_fflush_r+0x10>
 8007356:	2500      	movs	r5, #0
 8007358:	4628      	mov	r0, r5
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	b118      	cbz	r0, 8007366 <_fflush_r+0x1a>
 800735e:	6a03      	ldr	r3, [r0, #32]
 8007360:	b90b      	cbnz	r3, 8007366 <_fflush_r+0x1a>
 8007362:	f7ff f9ad 	bl	80066c0 <__sinit>
 8007366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0f3      	beq.n	8007356 <_fflush_r+0xa>
 800736e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007370:	07d0      	lsls	r0, r2, #31
 8007372:	d404      	bmi.n	800737e <_fflush_r+0x32>
 8007374:	0599      	lsls	r1, r3, #22
 8007376:	d402      	bmi.n	800737e <_fflush_r+0x32>
 8007378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800737a:	f7ff fb98 	bl	8006aae <__retarget_lock_acquire_recursive>
 800737e:	4628      	mov	r0, r5
 8007380:	4621      	mov	r1, r4
 8007382:	f7ff ff5f 	bl	8007244 <__sflush_r>
 8007386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007388:	07da      	lsls	r2, r3, #31
 800738a:	4605      	mov	r5, r0
 800738c:	d4e4      	bmi.n	8007358 <_fflush_r+0xc>
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	059b      	lsls	r3, r3, #22
 8007392:	d4e1      	bmi.n	8007358 <_fflush_r+0xc>
 8007394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007396:	f7ff fb8b 	bl	8006ab0 <__retarget_lock_release_recursive>
 800739a:	e7dd      	b.n	8007358 <_fflush_r+0xc>

0800739c <__swhatbuf_r>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	460c      	mov	r4, r1
 80073a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a4:	2900      	cmp	r1, #0
 80073a6:	b096      	sub	sp, #88	@ 0x58
 80073a8:	4615      	mov	r5, r2
 80073aa:	461e      	mov	r6, r3
 80073ac:	da0d      	bge.n	80073ca <__swhatbuf_r+0x2e>
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80073b4:	f04f 0100 	mov.w	r1, #0
 80073b8:	bf14      	ite	ne
 80073ba:	2340      	movne	r3, #64	@ 0x40
 80073bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80073c0:	2000      	movs	r0, #0
 80073c2:	6031      	str	r1, [r6, #0]
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	b016      	add	sp, #88	@ 0x58
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
 80073ca:	466a      	mov	r2, sp
 80073cc:	f000 f848 	bl	8007460 <_fstat_r>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	dbec      	blt.n	80073ae <__swhatbuf_r+0x12>
 80073d4:	9901      	ldr	r1, [sp, #4]
 80073d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073de:	4259      	negs	r1, r3
 80073e0:	4159      	adcs	r1, r3
 80073e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073e6:	e7eb      	b.n	80073c0 <__swhatbuf_r+0x24>

080073e8 <__smakebuf_r>:
 80073e8:	898b      	ldrh	r3, [r1, #12]
 80073ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ec:	079d      	lsls	r5, r3, #30
 80073ee:	4606      	mov	r6, r0
 80073f0:	460c      	mov	r4, r1
 80073f2:	d507      	bpl.n	8007404 <__smakebuf_r+0x1c>
 80073f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	6123      	str	r3, [r4, #16]
 80073fc:	2301      	movs	r3, #1
 80073fe:	6163      	str	r3, [r4, #20]
 8007400:	b003      	add	sp, #12
 8007402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007404:	ab01      	add	r3, sp, #4
 8007406:	466a      	mov	r2, sp
 8007408:	f7ff ffc8 	bl	800739c <__swhatbuf_r>
 800740c:	9f00      	ldr	r7, [sp, #0]
 800740e:	4605      	mov	r5, r0
 8007410:	4639      	mov	r1, r7
 8007412:	4630      	mov	r0, r6
 8007414:	f7ff fbba 	bl	8006b8c <_malloc_r>
 8007418:	b948      	cbnz	r0, 800742e <__smakebuf_r+0x46>
 800741a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800741e:	059a      	lsls	r2, r3, #22
 8007420:	d4ee      	bmi.n	8007400 <__smakebuf_r+0x18>
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	f043 0302 	orr.w	r3, r3, #2
 800742a:	81a3      	strh	r3, [r4, #12]
 800742c:	e7e2      	b.n	80073f4 <__smakebuf_r+0xc>
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	6020      	str	r0, [r4, #0]
 8007432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007436:	81a3      	strh	r3, [r4, #12]
 8007438:	9b01      	ldr	r3, [sp, #4]
 800743a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800743e:	b15b      	cbz	r3, 8007458 <__smakebuf_r+0x70>
 8007440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007444:	4630      	mov	r0, r6
 8007446:	f000 f81d 	bl	8007484 <_isatty_r>
 800744a:	b128      	cbz	r0, 8007458 <__smakebuf_r+0x70>
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	81a3      	strh	r3, [r4, #12]
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	431d      	orrs	r5, r3
 800745c:	81a5      	strh	r5, [r4, #12]
 800745e:	e7cf      	b.n	8007400 <__smakebuf_r+0x18>

08007460 <_fstat_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4d07      	ldr	r5, [pc, #28]	@ (8007480 <_fstat_r+0x20>)
 8007464:	2300      	movs	r3, #0
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	4611      	mov	r1, r2
 800746c:	602b      	str	r3, [r5, #0]
 800746e:	f7fb fbf7 	bl	8002c60 <_fstat>
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	d102      	bne.n	800747c <_fstat_r+0x1c>
 8007476:	682b      	ldr	r3, [r5, #0]
 8007478:	b103      	cbz	r3, 800747c <_fstat_r+0x1c>
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	bd38      	pop	{r3, r4, r5, pc}
 800747e:	bf00      	nop
 8007480:	20025d4c 	.word	0x20025d4c

08007484 <_isatty_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d06      	ldr	r5, [pc, #24]	@ (80074a0 <_isatty_r+0x1c>)
 8007488:	2300      	movs	r3, #0
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	f7fb fbf6 	bl	8002c80 <_isatty>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_isatty_r+0x1a>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_isatty_r+0x1a>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	20025d4c 	.word	0x20025d4c

080074a4 <_sbrk_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d06      	ldr	r5, [pc, #24]	@ (80074c0 <_sbrk_r+0x1c>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	602b      	str	r3, [r5, #0]
 80074b0:	f7fb fbfe 	bl	8002cb0 <_sbrk>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_sbrk_r+0x1a>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_sbrk_r+0x1a>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20025d4c 	.word	0x20025d4c

080074c4 <_init>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr

080074d0 <_fini>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr
