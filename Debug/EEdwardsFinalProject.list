
EEdwardsFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001248  08008614  08008614  00009614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800985c  0800985c  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800985c  0800985c  0000a85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009864  08009864  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009864  08009864  0000a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009868  08009868  0000a868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800986c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00025ce8  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d64  20025d64  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ad3  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031e8  00000000  00000000  0001eb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  00021d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f97  00000000  00000000  00023198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027124  00000000  00000000  0002412f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c7f  00000000  00000000  0004b253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e30ff  00000000  00000000  00063ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146fd1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bd8  00000000  00000000  00147014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0014cbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080085fc 	.word	0x080085fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080085fc 	.word	0x080085fc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
static uint8_t TotalTime = 0;

RNG_HandleTypeDef hrng;

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f003 fb66 	bl	8003c54 <initialise_monitor_handles>
	InitButtonInterrupts();
 8000588:	f001 fbc0 	bl	8001d0c <InitButtonInterrupts>
	MX_RNG_Init();
 800058c:	f000 f814 	bl	80005b8 <MX_RNG_Init>
    LTCD__Init();
 8000590:	f001 fd02 	bl	8001f98 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000594:	2000      	movs	r0, #0
 8000596:	f001 fcbf 	bl	8001f18 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800059a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800059e:	2000      	movs	r0, #0
 80005a0:	f001 fe18 	bl	80021d4 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a4:	f001 feee 	bl	8002384 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a8:	4b02      	ldr	r3, [pc, #8]	@ (80005b4 <ApplicationInit+0x34>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	719a      	strb	r2, [r3, #6]

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000098 	.word	0x20000098

080005b8 <MX_RNG_Init>:

static void MX_RNG_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <MX_RNG_Init+0x20>)
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <MX_RNG_Init+0x24>)
 80005c0:	601a      	str	r2, [r3, #0]

  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <MX_RNG_Init+0x20>)
 80005c4:	f006 fa54 	bl	8006a70 <HAL_RNG_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_RNG_Init+0x1a>
  {
    LCD_Error_Handler();
 80005ce:	f001 fed3 	bl	8002378 <LCD_Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000d4 	.word	0x200000d4
 80005dc:	50060800 	.word	0x50060800

080005e0 <LCD_ScreenOne>:
	visualDemo();
}

#if COMPILE_TOUCH_FUNCTIONS == 1
void LCD_ScreenOne(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 80005e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005e8:	2000      	movs	r0, #0
 80005ea:	f001 fdf3 	bl	80021d4 <LCD_Clear>
	while (1)
	{
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 80005ee:	4824      	ldr	r0, [pc, #144]	@ (8000680 <LCD_ScreenOne+0xa0>)
 80005f0:	f001 fed3 	bl	800239a <returnTouchStateAndLocation>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d117      	bne.n	800062a <LCD_ScreenOne+0x4a>
		{
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <LCD_ScreenOne+0xa0>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <LCD_ScreenOne+0xa0>)
 8000602:	885b      	ldrh	r3, [r3, #2]
 8000604:	461a      	mov	r2, r3
 8000606:	481f      	ldr	r0, [pc, #124]	@ (8000684 <LCD_ScreenOne+0xa4>)
 8000608:	f007 f92c 	bl	8007864 <iprintf>
			LCD_Clear(0, LCD_COLOR_WHITE);
 800060c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000610:	2000      	movs	r0, #0
 8000612:	f001 fddf 	bl	80021d4 <LCD_Clear>

			if(StaticTouchData.x < LCD_PIXEL_WIDTH/2)
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <LCD_ScreenOne+0xa0>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	2b77      	cmp	r3, #119	@ 0x77
 800061c:	d802      	bhi.n	8000624 <LCD_ScreenOne+0x44>
			{
				LCD_Gameplay();
 800061e:	f000 f935 	bl	800088c <LCD_Gameplay>
 8000622:	e7e4      	b.n	80005ee <LCD_ScreenOne+0xe>
			}
			else
			{
				LCD_TwoPlayerGameplay();
 8000624:	f000 f834 	bl	8000690 <LCD_TwoPlayerGameplay>
 8000628:	e7e1      	b.n	80005ee <LCD_ScreenOne+0xe>
			}
		}
		else
		{
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 800062a:	4817      	ldr	r0, [pc, #92]	@ (8000688 <LCD_ScreenOne+0xa8>)
 800062c:	f007 f982 	bl	8007934 <puts>
			//LCD_Clear(0, LCD_COLOR_WHITE);
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8000630:	2000      	movs	r0, #0
 8000632:	f001 fdf1 	bl	8002218 <LCD_SetTextColor>
			LCD_SetFont(&Font16x24);
 8000636:	4815      	ldr	r0, [pc, #84]	@ (800068c <LCD_ScreenOne+0xac>)
 8000638:	f001 fdfe 	bl	8002238 <LCD_SetFont>
			LCD_Draw_Circle_Fill(185,140,20,LCD_COLOR_GREY);
 800063c:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000640:	2214      	movs	r2, #20
 8000642:	218c      	movs	r1, #140	@ 0x8c
 8000644:	20b9      	movs	r0, #185	@ 0xb9
 8000646:	f001 fd23 	bl	8002090 <LCD_Draw_Circle_Fill>
			LCD_Draw_Circle_Fill(55,140,20,LCD_COLOR_BLUE);
 800064a:	231f      	movs	r3, #31
 800064c:	2214      	movs	r2, #20
 800064e:	218c      	movs	r1, #140	@ 0x8c
 8000650:	2037      	movs	r0, #55	@ 0x37
 8000652:	f001 fd1d 	bl	8002090 <LCD_Draw_Circle_Fill>
			LCD_DisplayChar(45,135,'P');
 8000656:	2250      	movs	r2, #80	@ 0x50
 8000658:	2187      	movs	r1, #135	@ 0x87
 800065a:	202d      	movs	r0, #45	@ 0x2d
 800065c:	f001 fe6a 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(55,135,'1');
 8000660:	2231      	movs	r2, #49	@ 0x31
 8000662:	2187      	movs	r1, #135	@ 0x87
 8000664:	2037      	movs	r0, #55	@ 0x37
 8000666:	f001 fe65 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(175,135,'P');
 800066a:	2250      	movs	r2, #80	@ 0x50
 800066c:	2187      	movs	r1, #135	@ 0x87
 800066e:	20af      	movs	r0, #175	@ 0xaf
 8000670:	f001 fe60 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(185,135,'2');
 8000674:	2232      	movs	r2, #50	@ 0x32
 8000676:	2187      	movs	r1, #135	@ 0x87
 8000678:	20b9      	movs	r0, #185	@ 0xb9
 800067a:	f001 fe5b 	bl	8002334 <LCD_DisplayChar>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 800067e:	e7b6      	b.n	80005ee <LCD_ScreenOne+0xe>
 8000680:	20000098 	.word	0x20000098
 8000684:	08008614 	.word	0x08008614
 8000688:	08008628 	.word	0x08008628
 800068c:	20000008 	.word	0x20000008

08000690 <LCD_TwoPlayerGameplay>:




void LCD_TwoPlayerGameplay(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/****************** Gameboard Visuals *******************/
		LCD_Clear(0, LCD_COLOR_WHITE);
 8000694:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000698:	2000      	movs	r0, #0
 800069a:	f001 fd9b 	bl	80021d4 <LCD_Clear>
		LCD_SetTextColor(LCD_COLOR_BLUE);
 800069e:	201f      	movs	r0, #31
 80006a0:	f001 fdba 	bl	8002218 <LCD_SetTextColor>
		LCD_SetFont(&Font16x24);
 80006a4:	486d      	ldr	r0, [pc, #436]	@ (800085c <LCD_TwoPlayerGameplay+0x1cc>)
 80006a6:	f001 fdc7 	bl	8002238 <LCD_SetFont>

		LCD_Draw_Vertical_Line(205,45,270,LCD_COLOR_BLACK);
 80006aa:	2300      	movs	r3, #0
 80006ac:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006b0:	212d      	movs	r1, #45	@ 0x2d
 80006b2:	20cd      	movs	r0, #205	@ 0xcd
 80006b4:	f001 fd3f 	bl	8002136 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(170,45,270,LCD_COLOR_BLACK);
 80006b8:	2300      	movs	r3, #0
 80006ba:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006be:	212d      	movs	r1, #45	@ 0x2d
 80006c0:	20aa      	movs	r0, #170	@ 0xaa
 80006c2:	f001 fd38 	bl	8002136 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(135,45,270,LCD_COLOR_BLACK);
 80006c6:	2300      	movs	r3, #0
 80006c8:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006cc:	212d      	movs	r1, #45	@ 0x2d
 80006ce:	2087      	movs	r0, #135	@ 0x87
 80006d0:	f001 fd31 	bl	8002136 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(100,45,270,LCD_COLOR_BLACK);
 80006d4:	2300      	movs	r3, #0
 80006d6:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006da:	212d      	movs	r1, #45	@ 0x2d
 80006dc:	2064      	movs	r0, #100	@ 0x64
 80006de:	f001 fd2a 	bl	8002136 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(65,45,270,LCD_COLOR_BLACK);
 80006e2:	2300      	movs	r3, #0
 80006e4:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006e8:	212d      	movs	r1, #45	@ 0x2d
 80006ea:	2041      	movs	r0, #65	@ 0x41
 80006ec:	f001 fd23 	bl	8002136 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(33,45,270,LCD_COLOR_BLACK);
 80006f0:	2300      	movs	r3, #0
 80006f2:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80006f6:	212d      	movs	r1, #45	@ 0x2d
 80006f8:	2021      	movs	r0, #33	@ 0x21
 80006fa:	f001 fd1c 	bl	8002136 <LCD_Draw_Vertical_Line>

		LCD_Draw_Horizontal_Line(1,45,235,LCD_COLOR_BLACK);
 80006fe:	2300      	movs	r3, #0
 8000700:	22eb      	movs	r2, #235	@ 0xeb
 8000702:	212d      	movs	r1, #45	@ 0x2d
 8000704:	2001      	movs	r0, #1
 8000706:	f001 fd3d 	bl	8002184 <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(1,95,235,LCD_COLOR_BLACK);
 800070a:	2300      	movs	r3, #0
 800070c:	22eb      	movs	r2, #235	@ 0xeb
 800070e:	215f      	movs	r1, #95	@ 0x5f
 8000710:	2001      	movs	r0, #1
 8000712:	f001 fd37 	bl	8002184 <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(1,140,235,LCD_COLOR_BLACK);
 8000716:	2300      	movs	r3, #0
 8000718:	22eb      	movs	r2, #235	@ 0xeb
 800071a:	218c      	movs	r1, #140	@ 0x8c
 800071c:	2001      	movs	r0, #1
 800071e:	f001 fd31 	bl	8002184 <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(1,185,235,LCD_COLOR_BLACK);
 8000722:	2300      	movs	r3, #0
 8000724:	22eb      	movs	r2, #235	@ 0xeb
 8000726:	21b9      	movs	r1, #185	@ 0xb9
 8000728:	2001      	movs	r0, #1
 800072a:	f001 fd2b 	bl	8002184 <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(1,230,235,LCD_COLOR_BLACK);
 800072e:	2300      	movs	r3, #0
 8000730:	22eb      	movs	r2, #235	@ 0xeb
 8000732:	21e6      	movs	r1, #230	@ 0xe6
 8000734:	2001      	movs	r0, #1
 8000736:	f001 fd25 	bl	8002184 <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(1,273,235,LCD_COLOR_BLACK);
 800073a:	2300      	movs	r3, #0
 800073c:	22eb      	movs	r2, #235	@ 0xeb
 800073e:	f240 1111 	movw	r1, #273	@ 0x111
 8000742:	2001      	movs	r0, #1
 8000744:	f001 fd1e 	bl	8002184 <LCD_Draw_Horizontal_Line>
		LCD_Draw_Horizontal_Line(1,315,235,LCD_COLOR_BLACK);
 8000748:	2300      	movs	r3, #0
 800074a:	22eb      	movs	r2, #235	@ 0xeb
 800074c:	f240 113b 	movw	r1, #315	@ 0x13b
 8000750:	2001      	movs	r0, #1
 8000752:	f001 fd17 	bl	8002184 <LCD_Draw_Horizontal_Line>





		StartTime = HAL_GetTick();
 8000756:	f003 fbc9 	bl	8003eec <HAL_GetTick>
 800075a:	4603      	mov	r3, r0
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b40      	ldr	r3, [pc, #256]	@ (8000860 <LCD_TwoPlayerGameplay+0x1d0>)
 8000760:	701a      	strb	r2, [r3, #0]
		/**************************** Gameplay ******************************/
		while(1) // set macro
		{
			if(PlayerOneChoice == 1)
 8000762:	4b40      	ldr	r3, [pc, #256]	@ (8000864 <LCD_TwoPlayerGameplay+0x1d4>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d10f      	bne.n	800078a <LCD_TwoPlayerGameplay+0xfa>
			{
				LCD_PieceMovement(); // Loops and waits for player movement.
 800076a:	f000 fc83 	bl	8001074 <LCD_PieceMovement>
				InterruptPress = 0; // Reset variable
 800076e:	4b3e      	ldr	r3, [pc, #248]	@ (8000868 <LCD_TwoPlayerGameplay+0x1d8>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
				PLAYER_PiecePlacement(current_position); // Handles peice/matrix placement
 8000774:	4b3d      	ldr	r3, [pc, #244]	@ (800086c <LCD_TwoPlayerGameplay+0x1dc>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	f000 f9ce 	bl	8000b24 <PLAYER_PiecePlacement>
 8000788:	e018      	b.n	80007bc <LCD_TwoPlayerGameplay+0x12c>
			}
			else
			{
				HAL_Delay(1000); // Avoid program crash
 800078a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078e:	f003 fbb9 	bl	8003f04 <HAL_Delay>
				LCD_PlayerTwoPieceMovement();
 8000792:	f000 fcdb 	bl	800114c <LCD_PlayerTwoPieceMovement>
				InterruptPress = 0;
 8000796:	4b34      	ldr	r3, [pc, #208]	@ (8000868 <LCD_TwoPlayerGameplay+0x1d8>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
				PlayerTwoChoice = 1;
 800079c:	4b34      	ldr	r3, [pc, #208]	@ (8000870 <LCD_TwoPlayerGameplay+0x1e0>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
				PLAYER_GreyPiecePlacement(current_position);
 80007a2:	4b32      	ldr	r3, [pc, #200]	@ (800086c <LCD_TwoPlayerGameplay+0x1dc>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	ee07 3a90 	vmov	s15, r3
 80007aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ae:	eeb0 0a67 	vmov.f32	s0, s15
 80007b2:	f000 fa7b 	bl	8000cac <PLAYER_GreyPiecePlacement>
				PlayerOneChoice = 1; // Resets variable to go back to player one loop
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <LCD_TwoPlayerGameplay+0x1d4>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
				}

			if(check_questionMark(game_board, 1))
 80007bc:	2101      	movs	r1, #1
 80007be:	482d      	ldr	r0, [pc, #180]	@ (8000874 <LCD_TwoPlayerGameplay+0x1e4>)
 80007c0:	f000 fd32 	bl	8001228 <check_questionMark>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d01f      	beq.n	800080a <LCD_TwoPlayerGameplay+0x17a>
			{
				EndTime = HAL_GetTick(); // Get tick at end of game
 80007ca:	f003 fb8f 	bl	8003eec <HAL_GetTick>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <LCD_TwoPlayerGameplay+0x1e8>)
 80007d4:	701a      	strb	r2, [r3, #0]
				TotalTime = (EndTime - StartTime) / 1000; // Get time elapsed in seconds
 80007d6:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <LCD_TwoPlayerGameplay+0x1e8>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <LCD_TwoPlayerGameplay+0x1d0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	4a26      	ldr	r2, [pc, #152]	@ (800087c <LCD_TwoPlayerGameplay+0x1ec>)
 80007e4:	fb82 1203 	smull	r1, r2, r2, r3
 80007e8:	1192      	asrs	r2, r2, #6
 80007ea:	17db      	asrs	r3, r3, #31
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <LCD_TwoPlayerGameplay+0x1f0>)
 80007f2:	701a      	strb	r2, [r3, #0]
				PlayerOneScore += 1; // Increment score counter
 80007f4:	4b23      	ldr	r3, [pc, #140]	@ (8000884 <LCD_TwoPlayerGameplay+0x1f4>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <LCD_TwoPlayerGameplay+0x1f4>)
 80007fe:	701a      	strb	r2, [r3, #0]
				HAL_Delay(200);
 8000800:	20c8      	movs	r0, #200	@ 0xc8
 8000802:	f003 fb7f 	bl	8003f04 <HAL_Delay>
				LCD_FinalScreenTwoPlayer(); // Go to final screen to show data
 8000806:	f001 f93b 	bl	8001a80 <LCD_FinalScreenTwoPlayer>
			}
			if(check_questionMark(game_board,2))
 800080a:	2102      	movs	r1, #2
 800080c:	4819      	ldr	r0, [pc, #100]	@ (8000874 <LCD_TwoPlayerGameplay+0x1e4>)
 800080e:	f000 fd0b 	bl	8001228 <check_questionMark>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0a4      	beq.n	8000762 <LCD_TwoPlayerGameplay+0xd2>
			{
				EndTime = HAL_GetTick() - StartTime;
 8000818:	f003 fb68 	bl	8003eec <HAL_GetTick>
 800081c:	4603      	mov	r3, r0
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <LCD_TwoPlayerGameplay+0x1d0>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <LCD_TwoPlayerGameplay+0x1e8>)
 800082a:	701a      	strb	r2, [r3, #0]
				TotalTime = EndTime / 1000;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <LCD_TwoPlayerGameplay+0x1e8>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <LCD_TwoPlayerGameplay+0x1ec>)
 8000832:	fb82 1203 	smull	r1, r2, r2, r3
 8000836:	1192      	asrs	r2, r2, #6
 8000838:	17db      	asrs	r3, r3, #31
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <LCD_TwoPlayerGameplay+0x1f0>)
 8000840:	701a      	strb	r2, [r3, #0]
				PlayerTwoScore += 1;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <LCD_TwoPlayerGameplay+0x1f8>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <LCD_TwoPlayerGameplay+0x1f8>)
 800084c:	701a      	strb	r2, [r3, #0]
				HAL_Delay(200);
 800084e:	20c8      	movs	r0, #200	@ 0xc8
 8000850:	f003 fb58 	bl	8003f04 <HAL_Delay>
				LCD_FinalScreenTwoPlayer();
 8000854:	f001 f914 	bl	8001a80 <LCD_FinalScreenTwoPlayer>
			if(PlayerOneChoice == 1)
 8000858:	e783      	b.n	8000762 <LCD_TwoPlayerGameplay+0xd2>
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008
 8000860:	200000ce 	.word	0x200000ce
 8000864:	20000000 	.word	0x20000000
 8000868:	200000a0 	.word	0x200000a0
 800086c:	20000002 	.word	0x20000002
 8000870:	20000001 	.word	0x20000001
 8000874:	200000a4 	.word	0x200000a4
 8000878:	200000cf 	.word	0x200000cf
 800087c:	10624dd3 	.word	0x10624dd3
 8000880:	200000d2 	.word	0x200000d2
 8000884:	200000d0 	.word	0x200000d0
 8000888:	200000d1 	.word	0x200000d1

0800088c <LCD_Gameplay>:




void LCD_Gameplay(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	/****************** Gameboard Visuals *******************/
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000890:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fc9d 	bl	80021d4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLUE);
 800089a:	201f      	movs	r0, #31
 800089c:	f001 fcbc 	bl	8002218 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80008a0:	4865      	ldr	r0, [pc, #404]	@ (8000a38 <LCD_Gameplay+0x1ac>)
 80008a2:	f001 fcc9 	bl	8002238 <LCD_SetFont>

	LCD_Draw_Vertical_Line(205,45,270,LCD_COLOR_BLACK);
 80008a6:	2300      	movs	r3, #0
 80008a8:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80008ac:	212d      	movs	r1, #45	@ 0x2d
 80008ae:	20cd      	movs	r0, #205	@ 0xcd
 80008b0:	f001 fc41 	bl	8002136 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(170,45,270,LCD_COLOR_BLACK);
 80008b4:	2300      	movs	r3, #0
 80008b6:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80008ba:	212d      	movs	r1, #45	@ 0x2d
 80008bc:	20aa      	movs	r0, #170	@ 0xaa
 80008be:	f001 fc3a 	bl	8002136 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(135,45,270,LCD_COLOR_BLACK);
 80008c2:	2300      	movs	r3, #0
 80008c4:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80008c8:	212d      	movs	r1, #45	@ 0x2d
 80008ca:	2087      	movs	r0, #135	@ 0x87
 80008cc:	f001 fc33 	bl	8002136 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(100,45,270,LCD_COLOR_BLACK);
 80008d0:	2300      	movs	r3, #0
 80008d2:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80008d6:	212d      	movs	r1, #45	@ 0x2d
 80008d8:	2064      	movs	r0, #100	@ 0x64
 80008da:	f001 fc2c 	bl	8002136 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(65,45,270,LCD_COLOR_BLACK);
 80008de:	2300      	movs	r3, #0
 80008e0:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80008e4:	212d      	movs	r1, #45	@ 0x2d
 80008e6:	2041      	movs	r0, #65	@ 0x41
 80008e8:	f001 fc25 	bl	8002136 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(33,45,270,LCD_COLOR_BLACK);
 80008ec:	2300      	movs	r3, #0
 80008ee:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80008f2:	212d      	movs	r1, #45	@ 0x2d
 80008f4:	2021      	movs	r0, #33	@ 0x21
 80008f6:	f001 fc1e 	bl	8002136 <LCD_Draw_Vertical_Line>

	LCD_Draw_Horizontal_Line(1,45,235,LCD_COLOR_BLACK);
 80008fa:	2300      	movs	r3, #0
 80008fc:	22eb      	movs	r2, #235	@ 0xeb
 80008fe:	212d      	movs	r1, #45	@ 0x2d
 8000900:	2001      	movs	r0, #1
 8000902:	f001 fc3f 	bl	8002184 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(1,95,235,LCD_COLOR_BLACK);
 8000906:	2300      	movs	r3, #0
 8000908:	22eb      	movs	r2, #235	@ 0xeb
 800090a:	215f      	movs	r1, #95	@ 0x5f
 800090c:	2001      	movs	r0, #1
 800090e:	f001 fc39 	bl	8002184 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(1,140,235,LCD_COLOR_BLACK);
 8000912:	2300      	movs	r3, #0
 8000914:	22eb      	movs	r2, #235	@ 0xeb
 8000916:	218c      	movs	r1, #140	@ 0x8c
 8000918:	2001      	movs	r0, #1
 800091a:	f001 fc33 	bl	8002184 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(1,185,235,LCD_COLOR_BLACK);
 800091e:	2300      	movs	r3, #0
 8000920:	22eb      	movs	r2, #235	@ 0xeb
 8000922:	21b9      	movs	r1, #185	@ 0xb9
 8000924:	2001      	movs	r0, #1
 8000926:	f001 fc2d 	bl	8002184 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(1,230,235,LCD_COLOR_BLACK);
 800092a:	2300      	movs	r3, #0
 800092c:	22eb      	movs	r2, #235	@ 0xeb
 800092e:	21e6      	movs	r1, #230	@ 0xe6
 8000930:	2001      	movs	r0, #1
 8000932:	f001 fc27 	bl	8002184 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(1,273,235,LCD_COLOR_BLACK);
 8000936:	2300      	movs	r3, #0
 8000938:	22eb      	movs	r2, #235	@ 0xeb
 800093a:	f240 1111 	movw	r1, #273	@ 0x111
 800093e:	2001      	movs	r0, #1
 8000940:	f001 fc20 	bl	8002184 <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(1,315,235,LCD_COLOR_BLACK);
 8000944:	2300      	movs	r3, #0
 8000946:	22eb      	movs	r2, #235	@ 0xeb
 8000948:	f240 113b 	movw	r1, #315	@ 0x13b
 800094c:	2001      	movs	r0, #1
 800094e:	f001 fc19 	bl	8002184 <LCD_Draw_Horizontal_Line>





	StartTime = HAL_GetTick();
 8000952:	f003 facb 	bl	8003eec <HAL_GetTick>
 8000956:	4603      	mov	r3, r0
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b38      	ldr	r3, [pc, #224]	@ (8000a3c <LCD_Gameplay+0x1b0>)
 800095c:	701a      	strb	r2, [r3, #0]
	/**************************** Gameplay ******************************/
	while(1) // set macro
	{
		if(PlayerOneChoice == 1)
 800095e:	4b38      	ldr	r3, [pc, #224]	@ (8000a40 <LCD_Gameplay+0x1b4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d10f      	bne.n	8000986 <LCD_Gameplay+0xfa>
		{
			LCD_PieceMovement(); // Loops and waits for player movement.
 8000966:	f000 fb85 	bl	8001074 <LCD_PieceMovement>
			InterruptPress = 0; // Reset variable
 800096a:	4b36      	ldr	r3, [pc, #216]	@ (8000a44 <LCD_Gameplay+0x1b8>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
			PLAYER_PiecePlacement(current_position); // Handles peice/matrix placement
 8000970:	4b35      	ldr	r3, [pc, #212]	@ (8000a48 <LCD_Gameplay+0x1bc>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800097c:	eeb0 0a67 	vmov.f32	s0, s15
 8000980:	f000 f8d0 	bl	8000b24 <PLAYER_PiecePlacement>
 8000984:	e008      	b.n	8000998 <LCD_Gameplay+0x10c>
		}
		else
		{
			HAL_Delay(1000); // Avoid program crash
 8000986:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800098a:	f003 fabb 	bl	8003f04 <HAL_Delay>
			RNG_PlayerTurn(); // Handles the RNG turn
 800098e:	f000 f869 	bl	8000a64 <RNG_PlayerTurn>
			PlayerOneChoice = 1; // Resets variable to go back to player one loop
 8000992:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <LCD_Gameplay+0x1b4>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
		}

		if(check_questionMark(game_board, 1))
 8000998:	2101      	movs	r1, #1
 800099a:	482c      	ldr	r0, [pc, #176]	@ (8000a4c <LCD_Gameplay+0x1c0>)
 800099c:	f000 fc44 	bl	8001228 <check_questionMark>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d01f      	beq.n	80009e6 <LCD_Gameplay+0x15a>
		{
			EndTime = HAL_GetTick(); // Get tick at end of game
 80009a6:	f003 faa1 	bl	8003eec <HAL_GetTick>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <LCD_Gameplay+0x1c4>)
 80009b0:	701a      	strb	r2, [r3, #0]
			TotalTime = (EndTime - StartTime) / 1000; // Get time elapsed in seconds
 80009b2:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <LCD_Gameplay+0x1c4>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	@ (8000a3c <LCD_Gameplay+0x1b0>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	4a25      	ldr	r2, [pc, #148]	@ (8000a54 <LCD_Gameplay+0x1c8>)
 80009c0:	fb82 1203 	smull	r1, r2, r2, r3
 80009c4:	1192      	asrs	r2, r2, #6
 80009c6:	17db      	asrs	r3, r3, #31
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <LCD_Gameplay+0x1cc>)
 80009ce:	701a      	strb	r2, [r3, #0]
			PlayerOneScore += 1; // Increment score counter
 80009d0:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <LCD_Gameplay+0x1d0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <LCD_Gameplay+0x1d0>)
 80009da:	701a      	strb	r2, [r3, #0]
			HAL_Delay(200);
 80009dc:	20c8      	movs	r0, #200	@ 0xc8
 80009de:	f003 fa91 	bl	8003f04 <HAL_Delay>
			LCD_FinalScreen(); // Go to final screen to show data
 80009e2:	f000 fd41 	bl	8001468 <LCD_FinalScreen>
		}
		if(check_questionMark(game_board,2))
 80009e6:	2102      	movs	r1, #2
 80009e8:	4818      	ldr	r0, [pc, #96]	@ (8000a4c <LCD_Gameplay+0x1c0>)
 80009ea:	f000 fc1d 	bl	8001228 <check_questionMark>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0b4      	beq.n	800095e <LCD_Gameplay+0xd2>
		{
			EndTime = HAL_GetTick() - StartTime;
 80009f4:	f003 fa7a 	bl	8003eec <HAL_GetTick>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <LCD_Gameplay+0x1b0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <LCD_Gameplay+0x1c4>)
 8000a06:	701a      	strb	r2, [r3, #0]
			TotalTime = EndTime / 1000;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <LCD_Gameplay+0x1c4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4a11      	ldr	r2, [pc, #68]	@ (8000a54 <LCD_Gameplay+0x1c8>)
 8000a0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a12:	1192      	asrs	r2, r2, #6
 8000a14:	17db      	asrs	r3, r3, #31
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <LCD_Gameplay+0x1cc>)
 8000a1c:	701a      	strb	r2, [r3, #0]
			PlayerTwoScore += 1;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <LCD_Gameplay+0x1d4>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <LCD_Gameplay+0x1d4>)
 8000a28:	701a      	strb	r2, [r3, #0]
			HAL_Delay(200);
 8000a2a:	20c8      	movs	r0, #200	@ 0xc8
 8000a2c:	f003 fa6a 	bl	8003f04 <HAL_Delay>
			LCD_FinalScreenLose();
 8000a30:	f000 fe8e 	bl	8001750 <LCD_FinalScreenLose>
		if(PlayerOneChoice == 1)
 8000a34:	e793      	b.n	800095e <LCD_Gameplay+0xd2>
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	200000ce 	.word	0x200000ce
 8000a40:	20000000 	.word	0x20000000
 8000a44:	200000a0 	.word	0x200000a0
 8000a48:	20000002 	.word	0x20000002
 8000a4c:	200000a4 	.word	0x200000a4
 8000a50:	200000cf 	.word	0x200000cf
 8000a54:	10624dd3 	.word	0x10624dd3
 8000a58:	200000d2 	.word	0x200000d2
 8000a5c:	200000d0 	.word	0x200000d0
 8000a60:	200000d1 	.word	0x200000d1

08000a64 <RNG_PlayerTurn>:
}



void RNG_PlayerTurn()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	uint32_t rand32bit;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand32bit);
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <RNG_PlayerTurn+0x20>)
 8000a70:	f006 f828 	bl	8006ac4 <HAL_RNG_GenerateRandomNumber>
	RNG_PiecePlacement(rand32bit);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f806 	bl	8000a88 <RNG_PiecePlacement>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000d4 	.word	0x200000d4

08000a88 <RNG_PiecePlacement>:


void RNG_PiecePlacement(uint32_t num)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	uint8_t column_num = num % 7;
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <RNG_PiecePlacement+0x98>)
 8000a94:	fba3 1302 	umull	r1, r3, r3, r2
 8000a98:	1ad1      	subs	r1, r2, r3
 8000a9a:	0849      	lsrs	r1, r1, #1
 8000a9c:	440b      	add	r3, r1
 8000a9e:	0899      	lsrs	r1, r3, #2
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	1a5b      	subs	r3, r3, r1
 8000aa6:	1ad1      	subs	r1, r2, r3
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	73fb      	strb	r3, [r7, #15]

				switch(column_num)
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b05      	cmp	r3, #5
 8000ab0:	d82c      	bhi.n	8000b0c <RNG_PiecePlacement+0x84>
 8000ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab8 <RNG_PiecePlacement+0x30>)
 8000ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab8:	08000ad1 	.word	0x08000ad1
 8000abc:	08000adb 	.word	0x08000adb
 8000ac0:	08000ae5 	.word	0x08000ae5
 8000ac4:	08000aef 	.word	0x08000aef
 8000ac8:	08000af9 	.word	0x08000af9
 8000acc:	08000b03 	.word	0x08000b03
				{
				case COLUMN1:
					GAME_MatrixHandling(COLUMN1, PLAYER_TWO_TOKEN);
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f9ae 	bl	8000e34 <GAME_MatrixHandling>
				break;
 8000ad8:	e01d      	b.n	8000b16 <RNG_PiecePlacement+0x8e>

				case COLUMN2:
					GAME_MatrixHandling(COLUMN2, PLAYER_TWO_TOKEN);
 8000ada:	2102      	movs	r1, #2
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 f9a9 	bl	8000e34 <GAME_MatrixHandling>
				break;
 8000ae2:	e018      	b.n	8000b16 <RNG_PiecePlacement+0x8e>

				case COLUMN3:

					GAME_MatrixHandling(COLUMN3, PLAYER_TWO_TOKEN);
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f000 f9a4 	bl	8000e34 <GAME_MatrixHandling>
				break;
 8000aec:	e013      	b.n	8000b16 <RNG_PiecePlacement+0x8e>

				case COLUMN4:

					GAME_MatrixHandling(COLUMN4, PLAYER_TWO_TOKEN);
 8000aee:	2102      	movs	r1, #2
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f99f 	bl	8000e34 <GAME_MatrixHandling>
				break;
 8000af6:	e00e      	b.n	8000b16 <RNG_PiecePlacement+0x8e>

				case COLUMN5:

					GAME_MatrixHandling(COLUMN5, PLAYER_TWO_TOKEN);
 8000af8:	2102      	movs	r1, #2
 8000afa:	2004      	movs	r0, #4
 8000afc:	f000 f99a 	bl	8000e34 <GAME_MatrixHandling>
				break;
 8000b00:	e009      	b.n	8000b16 <RNG_PiecePlacement+0x8e>

				case COLUMN6:
					GAME_MatrixHandling(COLUMN6, PLAYER_TWO_TOKEN);
 8000b02:	2102      	movs	r1, #2
 8000b04:	2005      	movs	r0, #5
 8000b06:	f000 f995 	bl	8000e34 <GAME_MatrixHandling>
				break;
 8000b0a:	e004      	b.n	8000b16 <RNG_PiecePlacement+0x8e>

				default:
					GAME_MatrixHandling(COLUMN7, PLAYER_TWO_TOKEN);
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	2006      	movs	r0, #6
 8000b10:	f000 f990 	bl	8000e34 <GAME_MatrixHandling>
				break;
 8000b14:	bf00      	nop
				}
		}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	24924925 	.word	0x24924925

08000b24 <PLAYER_PiecePlacement>:



void PLAYER_PiecePlacement(float vert_column)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	ed87 0a01 	vstr	s0, [r7, #4]

	if(vert_column >= (COLUMN_ONE - 0.5) && vert_column < (COLUMN_ONE + 0.5))
 8000b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b32:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8000b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3e:	db0d      	blt.n	8000b5c <PLAYER_PiecePlacement+0x38>
 8000b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b44:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8000b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b50:	d504      	bpl.n	8000b5c <PLAYER_PiecePlacement+0x38>
	{
		GAME_MatrixHandling(COLUMN1, PLAYER_ONE_TOKEN);
 8000b52:	2101      	movs	r1, #1
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f96d 	bl	8000e34 <GAME_MatrixHandling>
 8000b5a:	e08b      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_TWO - 0.5) && vert_column < (COLUMN_TWO + 0.5))
 8000b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b60:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000c7c <PLAYER_PiecePlacement+0x158>
 8000b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6c:	db0d      	blt.n	8000b8a <PLAYER_PiecePlacement+0x66>
 8000b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b72:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000c80 <PLAYER_PiecePlacement+0x15c>
 8000b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7e:	d504      	bpl.n	8000b8a <PLAYER_PiecePlacement+0x66>
	{
		GAME_MatrixHandling(COLUMN2, PLAYER_ONE_TOKEN);
 8000b80:	2101      	movs	r1, #1
 8000b82:	2001      	movs	r0, #1
 8000b84:	f000 f956 	bl	8000e34 <GAME_MatrixHandling>
 8000b88:	e074      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_THREE - 0.5) && vert_column < (COLUMN_THREE + 0.5))
 8000b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b8e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000c84 <PLAYER_PiecePlacement+0x160>
 8000b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9a:	db0d      	blt.n	8000bb8 <PLAYER_PiecePlacement+0x94>
 8000b9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba0:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000c88 <PLAYER_PiecePlacement+0x164>
 8000ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bac:	d504      	bpl.n	8000bb8 <PLAYER_PiecePlacement+0x94>
	{
		GAME_MatrixHandling(COLUMN3, PLAYER_ONE_TOKEN);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f000 f93f 	bl	8000e34 <GAME_MatrixHandling>
 8000bb6:	e05d      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_FOUR - 0.5) && vert_column < (COLUMN_FOUR + 0.5))
 8000bb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bbc:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000c8c <PLAYER_PiecePlacement+0x168>
 8000bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc8:	db0d      	blt.n	8000be6 <PLAYER_PiecePlacement+0xc2>
 8000bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bce:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000c90 <PLAYER_PiecePlacement+0x16c>
 8000bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bda:	d504      	bpl.n	8000be6 <PLAYER_PiecePlacement+0xc2>
	{
		GAME_MatrixHandling(COLUMN4, PLAYER_ONE_TOKEN);
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 f928 	bl	8000e34 <GAME_MatrixHandling>
 8000be4:	e046      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_FIVE - 0.5) && vert_column < (COLUMN_FIVE + 0.5))
 8000be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bea:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000c94 <PLAYER_PiecePlacement+0x170>
 8000bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf6:	db0d      	blt.n	8000c14 <PLAYER_PiecePlacement+0xf0>
 8000bf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bfc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c98 <PLAYER_PiecePlacement+0x174>
 8000c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c08:	d504      	bpl.n	8000c14 <PLAYER_PiecePlacement+0xf0>
	{
		GAME_MatrixHandling(COLUMN5, PLAYER_ONE_TOKEN);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f000 f911 	bl	8000e34 <GAME_MatrixHandling>
 8000c12:	e02f      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_SIX - 0.5) && vert_column < (COLUMN_SIX + 0.5))
 8000c14:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c18:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000c9c <PLAYER_PiecePlacement+0x178>
 8000c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c24:	db0d      	blt.n	8000c42 <PLAYER_PiecePlacement+0x11e>
 8000c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c2a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000ca0 <PLAYER_PiecePlacement+0x17c>
 8000c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c36:	d504      	bpl.n	8000c42 <PLAYER_PiecePlacement+0x11e>
	{
		GAME_MatrixHandling(COLUMN6, PLAYER_ONE_TOKEN);
 8000c38:	2101      	movs	r1, #1
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f000 f8fa 	bl	8000e34 <GAME_MatrixHandling>
 8000c40:	e018      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_SEVEN - 0.5) && vert_column < (COLUMN_SEVEN + 0.5))
 8000c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c46:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ca4 <PLAYER_PiecePlacement+0x180>
 8000c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c52:	da00      	bge.n	8000c56 <PLAYER_PiecePlacement+0x132>
	{
		GAME_MatrixHandling(COLUMN7, PLAYER_ONE_TOKEN);
	}
}
 8000c54:	e00e      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
	else if(vert_column >= (COLUMN_SEVEN - 0.5) && vert_column < (COLUMN_SEVEN + 0.5))
 8000c56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c5a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000ca8 <PLAYER_PiecePlacement+0x184>
 8000c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c66:	d400      	bmi.n	8000c6a <PLAYER_PiecePlacement+0x146>
}
 8000c68:	e004      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
		GAME_MatrixHandling(COLUMN7, PLAYER_ONE_TOKEN);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f000 f8e1 	bl	8000e34 <GAME_MatrixHandling>
}
 8000c72:	e7ff      	b.n	8000c74 <PLAYER_PiecePlacement+0x150>
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	423c0000 	.word	0x423c0000
 8000c80:	42400000 	.word	0x42400000
 8000c84:	42a40000 	.word	0x42a40000
 8000c88:	42a60000 	.word	0x42a60000
 8000c8c:	42ea0000 	.word	0x42ea0000
 8000c90:	42ec0000 	.word	0x42ec0000
 8000c94:	43180000 	.word	0x43180000
 8000c98:	43190000 	.word	0x43190000
 8000c9c:	433b0000 	.word	0x433b0000
 8000ca0:	433c0000 	.word	0x433c0000
 8000ca4:	435e0000 	.word	0x435e0000
 8000ca8:	435f0000 	.word	0x435f0000

08000cac <PLAYER_GreyPiecePlacement>:


void PLAYER_GreyPiecePlacement(float vert_column)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	ed87 0a01 	vstr	s0, [r7, #4]

	if(vert_column >= (COLUMN_ONE - 0.5) && vert_column < (COLUMN_ONE + 0.5))
 8000cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cba:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8000cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc6:	db0d      	blt.n	8000ce4 <PLAYER_GreyPiecePlacement+0x38>
 8000cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ccc:	eeb2 7a0a 	vmov.f32	s14, #42	@ 0x41500000  13.0
 8000cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	d504      	bpl.n	8000ce4 <PLAYER_GreyPiecePlacement+0x38>
	{
		GAME_MatrixHandling(COLUMN1, PLAYER_TWO_TOKEN);
 8000cda:	2102      	movs	r1, #2
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 f8a9 	bl	8000e34 <GAME_MatrixHandling>
 8000ce2:	e08b      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_TWO - 0.5) && vert_column < (COLUMN_TWO + 0.5))
 8000ce4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ce8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8000e04 <PLAYER_GreyPiecePlacement+0x158>
 8000cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	db0d      	blt.n	8000d12 <PLAYER_GreyPiecePlacement+0x66>
 8000cf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cfa:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000e08 <PLAYER_GreyPiecePlacement+0x15c>
 8000cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d06:	d504      	bpl.n	8000d12 <PLAYER_GreyPiecePlacement+0x66>
	{
		GAME_MatrixHandling(COLUMN2, PLAYER_TWO_TOKEN);
 8000d08:	2102      	movs	r1, #2
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 f892 	bl	8000e34 <GAME_MatrixHandling>
 8000d10:	e074      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_THREE - 0.5) && vert_column < (COLUMN_THREE + 0.5))
 8000d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d16:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000e0c <PLAYER_GreyPiecePlacement+0x160>
 8000d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d22:	db0d      	blt.n	8000d40 <PLAYER_GreyPiecePlacement+0x94>
 8000d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d28:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000e10 <PLAYER_GreyPiecePlacement+0x164>
 8000d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d34:	d504      	bpl.n	8000d40 <PLAYER_GreyPiecePlacement+0x94>
	{
		GAME_MatrixHandling(COLUMN3, PLAYER_TWO_TOKEN);
 8000d36:	2102      	movs	r1, #2
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f000 f87b 	bl	8000e34 <GAME_MatrixHandling>
 8000d3e:	e05d      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_FOUR - 0.5) && vert_column < (COLUMN_FOUR + 0.5))
 8000d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d44:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000e14 <PLAYER_GreyPiecePlacement+0x168>
 8000d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	db0d      	blt.n	8000d6e <PLAYER_GreyPiecePlacement+0xc2>
 8000d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d56:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000e18 <PLAYER_GreyPiecePlacement+0x16c>
 8000d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d62:	d504      	bpl.n	8000d6e <PLAYER_GreyPiecePlacement+0xc2>
	{
		GAME_MatrixHandling(COLUMN4, PLAYER_TWO_TOKEN);
 8000d64:	2102      	movs	r1, #2
 8000d66:	2003      	movs	r0, #3
 8000d68:	f000 f864 	bl	8000e34 <GAME_MatrixHandling>
 8000d6c:	e046      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_FIVE - 0.5) && vert_column < (COLUMN_FIVE + 0.5))
 8000d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d72:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000e1c <PLAYER_GreyPiecePlacement+0x170>
 8000d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	db0d      	blt.n	8000d9c <PLAYER_GreyPiecePlacement+0xf0>
 8000d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d84:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000e20 <PLAYER_GreyPiecePlacement+0x174>
 8000d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	d504      	bpl.n	8000d9c <PLAYER_GreyPiecePlacement+0xf0>
	{
		GAME_MatrixHandling(COLUMN5, PLAYER_TWO_TOKEN);
 8000d92:	2102      	movs	r1, #2
 8000d94:	2004      	movs	r0, #4
 8000d96:	f000 f84d 	bl	8000e34 <GAME_MatrixHandling>
 8000d9a:	e02f      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_SIX - 0.5) && vert_column < (COLUMN_SIX + 0.5))
 8000d9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000da0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000e24 <PLAYER_GreyPiecePlacement+0x178>
 8000da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	db0d      	blt.n	8000dca <PLAYER_GreyPiecePlacement+0x11e>
 8000dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000e28 <PLAYER_GreyPiecePlacement+0x17c>
 8000db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbe:	d504      	bpl.n	8000dca <PLAYER_GreyPiecePlacement+0x11e>
	{
		GAME_MatrixHandling(COLUMN6, PLAYER_TWO_TOKEN);
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	2005      	movs	r0, #5
 8000dc4:	f000 f836 	bl	8000e34 <GAME_MatrixHandling>
 8000dc8:	e018      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
	}

	else if(vert_column >= (COLUMN_SEVEN - 0.5) && vert_column < (COLUMN_SEVEN + 0.5))
 8000dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dce:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000e2c <PLAYER_GreyPiecePlacement+0x180>
 8000dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dda:	da00      	bge.n	8000dde <PLAYER_GreyPiecePlacement+0x132>
	{
		GAME_MatrixHandling(COLUMN7, PLAYER_TWO_TOKEN);
	}
}
 8000ddc:	e00e      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
	else if(vert_column >= (COLUMN_SEVEN - 0.5) && vert_column < (COLUMN_SEVEN + 0.5))
 8000dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000e30 <PLAYER_GreyPiecePlacement+0x184>
 8000de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dee:	d400      	bmi.n	8000df2 <PLAYER_GreyPiecePlacement+0x146>
}
 8000df0:	e004      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
		GAME_MatrixHandling(COLUMN7, PLAYER_TWO_TOKEN);
 8000df2:	2102      	movs	r1, #2
 8000df4:	2006      	movs	r0, #6
 8000df6:	f000 f81d 	bl	8000e34 <GAME_MatrixHandling>
}
 8000dfa:	e7ff      	b.n	8000dfc <PLAYER_GreyPiecePlacement+0x150>
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	423c0000 	.word	0x423c0000
 8000e08:	42400000 	.word	0x42400000
 8000e0c:	42a40000 	.word	0x42a40000
 8000e10:	42a60000 	.word	0x42a60000
 8000e14:	42ea0000 	.word	0x42ea0000
 8000e18:	42ec0000 	.word	0x42ec0000
 8000e1c:	43180000 	.word	0x43180000
 8000e20:	43190000 	.word	0x43190000
 8000e24:	433b0000 	.word	0x433b0000
 8000e28:	433c0000 	.word	0x433c0000
 8000e2c:	435e0000 	.word	0x435e0000
 8000e30:	435f0000 	.word	0x435f0000

08000e34 <GAME_MatrixHandling>:




void GAME_MatrixHandling(uint8_t column_num, uint8_t player_token)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	4613      	mov	r3, r2
 8000e42:	71bb      	strb	r3, [r7, #6]

	for(uint8_t row_num = 0; row_num < 6; row_num++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e061      	b.n	8000f0e <GAME_MatrixHandling+0xda>
	{
		if(game_board[row_num][column_num] == 0)
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	79f9      	ldrb	r1, [r7, #7]
 8000e4e:	4834      	ldr	r0, [pc, #208]	@ (8000f20 <GAME_MatrixHandling+0xec>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	4403      	add	r3, r0
 8000e58:	440b      	add	r3, r1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d153      	bne.n	8000f08 <GAME_MatrixHandling+0xd4>
		{
			game_board[row_num][column_num] = player_token;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	79f9      	ldrb	r1, [r7, #7]
 8000e64:	482e      	ldr	r0, [pc, #184]	@ (8000f20 <GAME_MatrixHandling+0xec>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	4403      	add	r3, r0
 8000e6e:	440b      	add	r3, r1
 8000e70:	79ba      	ldrb	r2, [r7, #6]
 8000e72:	701a      	strb	r2, [r3, #0]
				switch(row_num)
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d844      	bhi.n	8000f04 <GAME_MatrixHandling+0xd0>
 8000e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <GAME_MatrixHandling+0x4c>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000eab 	.word	0x08000eab
 8000e88:	08000ebd 	.word	0x08000ebd
 8000e8c:	08000ecf 	.word	0x08000ecf
 8000e90:	08000ee1 	.word	0x08000ee1
 8000e94:	08000ef3 	.word	0x08000ef3
				{
				case ROW1:
					PIECE_PlayerColor(player_token, ROW_ZERO, column_num);
 8000e98:	79fa      	ldrb	r2, [r7, #7]
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8000f24 <GAME_MatrixHandling+0xf0>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f84a 	bl	8000f3c <PIECE_PlayerColor>
				break;
 8000ea8:	e02d      	b.n	8000f06 <GAME_MatrixHandling+0xd2>

				case ROW2:
					PIECE_PlayerColor(player_token, ROW_ONE, column_num);
 8000eaa:	79fa      	ldrb	r2, [r7, #7]
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8000f28 <GAME_MatrixHandling+0xf4>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f841 	bl	8000f3c <PIECE_PlayerColor>
				break;
 8000eba:	e024      	b.n	8000f06 <GAME_MatrixHandling+0xd2>

				case ROW3:

					PIECE_PlayerColor(player_token, ROW_TWO, column_num);
 8000ebc:	79fa      	ldrb	r2, [r7, #7]
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8000f2c <GAME_MatrixHandling+0xf8>
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f838 	bl	8000f3c <PIECE_PlayerColor>
				break;
 8000ecc:	e01b      	b.n	8000f06 <GAME_MatrixHandling+0xd2>

				case ROW4:

					PIECE_PlayerColor(player_token, ROW_THREE, column_num);
 8000ece:	79fa      	ldrb	r2, [r7, #7]
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8000f30 <GAME_MatrixHandling+0xfc>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f82f 	bl	8000f3c <PIECE_PlayerColor>
				break;
 8000ede:	e012      	b.n	8000f06 <GAME_MatrixHandling+0xd2>

				case ROW5:

					PIECE_PlayerColor(player_token, ROW_FOUR, column_num);
 8000ee0:	79fa      	ldrb	r2, [r7, #7]
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000f34 <GAME_MatrixHandling+0x100>
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f826 	bl	8000f3c <PIECE_PlayerColor>
				break;
 8000ef0:	e009      	b.n	8000f06 <GAME_MatrixHandling+0xd2>

				case ROW6:
					PIECE_PlayerColor(player_token, ROW_FIVE, column_num);
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000f38 <GAME_MatrixHandling+0x104>
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f81d 	bl	8000f3c <PIECE_PlayerColor>
				break;
 8000f02:	e000      	b.n	8000f06 <GAME_MatrixHandling+0xd2>

				default:

				break;
 8000f04:	bf00      	nop
				}

			break; // get out of loop
 8000f06:	e006      	b.n	8000f16 <GAME_MatrixHandling+0xe2>
	for(uint8_t row_num = 0; row_num < 6; row_num++)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d99a      	bls.n	8000e4a <GAME_MatrixHandling+0x16>
		}

	}

}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000a4 	.word	0x200000a4
 8000f24:	43938000 	.word	0x43938000
 8000f28:	437a0000 	.word	0x437a0000
 8000f2c:	43520000 	.word	0x43520000
 8000f30:	43200000 	.word	0x43200000
 8000f34:	42f00000 	.word	0x42f00000
 8000f38:	428c0000 	.word	0x428c0000

08000f3c <PIECE_PlayerColor>:

void PIECE_PlayerColor(uint8_t color, float row, uint8_t column)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	ed87 0a00 	vstr	s0, [r7]
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
	switch(color)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d002      	beq.n	8000f5c <PIECE_PlayerColor+0x20>
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d00f      	beq.n	8000f7a <PIECE_PlayerColor+0x3e>
		{
			LCD_Draw_Circle_Fill(COLUMN_SEVEN,row,12,LCD_COLOR_GREY);
		}
	break;
	}
}
 8000f5a:	e085      	b.n	8001068 <PIECE_PlayerColor+0x12c>
		LCD_Draw_Circle_Fill(current_position,row,12,LCD_COLOR_BLUE);
 8000f5c:	4b44      	ldr	r3, [pc, #272]	@ (8001070 <PIECE_PlayerColor+0x134>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	edd7 7a00 	vldr	s15, [r7]
 8000f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f6a:	ee17 3a90 	vmov	r3, s15
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	231f      	movs	r3, #31
 8000f72:	220c      	movs	r2, #12
 8000f74:	f001 f88c 	bl	8002090 <LCD_Draw_Circle_Fill>
	break;
 8000f78:	e076      	b.n	8001068 <PIECE_PlayerColor+0x12c>
		if(column == COLUMN1)
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10d      	bne.n	8000f9c <PIECE_PlayerColor+0x60>
			LCD_Draw_Circle_Fill(COLUMN_ONE,row,12,LCD_COLOR_GREY);
 8000f80:	edd7 7a00 	vldr	s15, [r7]
 8000f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f88:	ee17 3a90 	vmov	r3, s15
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000f92:	220c      	movs	r2, #12
 8000f94:	200c      	movs	r0, #12
 8000f96:	f001 f87b 	bl	8002090 <LCD_Draw_Circle_Fill>
	break;
 8000f9a:	e064      	b.n	8001066 <PIECE_PlayerColor+0x12a>
		else if(column == COLUMN2)
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d10d      	bne.n	8000fbe <PIECE_PlayerColor+0x82>
			LCD_Draw_Circle_Fill(COLUMN_TWO,row,12,LCD_COLOR_GREY);
 8000fa2:	edd7 7a00 	vldr	s15, [r7]
 8000fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000faa:	ee17 3a90 	vmov	r3, s15
 8000fae:	b299      	uxth	r1, r3
 8000fb0:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000fb4:	220c      	movs	r2, #12
 8000fb6:	202f      	movs	r0, #47	@ 0x2f
 8000fb8:	f001 f86a 	bl	8002090 <LCD_Draw_Circle_Fill>
	break;
 8000fbc:	e053      	b.n	8001066 <PIECE_PlayerColor+0x12a>
		else if(column == COLUMN3)
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d10d      	bne.n	8000fe0 <PIECE_PlayerColor+0xa4>
			LCD_Draw_Circle_Fill(COLUMN_THREE,row,12,LCD_COLOR_GREY);
 8000fc4:	edd7 7a00 	vldr	s15, [r7]
 8000fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fcc:	ee17 3a90 	vmov	r3, s15
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	2052      	movs	r0, #82	@ 0x52
 8000fda:	f001 f859 	bl	8002090 <LCD_Draw_Circle_Fill>
	break;
 8000fde:	e042      	b.n	8001066 <PIECE_PlayerColor+0x12a>
		else if(column == COLUMN4)
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d10d      	bne.n	8001002 <PIECE_PlayerColor+0xc6>
			LCD_Draw_Circle_Fill(COLUMN_FOUR,row,12,LCD_COLOR_GREY);
 8000fe6:	edd7 7a00 	vldr	s15, [r7]
 8000fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fee:	ee17 3a90 	vmov	r3, s15
 8000ff2:	b299      	uxth	r1, r3
 8000ff4:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	2075      	movs	r0, #117	@ 0x75
 8000ffc:	f001 f848 	bl	8002090 <LCD_Draw_Circle_Fill>
	break;
 8001000:	e031      	b.n	8001066 <PIECE_PlayerColor+0x12a>
		else if(column == COLUMN5)
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	2b04      	cmp	r3, #4
 8001006:	d10d      	bne.n	8001024 <PIECE_PlayerColor+0xe8>
			LCD_Draw_Circle_Fill(COLUMN_FIVE,row,12,LCD_COLOR_GREY);
 8001008:	edd7 7a00 	vldr	s15, [r7]
 800100c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001010:	ee17 3a90 	vmov	r3, s15
 8001014:	b299      	uxth	r1, r3
 8001016:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 800101a:	220c      	movs	r2, #12
 800101c:	2098      	movs	r0, #152	@ 0x98
 800101e:	f001 f837 	bl	8002090 <LCD_Draw_Circle_Fill>
	break;
 8001022:	e020      	b.n	8001066 <PIECE_PlayerColor+0x12a>
		else if(column == COLUMN6)
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d10d      	bne.n	8001046 <PIECE_PlayerColor+0x10a>
			LCD_Draw_Circle_Fill(COLUMN_SIX,row,12,LCD_COLOR_GREY);
 800102a:	edd7 7a00 	vldr	s15, [r7]
 800102e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001032:	ee17 3a90 	vmov	r3, s15
 8001036:	b299      	uxth	r1, r3
 8001038:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 800103c:	220c      	movs	r2, #12
 800103e:	20bb      	movs	r0, #187	@ 0xbb
 8001040:	f001 f826 	bl	8002090 <LCD_Draw_Circle_Fill>
	break;
 8001044:	e00f      	b.n	8001066 <PIECE_PlayerColor+0x12a>
		else if(column == COLUMN7)
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	2b06      	cmp	r3, #6
 800104a:	d10c      	bne.n	8001066 <PIECE_PlayerColor+0x12a>
			LCD_Draw_Circle_Fill(COLUMN_SEVEN,row,12,LCD_COLOR_GREY);
 800104c:	edd7 7a00 	vldr	s15, [r7]
 8001050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001054:	ee17 3a90 	vmov	r3, s15
 8001058:	b299      	uxth	r1, r3
 800105a:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 800105e:	220c      	movs	r2, #12
 8001060:	20de      	movs	r0, #222	@ 0xde
 8001062:	f001 f815 	bl	8002090 <LCD_Draw_Circle_Fill>
	break;
 8001066:	bf00      	nop
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000002 	.word	0x20000002

08001074 <LCD_PieceMovement>:




void LCD_PieceMovement(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	while(PlayerOneChoice)
 8001078:	e053      	b.n	8001122 <LCD_PieceMovement+0xae>
	{

	  if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 800107a:	482d      	ldr	r0, [pc, #180]	@ (8001130 <LCD_PieceMovement+0xbc>)
 800107c:	f001 f98d 	bl	800239a <returnTouchStateAndLocation>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d146      	bne.n	8001114 <LCD_PieceMovement+0xa0>
	  {
		/* Touch valid */
		printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 8001086:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <LCD_PieceMovement+0xbc>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <LCD_PieceMovement+0xbc>)
 800108e:	885b      	ldrh	r3, [r3, #2]
 8001090:	461a      	mov	r2, r3
 8001092:	4828      	ldr	r0, [pc, #160]	@ (8001134 <LCD_PieceMovement+0xc0>)
 8001094:	f006 fbe6 	bl	8007864 <iprintf>
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2)
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <LCD_PieceMovement+0xbc>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	2b77      	cmp	r3, #119	@ 0x77
 800109e:	d812      	bhi.n	80010c6 <LCD_PieceMovement+0x52>
		{
			if(current_position > COLUMN_ONE)
 80010a0:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d920      	bls.n	80010ea <LCD_PieceMovement+0x76>
			{
				previous_position = current_position;
 80010a8:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <LCD_PieceMovement+0xc8>)
 80010ae:	701a      	strb	r2, [r3, #0]
				new_position = current_position - 35;
 80010b0:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	3b23      	subs	r3, #35	@ 0x23
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <LCD_PieceMovement+0xcc>)
 80010ba:	701a      	strb	r2, [r3, #0]
				current_position = new_position;
 80010bc:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <LCD_PieceMovement+0xcc>)
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e011      	b.n	80010ea <LCD_PieceMovement+0x76>
			}
		}
		else
		{
			if(current_position < COLUMN_SIX)
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2bbb      	cmp	r3, #187	@ 0xbb
 80010cc:	d80d      	bhi.n	80010ea <LCD_PieceMovement+0x76>
			{
				previous_position = current_position;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <LCD_PieceMovement+0xc8>)
 80010d4:	701a      	strb	r2, [r3, #0]
				new_position = current_position + 35;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3323      	adds	r3, #35	@ 0x23
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <LCD_PieceMovement+0xcc>)
 80010e0:	701a      	strb	r2, [r3, #0]
				current_position = new_position;
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <LCD_PieceMovement+0xcc>)
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010e8:	701a      	strb	r2, [r3, #0]
			}
		}
		LCD_Draw_Circle_Fill(previous_position,ROW_SIX,12,LCD_COLOR_WHITE);
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <LCD_PieceMovement+0xc8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010f4:	220c      	movs	r2, #12
 80010f6:	2119      	movs	r1, #25
 80010f8:	f000 ffca 	bl	8002090 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(current_position,ROW_SIX,12,LCD_COLOR_BLUE);
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <LCD_PieceMovement+0xc4>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	231f      	movs	r3, #31
 8001104:	220c      	movs	r2, #12
 8001106:	2119      	movs	r1, #25
 8001108:	f000 ffc2 	bl	8002090 <LCD_Draw_Circle_Fill>
		HAL_Delay(300);
 800110c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001110:	f002 fef8 	bl	8003f04 <HAL_Delay>
	  }
	  else
	  {
		  // keep waiting for button push or piece movement
	  }
	  if(InterruptPress == 1)
 8001114:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <LCD_PieceMovement+0xd0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <LCD_PieceMovement+0xae>
	  {
		  PlayerOneChoice = 0;
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <LCD_PieceMovement+0xd4>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
	while(PlayerOneChoice)
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <LCD_PieceMovement+0xd4>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1a7      	bne.n	800107a <LCD_PieceMovement+0x6>
	  }
	}


}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000098 	.word	0x20000098
 8001134:	08008614 	.word	0x08008614
 8001138:	20000002 	.word	0x20000002
 800113c:	200000a2 	.word	0x200000a2
 8001140:	200000a1 	.word	0x200000a1
 8001144:	200000a0 	.word	0x200000a0
 8001148:	20000000 	.word	0x20000000

0800114c <LCD_PlayerTwoPieceMovement>:

void LCD_PlayerTwoPieceMovement()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	while(PlayerTwoChoice)
 8001150:	e054      	b.n	80011fc <LCD_PlayerTwoPieceMovement+0xb0>
	{

	  if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 8001152:	482e      	ldr	r0, [pc, #184]	@ (800120c <LCD_PlayerTwoPieceMovement+0xc0>)
 8001154:	f001 f921 	bl	800239a <returnTouchStateAndLocation>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d147      	bne.n	80011ee <LCD_PlayerTwoPieceMovement+0xa2>
	  {
		/* Touch valid */
		printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 800115e:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <LCD_PlayerTwoPieceMovement+0xc0>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4b29      	ldr	r3, [pc, #164]	@ (800120c <LCD_PlayerTwoPieceMovement+0xc0>)
 8001166:	885b      	ldrh	r3, [r3, #2]
 8001168:	461a      	mov	r2, r3
 800116a:	4829      	ldr	r0, [pc, #164]	@ (8001210 <LCD_PlayerTwoPieceMovement+0xc4>)
 800116c:	f006 fb7a 	bl	8007864 <iprintf>
		if(StaticTouchData.x < LCD_PIXEL_WIDTH/2)
 8001170:	4b26      	ldr	r3, [pc, #152]	@ (800120c <LCD_PlayerTwoPieceMovement+0xc0>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2b77      	cmp	r3, #119	@ 0x77
 8001176:	d812      	bhi.n	800119e <LCD_PlayerTwoPieceMovement+0x52>
		{
			if(current_position > COLUMN_ONE)
 8001178:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b0c      	cmp	r3, #12
 800117e:	d920      	bls.n	80011c2 <LCD_PlayerTwoPieceMovement+0x76>
			{
				previous_position = current_position;
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <LCD_PlayerTwoPieceMovement+0xcc>)
 8001186:	701a      	strb	r2, [r3, #0]
				new_position = current_position - 35;
 8001188:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	3b23      	subs	r3, #35	@ 0x23
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b22      	ldr	r3, [pc, #136]	@ (800121c <LCD_PlayerTwoPieceMovement+0xd0>)
 8001192:	701a      	strb	r2, [r3, #0]
				current_position = new_position;
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <LCD_PlayerTwoPieceMovement+0xd0>)
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e011      	b.n	80011c2 <LCD_PlayerTwoPieceMovement+0x76>
			}
		}
		else
		{
			if(current_position < COLUMN_SIX)
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bbb      	cmp	r3, #187	@ 0xbb
 80011a4:	d80d      	bhi.n	80011c2 <LCD_PlayerTwoPieceMovement+0x76>
			{
				previous_position = current_position;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <LCD_PlayerTwoPieceMovement+0xcc>)
 80011ac:	701a      	strb	r2, [r3, #0]
				new_position = current_position + 35;
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	3323      	adds	r3, #35	@ 0x23
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <LCD_PlayerTwoPieceMovement+0xd0>)
 80011b8:	701a      	strb	r2, [r3, #0]
				current_position = new_position;
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <LCD_PlayerTwoPieceMovement+0xd0>)
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 80011c0:	701a      	strb	r2, [r3, #0]
			}
		}
		LCD_Draw_Circle_Fill(previous_position,ROW_SIX,12,LCD_COLOR_WHITE);
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <LCD_PlayerTwoPieceMovement+0xcc>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011cc:	220c      	movs	r2, #12
 80011ce:	2119      	movs	r1, #25
 80011d0:	f000 ff5e 	bl	8002090 <LCD_Draw_Circle_Fill>
		LCD_Draw_Circle_Fill(current_position,ROW_SIX,12,LCD_COLOR_GREY);
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <LCD_PlayerTwoPieceMovement+0xc8>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 80011de:	220c      	movs	r2, #12
 80011e0:	2119      	movs	r1, #25
 80011e2:	f000 ff55 	bl	8002090 <LCD_Draw_Circle_Fill>
		HAL_Delay(300);
 80011e6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011ea:	f002 fe8b 	bl	8003f04 <HAL_Delay>
	  }
	  else
	  {
		  // keep waiting for button push or piece movement
	  }
	  if(InterruptPress == 1)
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <LCD_PlayerTwoPieceMovement+0xd4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d102      	bne.n	80011fc <LCD_PlayerTwoPieceMovement+0xb0>
	  {
		  PlayerTwoChoice = 0;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <LCD_PlayerTwoPieceMovement+0xd8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
	while(PlayerTwoChoice)
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <LCD_PlayerTwoPieceMovement+0xd8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1a6      	bne.n	8001152 <LCD_PlayerTwoPieceMovement+0x6>
	  }
	}


}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000098 	.word	0x20000098
 8001210:	08008614 	.word	0x08008614
 8001214:	20000002 	.word	0x20000002
 8001218:	200000a2 	.word	0x200000a2
 800121c:	200000a1 	.word	0x200000a1
 8001220:	200000a0 	.word	0x200000a0
 8001224:	20000001 	.word	0x20000001

08001228 <check_questionMark>:




uint8_t check_questionMark(uint8_t GameBoard[rows][cols], uint8_t player_token)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
	// Check if there is a horizontal four in a row
	for(uint8_t ROW = 0; ROW < rows; ROW++)
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e03c      	b.n	80012b4 <check_questionMark+0x8c>
	{
		for(uint8_t COL = 0; COL <= (cols - 4); COL++)
 800123a:	2300      	movs	r3, #0
 800123c:	73bb      	strb	r3, [r7, #14]
 800123e:	e033      	b.n	80012a8 <check_questionMark+0x80>
		{
			if(GameBoard[ROW][COL] == player_token &&
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	4613      	mov	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	441a      	add	r2, r3
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	78fa      	ldrb	r2, [r7, #3]
 8001252:	429a      	cmp	r2, r3
 8001254:	d125      	bne.n	80012a2 <check_questionMark+0x7a>
			   GameBoard[ROW][COL + 1] == player_token &&
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	441a      	add	r2, r3
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	3301      	adds	r3, #1
 8001266:	5cd3      	ldrb	r3, [r2, r3]
			if(GameBoard[ROW][COL] == player_token &&
 8001268:	78fa      	ldrb	r2, [r7, #3]
 800126a:	429a      	cmp	r2, r3
 800126c:	d119      	bne.n	80012a2 <check_questionMark+0x7a>
			   GameBoard[ROW][COL + 2] == player_token &&
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	441a      	add	r2, r3
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	3302      	adds	r3, #2
 800127e:	5cd3      	ldrb	r3, [r2, r3]
			   GameBoard[ROW][COL + 1] == player_token &&
 8001280:	78fa      	ldrb	r2, [r7, #3]
 8001282:	429a      	cmp	r2, r3
 8001284:	d10d      	bne.n	80012a2 <check_questionMark+0x7a>
			   GameBoard[ROW][COL + 3] == player_token)
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	4613      	mov	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	1a9b      	subs	r3, r3, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	441a      	add	r2, r3
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	3303      	adds	r3, #3
 8001296:	5cd3      	ldrb	r3, [r2, r3]
			   GameBoard[ROW][COL + 2] == player_token &&
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	429a      	cmp	r2, r3
 800129c:	d101      	bne.n	80012a2 <check_questionMark+0x7a>
			{
				return 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	e0db      	b.n	800145a <check_questionMark+0x232>
		for(uint8_t COL = 0; COL <= (cols - 4); COL++)
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	3301      	adds	r3, #1
 80012a6:	73bb      	strb	r3, [r7, #14]
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d9c8      	bls.n	8001240 <check_questionMark+0x18>
	for(uint8_t ROW = 0; ROW < rows; ROW++)
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	3301      	adds	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d9bf      	bls.n	800123a <check_questionMark+0x12>
			}
		}
	}

	//Check if there four in a row vertically
	for(uint8_t COL = 0; COL < cols; COL++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	737b      	strb	r3, [r7, #13]
 80012be:	e03c      	b.n	800133a <check_questionMark+0x112>
	{
		for(uint8_t ROW = 0; ROW <= (rows - 4); ROW++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	733b      	strb	r3, [r7, #12]
 80012c4:	e033      	b.n	800132e <check_questionMark+0x106>
		{
			if(GameBoard[ROW][COL] == player_token &&
 80012c6:	7b3a      	ldrb	r2, [r7, #12]
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	441a      	add	r2, r3
 80012d2:	7b7b      	ldrb	r3, [r7, #13]
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	78fa      	ldrb	r2, [r7, #3]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d125      	bne.n	8001328 <check_questionMark+0x100>
			   GameBoard[ROW + 1][COL] == player_token &&
 80012dc:	7b3b      	ldrb	r3, [r7, #12]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	441a      	add	r2, r3
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
			if(GameBoard[ROW][COL] == player_token &&
 80012ee:	78fa      	ldrb	r2, [r7, #3]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d119      	bne.n	8001328 <check_questionMark+0x100>
			   GameBoard[ROW + 2][COL] == player_token &&
 80012f4:	7b3a      	ldrb	r2, [r7, #12]
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	330e      	adds	r3, #14
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	441a      	add	r2, r3
 8001302:	7b7b      	ldrb	r3, [r7, #13]
 8001304:	5cd3      	ldrb	r3, [r2, r3]
			   GameBoard[ROW + 1][COL] == player_token &&
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	429a      	cmp	r2, r3
 800130a:	d10d      	bne.n	8001328 <check_questionMark+0x100>
			   GameBoard[ROW + 3][COL] == player_token)
 800130c:	7b3a      	ldrb	r2, [r7, #12]
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	3315      	adds	r3, #21
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	441a      	add	r2, r3
 800131a:	7b7b      	ldrb	r3, [r7, #13]
 800131c:	5cd3      	ldrb	r3, [r2, r3]
			   GameBoard[ROW + 2][COL] == player_token &&
 800131e:	78fa      	ldrb	r2, [r7, #3]
 8001320:	429a      	cmp	r2, r3
 8001322:	d101      	bne.n	8001328 <check_questionMark+0x100>
			{
				return 1;
 8001324:	2301      	movs	r3, #1
 8001326:	e098      	b.n	800145a <check_questionMark+0x232>
		for(uint8_t ROW = 0; ROW <= (rows - 4); ROW++)
 8001328:	7b3b      	ldrb	r3, [r7, #12]
 800132a:	3301      	adds	r3, #1
 800132c:	733b      	strb	r3, [r7, #12]
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d9c8      	bls.n	80012c6 <check_questionMark+0x9e>
	for(uint8_t COL = 0; COL < cols; COL++)
 8001334:	7b7b      	ldrb	r3, [r7, #13]
 8001336:	3301      	adds	r3, #1
 8001338:	737b      	strb	r3, [r7, #13]
 800133a:	7b7b      	ldrb	r3, [r7, #13]
 800133c:	2b06      	cmp	r3, #6
 800133e:	d9bf      	bls.n	80012c0 <check_questionMark+0x98>
			}
		}
	}

	// Diagonal
	for(uint8_t ROW = 3; ROW < rows; ROW++)
 8001340:	2303      	movs	r3, #3
 8001342:	72fb      	strb	r3, [r7, #11]
 8001344:	e03f      	b.n	80013c6 <check_questionMark+0x19e>
	{
		for(uint8_t COL = 0; COL <= (cols - 4); COL++)
 8001346:	2300      	movs	r3, #0
 8001348:	72bb      	strb	r3, [r7, #10]
 800134a:	e036      	b.n	80013ba <check_questionMark+0x192>
		{
			if(GameBoard[ROW][COL] == player_token &&
 800134c:	7afa      	ldrb	r2, [r7, #11]
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	441a      	add	r2, r3
 8001358:	7abb      	ldrb	r3, [r7, #10]
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	78fa      	ldrb	r2, [r7, #3]
 800135e:	429a      	cmp	r2, r3
 8001360:	d128      	bne.n	80013b4 <check_questionMark+0x18c>
			   GameBoard[ROW - 1][COL + 1] == player_token &&
 8001362:	7afa      	ldrb	r2, [r7, #11]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	3b07      	subs	r3, #7
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	441a      	add	r2, r3
 8001370:	7abb      	ldrb	r3, [r7, #10]
 8001372:	3301      	adds	r3, #1
 8001374:	5cd3      	ldrb	r3, [r2, r3]
			if(GameBoard[ROW][COL] == player_token &&
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	429a      	cmp	r2, r3
 800137a:	d11b      	bne.n	80013b4 <check_questionMark+0x18c>
			   GameBoard[ROW - 2][COL + 2] == player_token &&
 800137c:	7afa      	ldrb	r2, [r7, #11]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	3b0e      	subs	r3, #14
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	441a      	add	r2, r3
 800138a:	7abb      	ldrb	r3, [r7, #10]
 800138c:	3302      	adds	r3, #2
 800138e:	5cd3      	ldrb	r3, [r2, r3]
			   GameBoard[ROW - 1][COL + 1] == player_token &&
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	429a      	cmp	r2, r3
 8001394:	d10e      	bne.n	80013b4 <check_questionMark+0x18c>
			   GameBoard[ROW - 3][COL + 3] == player_token)
 8001396:	7afa      	ldrb	r2, [r7, #11]
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	3b15      	subs	r3, #21
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	441a      	add	r2, r3
 80013a4:	7abb      	ldrb	r3, [r7, #10]
 80013a6:	3303      	adds	r3, #3
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
			   GameBoard[ROW - 2][COL + 2] == player_token &&
 80013aa:	78fa      	ldrb	r2, [r7, #3]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d101      	bne.n	80013b4 <check_questionMark+0x18c>
			{
				return 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e052      	b.n	800145a <check_questionMark+0x232>
		for(uint8_t COL = 0; COL <= (cols - 4); COL++)
 80013b4:	7abb      	ldrb	r3, [r7, #10]
 80013b6:	3301      	adds	r3, #1
 80013b8:	72bb      	strb	r3, [r7, #10]
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d9c5      	bls.n	800134c <check_questionMark+0x124>
	for(uint8_t ROW = 3; ROW < rows; ROW++)
 80013c0:	7afb      	ldrb	r3, [r7, #11]
 80013c2:	3301      	adds	r3, #1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d9bc      	bls.n	8001346 <check_questionMark+0x11e>
			}
		}
	}

	for(uint8_t COL = 0; COL <= (cols - 4); COL++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	727b      	strb	r3, [r7, #9]
 80013d0:	e03f      	b.n	8001452 <check_questionMark+0x22a>
	{
		for(uint8_t ROW = 0; ROW <= (rows - 4); ROW++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	723b      	strb	r3, [r7, #8]
 80013d6:	e036      	b.n	8001446 <check_questionMark+0x21e>
		{
			if(GameBoard[ROW][COL] == player_token &&
 80013d8:	7a3a      	ldrb	r2, [r7, #8]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	441a      	add	r2, r3
 80013e4:	7a7b      	ldrb	r3, [r7, #9]
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	78fa      	ldrb	r2, [r7, #3]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d128      	bne.n	8001440 <check_questionMark+0x218>
			   GameBoard[ROW + 1][COL + 1] == player_token &&
 80013ee:	7a3b      	ldrb	r3, [r7, #8]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	441a      	add	r2, r3
 80013fc:	7a7b      	ldrb	r3, [r7, #9]
 80013fe:	3301      	adds	r3, #1
 8001400:	5cd3      	ldrb	r3, [r2, r3]
			if(GameBoard[ROW][COL] == player_token &&
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	429a      	cmp	r2, r3
 8001406:	d11b      	bne.n	8001440 <check_questionMark+0x218>
			   GameBoard[ROW + 2][COL + 2] == player_token &&
 8001408:	7a3a      	ldrb	r2, [r7, #8]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	330e      	adds	r3, #14
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	441a      	add	r2, r3
 8001416:	7a7b      	ldrb	r3, [r7, #9]
 8001418:	3302      	adds	r3, #2
 800141a:	5cd3      	ldrb	r3, [r2, r3]
			   GameBoard[ROW + 1][COL + 1] == player_token &&
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	429a      	cmp	r2, r3
 8001420:	d10e      	bne.n	8001440 <check_questionMark+0x218>
			   GameBoard[ROW + 3][COL + 3] == player_token)
 8001422:	7a3a      	ldrb	r2, [r7, #8]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	3315      	adds	r3, #21
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	441a      	add	r2, r3
 8001430:	7a7b      	ldrb	r3, [r7, #9]
 8001432:	3303      	adds	r3, #3
 8001434:	5cd3      	ldrb	r3, [r2, r3]
			   GameBoard[ROW + 2][COL + 2] == player_token &&
 8001436:	78fa      	ldrb	r2, [r7, #3]
 8001438:	429a      	cmp	r2, r3
 800143a:	d101      	bne.n	8001440 <check_questionMark+0x218>
			{
				return 1;
 800143c:	2301      	movs	r3, #1
 800143e:	e00c      	b.n	800145a <check_questionMark+0x232>
		for(uint8_t ROW = 0; ROW <= (rows - 4); ROW++)
 8001440:	7a3b      	ldrb	r3, [r7, #8]
 8001442:	3301      	adds	r3, #1
 8001444:	723b      	strb	r3, [r7, #8]
 8001446:	7a3b      	ldrb	r3, [r7, #8]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d9c5      	bls.n	80013d8 <check_questionMark+0x1b0>
	for(uint8_t COL = 0; COL <= (cols - 4); COL++)
 800144c:	7a7b      	ldrb	r3, [r7, #9]
 800144e:	3301      	adds	r3, #1
 8001450:	727b      	strb	r3, [r7, #9]
 8001452:	7a7b      	ldrb	r3, [r7, #9]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d9bc      	bls.n	80013d2 <check_questionMark+0x1aa>
			}
		}
	}


	return 0;
 8001458:	2300      	movs	r3, #0

}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <LCD_FinalScreen>:


/************************************ Final Screen **************************************/

void LCD_FinalScreen(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 800146c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001470:	2000      	movs	r0, #0
 8001472:	f000 feaf 	bl	80021d4 <LCD_Clear>
	while (1)
	{
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 8001476:	489b      	ldr	r0, [pc, #620]	@ (80016e4 <LCD_FinalScreen+0x27c>)
 8001478:	f000 ff8f 	bl	800239a <returnTouchStateAndLocation>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d117      	bne.n	80014b2 <LCD_FinalScreen+0x4a>
		{
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 8001482:	4b98      	ldr	r3, [pc, #608]	@ (80016e4 <LCD_FinalScreen+0x27c>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	4b96      	ldr	r3, [pc, #600]	@ (80016e4 <LCD_FinalScreen+0x27c>)
 800148a:	885b      	ldrh	r3, [r3, #2]
 800148c:	461a      	mov	r2, r3
 800148e:	4896      	ldr	r0, [pc, #600]	@ (80016e8 <LCD_FinalScreen+0x280>)
 8001490:	f006 f9e8 	bl	8007864 <iprintf>
			LCD_Clear(0, LCD_COLOR_WHITE);
 8001494:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001498:	2000      	movs	r0, #0
 800149a:	f000 fe9b 	bl	80021d4 <LCD_Clear>

			if(StaticTouchData.y < LCD_PIXEL_WIDTH/3)
 800149e:	4b91      	ldr	r3, [pc, #580]	@ (80016e4 <LCD_FinalScreen+0x27c>)
 80014a0:	885b      	ldrh	r3, [r3, #2]
 80014a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80014a4:	d8e7      	bhi.n	8001476 <LCD_FinalScreen+0xe>
			{
				GAME_ClearBoard(game_board);
 80014a6:	4891      	ldr	r0, [pc, #580]	@ (80016ec <LCD_FinalScreen+0x284>)
 80014a8:	f000 f92c 	bl	8001704 <GAME_ClearBoard>
				LCD_Gameplay();
 80014ac:	f7ff f9ee 	bl	800088c <LCD_Gameplay>
 80014b0:	e7e1      	b.n	8001476 <LCD_FinalScreen+0xe>
			}
		}
		else
		{
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 80014b2:	488f      	ldr	r0, [pc, #572]	@ (80016f0 <LCD_FinalScreen+0x288>)
 80014b4:	f006 fa3e 	bl	8007934 <puts>
			LCD_SetTextColor(LCD_COLOR_BLACK);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 fead 	bl	8002218 <LCD_SetTextColor>
			LCD_SetFont(&Font16x24);
 80014be:	488d      	ldr	r0, [pc, #564]	@ (80016f4 <LCD_FinalScreen+0x28c>)
 80014c0:	f000 feba 	bl	8002238 <LCD_SetFont>

			LCD_DisplayChar(30,50,'Y');
 80014c4:	2259      	movs	r2, #89	@ 0x59
 80014c6:	2132      	movs	r1, #50	@ 0x32
 80014c8:	201e      	movs	r0, #30
 80014ca:	f000 ff33 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(40,50,'a');
 80014ce:	2261      	movs	r2, #97	@ 0x61
 80014d0:	2132      	movs	r1, #50	@ 0x32
 80014d2:	2028      	movs	r0, #40	@ 0x28
 80014d4:	f000 ff2e 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(50,50,'y');
 80014d8:	2279      	movs	r2, #121	@ 0x79
 80014da:	2132      	movs	r1, #50	@ 0x32
 80014dc:	2032      	movs	r0, #50	@ 0x32
 80014de:	f000 ff29 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(60,50,'!');
 80014e2:	2221      	movs	r2, #33	@ 0x21
 80014e4:	2132      	movs	r1, #50	@ 0x32
 80014e6:	203c      	movs	r0, #60	@ 0x3c
 80014e8:	f000 ff24 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(80,50,'Y');
 80014ec:	2259      	movs	r2, #89	@ 0x59
 80014ee:	2132      	movs	r1, #50	@ 0x32
 80014f0:	2050      	movs	r0, #80	@ 0x50
 80014f2:	f000 ff1f 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(90,50,'o');
 80014f6:	226f      	movs	r2, #111	@ 0x6f
 80014f8:	2132      	movs	r1, #50	@ 0x32
 80014fa:	205a      	movs	r0, #90	@ 0x5a
 80014fc:	f000 ff1a 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(100,50,'u');
 8001500:	2275      	movs	r2, #117	@ 0x75
 8001502:	2132      	movs	r1, #50	@ 0x32
 8001504:	2064      	movs	r0, #100	@ 0x64
 8001506:	f000 ff15 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(120,50,'d');
 800150a:	2264      	movs	r2, #100	@ 0x64
 800150c:	2132      	movs	r1, #50	@ 0x32
 800150e:	2078      	movs	r0, #120	@ 0x78
 8001510:	f000 ff10 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(130,50,'i');
 8001514:	2269      	movs	r2, #105	@ 0x69
 8001516:	2132      	movs	r1, #50	@ 0x32
 8001518:	2082      	movs	r0, #130	@ 0x82
 800151a:	f000 ff0b 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(138,50,'d');
 800151e:	2264      	movs	r2, #100	@ 0x64
 8001520:	2132      	movs	r1, #50	@ 0x32
 8001522:	208a      	movs	r0, #138	@ 0x8a
 8001524:	f000 ff06 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(160,50,'i');
 8001528:	2269      	movs	r2, #105	@ 0x69
 800152a:	2132      	movs	r1, #50	@ 0x32
 800152c:	20a0      	movs	r0, #160	@ 0xa0
 800152e:	f000 ff01 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(165,50,'t');
 8001532:	2274      	movs	r2, #116	@ 0x74
 8001534:	2132      	movs	r1, #50	@ 0x32
 8001536:	20a5      	movs	r0, #165	@ 0xa5
 8001538:	f000 fefc 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(175,50,'!');
 800153c:	2221      	movs	r2, #33	@ 0x21
 800153e:	2132      	movs	r1, #50	@ 0x32
 8001540:	20af      	movs	r0, #175	@ 0xaf
 8001542:	f000 fef7 	bl	8002334 <LCD_DisplayChar>

			LCD_Draw_Horizontal_Line(1,90,235,LCD_COLOR_GREY);
 8001546:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 800154a:	22eb      	movs	r2, #235	@ 0xeb
 800154c:	215a      	movs	r1, #90	@ 0x5a
 800154e:	2001      	movs	r0, #1
 8001550:	f000 fe18 	bl	8002184 <LCD_Draw_Horizontal_Line>


			/******* Player One Score *******/
			LCD_DisplayChar(35,120,'P');
 8001554:	2250      	movs	r2, #80	@ 0x50
 8001556:	2178      	movs	r1, #120	@ 0x78
 8001558:	2023      	movs	r0, #35	@ 0x23
 800155a:	f000 feeb 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,120,'1');
 800155e:	2231      	movs	r2, #49	@ 0x31
 8001560:	2178      	movs	r1, #120	@ 0x78
 8001562:	202d      	movs	r0, #45	@ 0x2d
 8001564:	f000 fee6 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(65,120,'S');
 8001568:	2253      	movs	r2, #83	@ 0x53
 800156a:	2178      	movs	r1, #120	@ 0x78
 800156c:	2041      	movs	r0, #65	@ 0x41
 800156e:	f000 fee1 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,120,'c');
 8001572:	2263      	movs	r2, #99	@ 0x63
 8001574:	2178      	movs	r1, #120	@ 0x78
 8001576:	204b      	movs	r0, #75	@ 0x4b
 8001578:	f000 fedc 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(85,120,'o');
 800157c:	226f      	movs	r2, #111	@ 0x6f
 800157e:	2178      	movs	r1, #120	@ 0x78
 8001580:	2055      	movs	r0, #85	@ 0x55
 8001582:	f000 fed7 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,120,'r');
 8001586:	2272      	movs	r2, #114	@ 0x72
 8001588:	2178      	movs	r1, #120	@ 0x78
 800158a:	205f      	movs	r0, #95	@ 0x5f
 800158c:	f000 fed2 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(105,120,'e');
 8001590:	2265      	movs	r2, #101	@ 0x65
 8001592:	2178      	movs	r1, #120	@ 0x78
 8001594:	2069      	movs	r0, #105	@ 0x69
 8001596:	f000 fecd 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,120,':');
 800159a:	223a      	movs	r2, #58	@ 0x3a
 800159c:	2178      	movs	r1, #120	@ 0x78
 800159e:	2073      	movs	r0, #115	@ 0x73
 80015a0:	f000 fec8 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,120,PlayerOneScore + '0');
 80015a4:	4b54      	ldr	r3, [pc, #336]	@ (80016f8 <LCD_FinalScreen+0x290>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	3330      	adds	r3, #48	@ 0x30
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	2178      	movs	r1, #120	@ 0x78
 80015b0:	208c      	movs	r0, #140	@ 0x8c
 80015b2:	f000 febf 	bl	8002334 <LCD_DisplayChar>

			/******* Player Two Score **********/
			LCD_DisplayChar(35,140,'P');
 80015b6:	2250      	movs	r2, #80	@ 0x50
 80015b8:	218c      	movs	r1, #140	@ 0x8c
 80015ba:	2023      	movs	r0, #35	@ 0x23
 80015bc:	f000 feba 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,140,'2');
 80015c0:	2232      	movs	r2, #50	@ 0x32
 80015c2:	218c      	movs	r1, #140	@ 0x8c
 80015c4:	202d      	movs	r0, #45	@ 0x2d
 80015c6:	f000 feb5 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(65,140,'S');
 80015ca:	2253      	movs	r2, #83	@ 0x53
 80015cc:	218c      	movs	r1, #140	@ 0x8c
 80015ce:	2041      	movs	r0, #65	@ 0x41
 80015d0:	f000 feb0 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,140,'c');
 80015d4:	2263      	movs	r2, #99	@ 0x63
 80015d6:	218c      	movs	r1, #140	@ 0x8c
 80015d8:	204b      	movs	r0, #75	@ 0x4b
 80015da:	f000 feab 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(85,140,'o');
 80015de:	226f      	movs	r2, #111	@ 0x6f
 80015e0:	218c      	movs	r1, #140	@ 0x8c
 80015e2:	2055      	movs	r0, #85	@ 0x55
 80015e4:	f000 fea6 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,140,'r');
 80015e8:	2272      	movs	r2, #114	@ 0x72
 80015ea:	218c      	movs	r1, #140	@ 0x8c
 80015ec:	205f      	movs	r0, #95	@ 0x5f
 80015ee:	f000 fea1 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(105,140,'e');
 80015f2:	2265      	movs	r2, #101	@ 0x65
 80015f4:	218c      	movs	r1, #140	@ 0x8c
 80015f6:	2069      	movs	r0, #105	@ 0x69
 80015f8:	f000 fe9c 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,140,':');
 80015fc:	223a      	movs	r2, #58	@ 0x3a
 80015fe:	218c      	movs	r1, #140	@ 0x8c
 8001600:	2073      	movs	r0, #115	@ 0x73
 8001602:	f000 fe97 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,140,PlayerTwoScore + '0');
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <LCD_FinalScreen+0x294>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3330      	adds	r3, #48	@ 0x30
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	218c      	movs	r1, #140	@ 0x8c
 8001612:	208c      	movs	r0, #140	@ 0x8c
 8001614:	f000 fe8e 	bl	8002334 <LCD_DisplayChar>

			/****** Time Elapsed ********/
			LCD_DisplayChar(35,170,'T');
 8001618:	2254      	movs	r2, #84	@ 0x54
 800161a:	21aa      	movs	r1, #170	@ 0xaa
 800161c:	2023      	movs	r0, #35	@ 0x23
 800161e:	f000 fe89 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,170,'i');
 8001622:	2269      	movs	r2, #105	@ 0x69
 8001624:	21aa      	movs	r1, #170	@ 0xaa
 8001626:	202d      	movs	r0, #45	@ 0x2d
 8001628:	f000 fe84 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(55,170,'m');
 800162c:	226d      	movs	r2, #109	@ 0x6d
 800162e:	21aa      	movs	r1, #170	@ 0xaa
 8001630:	2037      	movs	r0, #55	@ 0x37
 8001632:	f000 fe7f 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(68,170,'e');
 8001636:	2265      	movs	r2, #101	@ 0x65
 8001638:	21aa      	movs	r1, #170	@ 0xaa
 800163a:	2044      	movs	r0, #68	@ 0x44
 800163c:	f000 fe7a 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,170,':');
 8001640:	223a      	movs	r2, #58	@ 0x3a
 8001642:	21aa      	movs	r1, #170	@ 0xaa
 8001644:	204b      	movs	r0, #75	@ 0x4b
 8001646:	f000 fe75 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,170,TotalTime + '0');
 800164a:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <LCD_FinalScreen+0x298>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	3330      	adds	r3, #48	@ 0x30
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	21aa      	movs	r1, #170	@ 0xaa
 8001656:	208c      	movs	r0, #140	@ 0x8c
 8001658:	f000 fe6c 	bl	8002334 <LCD_DisplayChar>

			/********* Play Again Message ******************/
			LCD_Draw_Horizontal_Line(1,215,235,LCD_COLOR_BLUE);
 800165c:	231f      	movs	r3, #31
 800165e:	22eb      	movs	r2, #235	@ 0xeb
 8001660:	21d7      	movs	r1, #215	@ 0xd7
 8001662:	2001      	movs	r0, #1
 8001664:	f000 fd8e 	bl	8002184 <LCD_Draw_Horizontal_Line>

			LCD_DisplayChar(35,260,'P');
 8001668:	2250      	movs	r2, #80	@ 0x50
 800166a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800166e:	2023      	movs	r0, #35	@ 0x23
 8001670:	f000 fe60 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,260,'l');
 8001674:	226c      	movs	r2, #108	@ 0x6c
 8001676:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800167a:	202d      	movs	r0, #45	@ 0x2d
 800167c:	f000 fe5a 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(55,260,'a');
 8001680:	2261      	movs	r2, #97	@ 0x61
 8001682:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001686:	2037      	movs	r0, #55	@ 0x37
 8001688:	f000 fe54 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(65,260,'y');
 800168c:	2279      	movs	r2, #121	@ 0x79
 800168e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001692:	2041      	movs	r0, #65	@ 0x41
 8001694:	f000 fe4e 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(80,260,'A');
 8001698:	2241      	movs	r2, #65	@ 0x41
 800169a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800169e:	2050      	movs	r0, #80	@ 0x50
 80016a0:	f000 fe48 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,260,'g');
 80016a4:	2267      	movs	r2, #103	@ 0x67
 80016a6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80016aa:	205f      	movs	r0, #95	@ 0x5f
 80016ac:	f000 fe42 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(107,260,'a');
 80016b0:	2261      	movs	r2, #97	@ 0x61
 80016b2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80016b6:	206b      	movs	r0, #107	@ 0x6b
 80016b8:	f000 fe3c 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,260,'i');
 80016bc:	2269      	movs	r2, #105	@ 0x69
 80016be:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80016c2:	2073      	movs	r0, #115	@ 0x73
 80016c4:	f000 fe36 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(122,260,'n');
 80016c8:	226e      	movs	r2, #110	@ 0x6e
 80016ca:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80016ce:	207a      	movs	r0, #122	@ 0x7a
 80016d0:	f000 fe30 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(133,260,'?');
 80016d4:	223f      	movs	r2, #63	@ 0x3f
 80016d6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80016da:	2085      	movs	r0, #133	@ 0x85
 80016dc:	f000 fe2a 	bl	8002334 <LCD_DisplayChar>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 80016e0:	e6c9      	b.n	8001476 <LCD_FinalScreen+0xe>
 80016e2:	bf00      	nop
 80016e4:	20000098 	.word	0x20000098
 80016e8:	08008614 	.word	0x08008614
 80016ec:	200000a4 	.word	0x200000a4
 80016f0:	08008628 	.word	0x08008628
 80016f4:	20000008 	.word	0x20000008
 80016f8:	200000d0 	.word	0x200000d0
 80016fc:	200000d1 	.word	0x200000d1
 8001700:	200000d2 	.word	0x200000d2

08001704 <GAME_ClearBoard>:
	}
}


void GAME_ClearBoard(uint8_t GameBoard[rows][cols])
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	for(uint8_t ROW = 0; ROW < rows; ROW++)
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e014      	b.n	800173c <GAME_ClearBoard+0x38>
	{
		for(uint8_t COL = 0; COL < cols; COL++)
 8001712:	2300      	movs	r3, #0
 8001714:	73bb      	strb	r3, [r7, #14]
 8001716:	e00b      	b.n	8001730 <GAME_ClearBoard+0x2c>
		{
			GameBoard[ROW][COL] = 0;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	441a      	add	r2, r3
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	2100      	movs	r1, #0
 8001728:	54d1      	strb	r1, [r2, r3]
		for(uint8_t COL = 0; COL < cols; COL++)
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	3301      	adds	r3, #1
 800172e:	73bb      	strb	r3, [r7, #14]
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	2b06      	cmp	r3, #6
 8001734:	d9f0      	bls.n	8001718 <GAME_ClearBoard+0x14>
	for(uint8_t ROW = 0; ROW < rows; ROW++)
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3301      	adds	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d9e7      	bls.n	8001712 <GAME_ClearBoard+0xe>
		}
	}
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LCD_FinalScreenLose>:


void LCD_FinalScreenLose(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8001754:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001758:	2000      	movs	r0, #0
 800175a:	f000 fd3b 	bl	80021d4 <LCD_Clear>
	while (1)
	{
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 800175e:	48c0      	ldr	r0, [pc, #768]	@ (8001a60 <LCD_FinalScreenLose+0x310>)
 8001760:	f000 fe1b 	bl	800239a <returnTouchStateAndLocation>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d117      	bne.n	800179a <LCD_FinalScreenLose+0x4a>
		{
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 800176a:	4bbd      	ldr	r3, [pc, #756]	@ (8001a60 <LCD_FinalScreenLose+0x310>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	4bbb      	ldr	r3, [pc, #748]	@ (8001a60 <LCD_FinalScreenLose+0x310>)
 8001772:	885b      	ldrh	r3, [r3, #2]
 8001774:	461a      	mov	r2, r3
 8001776:	48bb      	ldr	r0, [pc, #748]	@ (8001a64 <LCD_FinalScreenLose+0x314>)
 8001778:	f006 f874 	bl	8007864 <iprintf>
			LCD_Clear(0, LCD_COLOR_WHITE);
 800177c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001780:	2000      	movs	r0, #0
 8001782:	f000 fd27 	bl	80021d4 <LCD_Clear>

			if(StaticTouchData.y < LCD_PIXEL_WIDTH/3)
 8001786:	4bb6      	ldr	r3, [pc, #728]	@ (8001a60 <LCD_FinalScreenLose+0x310>)
 8001788:	885b      	ldrh	r3, [r3, #2]
 800178a:	2b4f      	cmp	r3, #79	@ 0x4f
 800178c:	d8e7      	bhi.n	800175e <LCD_FinalScreenLose+0xe>
			{
				GAME_ClearBoard(game_board);
 800178e:	48b6      	ldr	r0, [pc, #728]	@ (8001a68 <LCD_FinalScreenLose+0x318>)
 8001790:	f7ff ffb8 	bl	8001704 <GAME_ClearBoard>
				LCD_Gameplay();
 8001794:	f7ff f87a 	bl	800088c <LCD_Gameplay>
 8001798:	e7e1      	b.n	800175e <LCD_FinalScreenLose+0xe>
			}
		}
		else
		{
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 800179a:	48b4      	ldr	r0, [pc, #720]	@ (8001a6c <LCD_FinalScreenLose+0x31c>)
 800179c:	f006 f8ca 	bl	8007934 <puts>
			LCD_SetTextColor(LCD_COLOR_BLACK);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f000 fd39 	bl	8002218 <LCD_SetTextColor>
			LCD_SetFont(&Font16x24);
 80017a6:	48b2      	ldr	r0, [pc, #712]	@ (8001a70 <LCD_FinalScreenLose+0x320>)
 80017a8:	f000 fd46 	bl	8002238 <LCD_SetFont>

			LCD_DisplayChar(25,30,'R');
 80017ac:	2252      	movs	r2, #82	@ 0x52
 80017ae:	211e      	movs	r1, #30
 80017b0:	2019      	movs	r0, #25
 80017b2:	f000 fdbf 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(40,30,'e');
 80017b6:	2265      	movs	r2, #101	@ 0x65
 80017b8:	211e      	movs	r1, #30
 80017ba:	2028      	movs	r0, #40	@ 0x28
 80017bc:	f000 fdba 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(50,30,'a');
 80017c0:	2261      	movs	r2, #97	@ 0x61
 80017c2:	211e      	movs	r1, #30
 80017c4:	2032      	movs	r0, #50	@ 0x32
 80017c6:	f000 fdb5 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(60,30,'l');
 80017ca:	226c      	movs	r2, #108	@ 0x6c
 80017cc:	211e      	movs	r1, #30
 80017ce:	203c      	movs	r0, #60	@ 0x3c
 80017d0:	f000 fdb0 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(70,30,'l');
 80017d4:	226c      	movs	r2, #108	@ 0x6c
 80017d6:	211e      	movs	r1, #30
 80017d8:	2046      	movs	r0, #70	@ 0x46
 80017da:	f000 fdab 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(80,30,'y');
 80017de:	2279      	movs	r2, #121	@ 0x79
 80017e0:	211e      	movs	r1, #30
 80017e2:	2050      	movs	r0, #80	@ 0x50
 80017e4:	f000 fda6 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(90,30,'?');
 80017e8:	223f      	movs	r2, #63	@ 0x3f
 80017ea:	211e      	movs	r1, #30
 80017ec:	205a      	movs	r0, #90	@ 0x5a
 80017ee:	f000 fda1 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(110,30,'Y');
 80017f2:	2259      	movs	r2, #89	@ 0x59
 80017f4:	211e      	movs	r1, #30
 80017f6:	206e      	movs	r0, #110	@ 0x6e
 80017f8:	f000 fd9c 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(120,30,'o');
 80017fc:	226f      	movs	r2, #111	@ 0x6f
 80017fe:	211e      	movs	r1, #30
 8001800:	2078      	movs	r0, #120	@ 0x78
 8001802:	f000 fd97 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(130,30,'u');
 8001806:	2275      	movs	r2, #117	@ 0x75
 8001808:	211e      	movs	r1, #30
 800180a:	2082      	movs	r0, #130	@ 0x82
 800180c:	f000 fd92 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(150,30,'L');
 8001810:	224c      	movs	r2, #76	@ 0x4c
 8001812:	211e      	movs	r1, #30
 8001814:	2096      	movs	r0, #150	@ 0x96
 8001816:	f000 fd8d 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(160,30,'o');
 800181a:	226f      	movs	r2, #111	@ 0x6f
 800181c:	211e      	movs	r1, #30
 800181e:	20a0      	movs	r0, #160	@ 0xa0
 8001820:	f000 fd88 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(170,30,'s');
 8001824:	2273      	movs	r2, #115	@ 0x73
 8001826:	211e      	movs	r1, #30
 8001828:	20aa      	movs	r0, #170	@ 0xaa
 800182a:	f000 fd83 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(180,30,'t');
 800182e:	2274      	movs	r2, #116	@ 0x74
 8001830:	211e      	movs	r1, #30
 8001832:	20b4      	movs	r0, #180	@ 0xb4
 8001834:	f000 fd7e 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(25,50,'T');
 8001838:	2254      	movs	r2, #84	@ 0x54
 800183a:	2132      	movs	r1, #50	@ 0x32
 800183c:	2019      	movs	r0, #25
 800183e:	f000 fd79 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(35,50,'o');
 8001842:	226f      	movs	r2, #111	@ 0x6f
 8001844:	2132      	movs	r1, #50	@ 0x32
 8001846:	2023      	movs	r0, #35	@ 0x23
 8001848:	f000 fd74 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(55,50,'T');
 800184c:	2254      	movs	r2, #84	@ 0x54
 800184e:	2132      	movs	r1, #50	@ 0x32
 8001850:	2037      	movs	r0, #55	@ 0x37
 8001852:	f000 fd6f 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(65,50,'h');
 8001856:	2268      	movs	r2, #104	@ 0x68
 8001858:	2132      	movs	r1, #50	@ 0x32
 800185a:	2041      	movs	r0, #65	@ 0x41
 800185c:	f000 fd6a 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,50,'e');
 8001860:	2265      	movs	r2, #101	@ 0x65
 8001862:	2132      	movs	r1, #50	@ 0x32
 8001864:	204b      	movs	r0, #75	@ 0x4b
 8001866:	f000 fd65 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(95,50,'C');
 800186a:	2243      	movs	r2, #67	@ 0x43
 800186c:	2132      	movs	r1, #50	@ 0x32
 800186e:	205f      	movs	r0, #95	@ 0x5f
 8001870:	f000 fd60 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(105,50,'o');
 8001874:	226f      	movs	r2, #111	@ 0x6f
 8001876:	2132      	movs	r1, #50	@ 0x32
 8001878:	2069      	movs	r0, #105	@ 0x69
 800187a:	f000 fd5b 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,50,'m');
 800187e:	226d      	movs	r2, #109	@ 0x6d
 8001880:	2132      	movs	r1, #50	@ 0x32
 8001882:	2073      	movs	r0, #115	@ 0x73
 8001884:	f000 fd56 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(125,50,'p');
 8001888:	2270      	movs	r2, #112	@ 0x70
 800188a:	2132      	movs	r1, #50	@ 0x32
 800188c:	207d      	movs	r0, #125	@ 0x7d
 800188e:	f000 fd51 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(135,50,'u');
 8001892:	2275      	movs	r2, #117	@ 0x75
 8001894:	2132      	movs	r1, #50	@ 0x32
 8001896:	2087      	movs	r0, #135	@ 0x87
 8001898:	f000 fd4c 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(145,50,'t');
 800189c:	2274      	movs	r2, #116	@ 0x74
 800189e:	2132      	movs	r1, #50	@ 0x32
 80018a0:	2091      	movs	r0, #145	@ 0x91
 80018a2:	f000 fd47 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(155,50,'e');
 80018a6:	2265      	movs	r2, #101	@ 0x65
 80018a8:	2132      	movs	r1, #50	@ 0x32
 80018aa:	209b      	movs	r0, #155	@ 0x9b
 80018ac:	f000 fd42 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(165,50,'r');
 80018b0:	2272      	movs	r2, #114	@ 0x72
 80018b2:	2132      	movs	r1, #50	@ 0x32
 80018b4:	20a5      	movs	r0, #165	@ 0xa5
 80018b6:	f000 fd3d 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(175,50,'?');
 80018ba:	223f      	movs	r2, #63	@ 0x3f
 80018bc:	2132      	movs	r1, #50	@ 0x32
 80018be:	20af      	movs	r0, #175	@ 0xaf
 80018c0:	f000 fd38 	bl	8002334 <LCD_DisplayChar>


			LCD_Draw_Horizontal_Line(1,90,235,LCD_COLOR_GREY);
 80018c4:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 80018c8:	22eb      	movs	r2, #235	@ 0xeb
 80018ca:	215a      	movs	r1, #90	@ 0x5a
 80018cc:	2001      	movs	r0, #1
 80018ce:	f000 fc59 	bl	8002184 <LCD_Draw_Horizontal_Line>


			/******* Player One Score *******/
			LCD_DisplayChar(35,120,'P');
 80018d2:	2250      	movs	r2, #80	@ 0x50
 80018d4:	2178      	movs	r1, #120	@ 0x78
 80018d6:	2023      	movs	r0, #35	@ 0x23
 80018d8:	f000 fd2c 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,120,'1');
 80018dc:	2231      	movs	r2, #49	@ 0x31
 80018de:	2178      	movs	r1, #120	@ 0x78
 80018e0:	202d      	movs	r0, #45	@ 0x2d
 80018e2:	f000 fd27 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(65,120,'S');
 80018e6:	2253      	movs	r2, #83	@ 0x53
 80018e8:	2178      	movs	r1, #120	@ 0x78
 80018ea:	2041      	movs	r0, #65	@ 0x41
 80018ec:	f000 fd22 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,120,'c');
 80018f0:	2263      	movs	r2, #99	@ 0x63
 80018f2:	2178      	movs	r1, #120	@ 0x78
 80018f4:	204b      	movs	r0, #75	@ 0x4b
 80018f6:	f000 fd1d 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(85,120,'o');
 80018fa:	226f      	movs	r2, #111	@ 0x6f
 80018fc:	2178      	movs	r1, #120	@ 0x78
 80018fe:	2055      	movs	r0, #85	@ 0x55
 8001900:	f000 fd18 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,120,'r');
 8001904:	2272      	movs	r2, #114	@ 0x72
 8001906:	2178      	movs	r1, #120	@ 0x78
 8001908:	205f      	movs	r0, #95	@ 0x5f
 800190a:	f000 fd13 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(105,120,'e');
 800190e:	2265      	movs	r2, #101	@ 0x65
 8001910:	2178      	movs	r1, #120	@ 0x78
 8001912:	2069      	movs	r0, #105	@ 0x69
 8001914:	f000 fd0e 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,120,':');
 8001918:	223a      	movs	r2, #58	@ 0x3a
 800191a:	2178      	movs	r1, #120	@ 0x78
 800191c:	2073      	movs	r0, #115	@ 0x73
 800191e:	f000 fd09 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,120,PlayerOneScore + '0');
 8001922:	4b54      	ldr	r3, [pc, #336]	@ (8001a74 <LCD_FinalScreenLose+0x324>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	3330      	adds	r3, #48	@ 0x30
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	2178      	movs	r1, #120	@ 0x78
 800192e:	208c      	movs	r0, #140	@ 0x8c
 8001930:	f000 fd00 	bl	8002334 <LCD_DisplayChar>

			/******* Player Two Score **********/
			LCD_DisplayChar(35,140,'P');
 8001934:	2250      	movs	r2, #80	@ 0x50
 8001936:	218c      	movs	r1, #140	@ 0x8c
 8001938:	2023      	movs	r0, #35	@ 0x23
 800193a:	f000 fcfb 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,140,'2');
 800193e:	2232      	movs	r2, #50	@ 0x32
 8001940:	218c      	movs	r1, #140	@ 0x8c
 8001942:	202d      	movs	r0, #45	@ 0x2d
 8001944:	f000 fcf6 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(65,140,'S');
 8001948:	2253      	movs	r2, #83	@ 0x53
 800194a:	218c      	movs	r1, #140	@ 0x8c
 800194c:	2041      	movs	r0, #65	@ 0x41
 800194e:	f000 fcf1 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,140,'c');
 8001952:	2263      	movs	r2, #99	@ 0x63
 8001954:	218c      	movs	r1, #140	@ 0x8c
 8001956:	204b      	movs	r0, #75	@ 0x4b
 8001958:	f000 fcec 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(85,140,'o');
 800195c:	226f      	movs	r2, #111	@ 0x6f
 800195e:	218c      	movs	r1, #140	@ 0x8c
 8001960:	2055      	movs	r0, #85	@ 0x55
 8001962:	f000 fce7 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,140,'r');
 8001966:	2272      	movs	r2, #114	@ 0x72
 8001968:	218c      	movs	r1, #140	@ 0x8c
 800196a:	205f      	movs	r0, #95	@ 0x5f
 800196c:	f000 fce2 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(105,140,'e');
 8001970:	2265      	movs	r2, #101	@ 0x65
 8001972:	218c      	movs	r1, #140	@ 0x8c
 8001974:	2069      	movs	r0, #105	@ 0x69
 8001976:	f000 fcdd 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,140,':');
 800197a:	223a      	movs	r2, #58	@ 0x3a
 800197c:	218c      	movs	r1, #140	@ 0x8c
 800197e:	2073      	movs	r0, #115	@ 0x73
 8001980:	f000 fcd8 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,140,PlayerTwoScore + '0');
 8001984:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <LCD_FinalScreenLose+0x328>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	3330      	adds	r3, #48	@ 0x30
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	218c      	movs	r1, #140	@ 0x8c
 8001990:	208c      	movs	r0, #140	@ 0x8c
 8001992:	f000 fccf 	bl	8002334 <LCD_DisplayChar>

			/****** Time Elapsed ********/
			LCD_DisplayChar(35,170,'T');
 8001996:	2254      	movs	r2, #84	@ 0x54
 8001998:	21aa      	movs	r1, #170	@ 0xaa
 800199a:	2023      	movs	r0, #35	@ 0x23
 800199c:	f000 fcca 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,170,'i');
 80019a0:	2269      	movs	r2, #105	@ 0x69
 80019a2:	21aa      	movs	r1, #170	@ 0xaa
 80019a4:	202d      	movs	r0, #45	@ 0x2d
 80019a6:	f000 fcc5 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(55,170,'m');
 80019aa:	226d      	movs	r2, #109	@ 0x6d
 80019ac:	21aa      	movs	r1, #170	@ 0xaa
 80019ae:	2037      	movs	r0, #55	@ 0x37
 80019b0:	f000 fcc0 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(68,170,'e');
 80019b4:	2265      	movs	r2, #101	@ 0x65
 80019b6:	21aa      	movs	r1, #170	@ 0xaa
 80019b8:	2044      	movs	r0, #68	@ 0x44
 80019ba:	f000 fcbb 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,170,':');
 80019be:	223a      	movs	r2, #58	@ 0x3a
 80019c0:	21aa      	movs	r1, #170	@ 0xaa
 80019c2:	204b      	movs	r0, #75	@ 0x4b
 80019c4:	f000 fcb6 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,170,TotalTime + '0');
 80019c8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <LCD_FinalScreenLose+0x32c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	3330      	adds	r3, #48	@ 0x30
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	21aa      	movs	r1, #170	@ 0xaa
 80019d4:	208c      	movs	r0, #140	@ 0x8c
 80019d6:	f000 fcad 	bl	8002334 <LCD_DisplayChar>

			/********* Play Again Message ******************/
			LCD_Draw_Horizontal_Line(1,215,235,LCD_COLOR_BLUE);
 80019da:	231f      	movs	r3, #31
 80019dc:	22eb      	movs	r2, #235	@ 0xeb
 80019de:	21d7      	movs	r1, #215	@ 0xd7
 80019e0:	2001      	movs	r0, #1
 80019e2:	f000 fbcf 	bl	8002184 <LCD_Draw_Horizontal_Line>

			LCD_DisplayChar(35,260,'P');
 80019e6:	2250      	movs	r2, #80	@ 0x50
 80019e8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80019ec:	2023      	movs	r0, #35	@ 0x23
 80019ee:	f000 fca1 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,260,'l');
 80019f2:	226c      	movs	r2, #108	@ 0x6c
 80019f4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80019f8:	202d      	movs	r0, #45	@ 0x2d
 80019fa:	f000 fc9b 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(55,260,'a');
 80019fe:	2261      	movs	r2, #97	@ 0x61
 8001a00:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a04:	2037      	movs	r0, #55	@ 0x37
 8001a06:	f000 fc95 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(65,260,'y');
 8001a0a:	2279      	movs	r2, #121	@ 0x79
 8001a0c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a10:	2041      	movs	r0, #65	@ 0x41
 8001a12:	f000 fc8f 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(80,260,'A');
 8001a16:	2241      	movs	r2, #65	@ 0x41
 8001a18:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a1c:	2050      	movs	r0, #80	@ 0x50
 8001a1e:	f000 fc89 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,260,'g');
 8001a22:	2267      	movs	r2, #103	@ 0x67
 8001a24:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a28:	205f      	movs	r0, #95	@ 0x5f
 8001a2a:	f000 fc83 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(107,260,'a');
 8001a2e:	2261      	movs	r2, #97	@ 0x61
 8001a30:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a34:	206b      	movs	r0, #107	@ 0x6b
 8001a36:	f000 fc7d 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,260,'i');
 8001a3a:	2269      	movs	r2, #105	@ 0x69
 8001a3c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a40:	2073      	movs	r0, #115	@ 0x73
 8001a42:	f000 fc77 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(122,260,'n');
 8001a46:	226e      	movs	r2, #110	@ 0x6e
 8001a48:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a4c:	207a      	movs	r0, #122	@ 0x7a
 8001a4e:	f000 fc71 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(133,260,'?');
 8001a52:	223f      	movs	r2, #63	@ 0x3f
 8001a54:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a58:	2085      	movs	r0, #133	@ 0x85
 8001a5a:	f000 fc6b 	bl	8002334 <LCD_DisplayChar>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 8001a5e:	e67e      	b.n	800175e <LCD_FinalScreenLose+0xe>
 8001a60:	20000098 	.word	0x20000098
 8001a64:	08008614 	.word	0x08008614
 8001a68:	200000a4 	.word	0x200000a4
 8001a6c:	08008628 	.word	0x08008628
 8001a70:	20000008 	.word	0x20000008
 8001a74:	200000d0 	.word	0x200000d0
 8001a78:	200000d1 	.word	0x200000d1
 8001a7c:	200000d2 	.word	0x200000d2

08001a80 <LCD_FinalScreenTwoPlayer>:




void LCD_FinalScreenTwoPlayer(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8001a84:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f000 fba3 	bl	80021d4 <LCD_Clear>
	while (1)
	{
		/* If touch pressed */
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 8001a8e:	4891      	ldr	r0, [pc, #580]	@ (8001cd4 <LCD_FinalScreenTwoPlayer+0x254>)
 8001a90:	f000 fc83 	bl	800239a <returnTouchStateAndLocation>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d117      	bne.n	8001aca <LCD_FinalScreenTwoPlayer+0x4a>
		{
			/* Touch valid */
			printf("\nX: %03d\nY: %03d\n", StaticTouchData.x, StaticTouchData.y);
 8001a9a:	4b8e      	ldr	r3, [pc, #568]	@ (8001cd4 <LCD_FinalScreenTwoPlayer+0x254>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	@ (8001cd4 <LCD_FinalScreenTwoPlayer+0x254>)
 8001aa2:	885b      	ldrh	r3, [r3, #2]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	488c      	ldr	r0, [pc, #560]	@ (8001cd8 <LCD_FinalScreenTwoPlayer+0x258>)
 8001aa8:	f005 fedc 	bl	8007864 <iprintf>
			LCD_Clear(0, LCD_COLOR_WHITE);
 8001aac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f000 fb8f 	bl	80021d4 <LCD_Clear>

			if(StaticTouchData.y < LCD_PIXEL_WIDTH/3)
 8001ab6:	4b87      	ldr	r3, [pc, #540]	@ (8001cd4 <LCD_FinalScreenTwoPlayer+0x254>)
 8001ab8:	885b      	ldrh	r3, [r3, #2]
 8001aba:	2b4f      	cmp	r3, #79	@ 0x4f
 8001abc:	d8e7      	bhi.n	8001a8e <LCD_FinalScreenTwoPlayer+0xe>
			{
				GAME_ClearBoard(game_board);
 8001abe:	4887      	ldr	r0, [pc, #540]	@ (8001cdc <LCD_FinalScreenTwoPlayer+0x25c>)
 8001ac0:	f7ff fe20 	bl	8001704 <GAME_ClearBoard>
				LCD_TwoPlayerGameplay();
 8001ac4:	f7fe fde4 	bl	8000690 <LCD_TwoPlayerGameplay>
 8001ac8:	e7e1      	b.n	8001a8e <LCD_FinalScreenTwoPlayer+0xe>
			}
		}
		else
		{
			/* Touch not pressed */
			printf("Not Pressed\n\n");
 8001aca:	4885      	ldr	r0, [pc, #532]	@ (8001ce0 <LCD_FinalScreenTwoPlayer+0x260>)
 8001acc:	f005 ff32 	bl	8007934 <puts>
			LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 fba1 	bl	8002218 <LCD_SetTextColor>
			LCD_SetFont(&Font16x24);
 8001ad6:	4883      	ldr	r0, [pc, #524]	@ (8001ce4 <LCD_FinalScreenTwoPlayer+0x264>)
 8001ad8:	f000 fbae 	bl	8002238 <LCD_SetFont>

			LCD_DisplayChar(70,50,'G');
 8001adc:	2247      	movs	r2, #71	@ 0x47
 8001ade:	2132      	movs	r1, #50	@ 0x32
 8001ae0:	2046      	movs	r0, #70	@ 0x46
 8001ae2:	f000 fc27 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(85,50,'a');
 8001ae6:	2261      	movs	r2, #97	@ 0x61
 8001ae8:	2132      	movs	r1, #50	@ 0x32
 8001aea:	2055      	movs	r0, #85	@ 0x55
 8001aec:	f000 fc22 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(100,50,'m');
 8001af0:	226d      	movs	r2, #109	@ 0x6d
 8001af2:	2132      	movs	r1, #50	@ 0x32
 8001af4:	2064      	movs	r0, #100	@ 0x64
 8001af6:	f000 fc1d 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,50,'e');
 8001afa:	2265      	movs	r2, #101	@ 0x65
 8001afc:	2132      	movs	r1, #50	@ 0x32
 8001afe:	2073      	movs	r0, #115	@ 0x73
 8001b00:	f000 fc18 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(135,50,'O');
 8001b04:	224f      	movs	r2, #79	@ 0x4f
 8001b06:	2132      	movs	r1, #50	@ 0x32
 8001b08:	2087      	movs	r0, #135	@ 0x87
 8001b0a:	f000 fc13 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(150,50,'v');
 8001b0e:	2276      	movs	r2, #118	@ 0x76
 8001b10:	2132      	movs	r1, #50	@ 0x32
 8001b12:	2096      	movs	r0, #150	@ 0x96
 8001b14:	f000 fc0e 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(160,50,'e');
 8001b18:	2265      	movs	r2, #101	@ 0x65
 8001b1a:	2132      	movs	r1, #50	@ 0x32
 8001b1c:	20a0      	movs	r0, #160	@ 0xa0
 8001b1e:	f000 fc09 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(170,50,'r');
 8001b22:	2272      	movs	r2, #114	@ 0x72
 8001b24:	2132      	movs	r1, #50	@ 0x32
 8001b26:	20aa      	movs	r0, #170	@ 0xaa
 8001b28:	f000 fc04 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(173,50,'.');
 8001b2c:	222e      	movs	r2, #46	@ 0x2e
 8001b2e:	2132      	movs	r1, #50	@ 0x32
 8001b30:	20ad      	movs	r0, #173	@ 0xad
 8001b32:	f000 fbff 	bl	8002334 <LCD_DisplayChar>

			LCD_Draw_Horizontal_Line(1,90,235,LCD_COLOR_GREY);
 8001b36:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 8001b3a:	22eb      	movs	r2, #235	@ 0xeb
 8001b3c:	215a      	movs	r1, #90	@ 0x5a
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f000 fb20 	bl	8002184 <LCD_Draw_Horizontal_Line>


			/******* Player One Score *******/
			LCD_DisplayChar(35,120,'P');
 8001b44:	2250      	movs	r2, #80	@ 0x50
 8001b46:	2178      	movs	r1, #120	@ 0x78
 8001b48:	2023      	movs	r0, #35	@ 0x23
 8001b4a:	f000 fbf3 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,120,'1');
 8001b4e:	2231      	movs	r2, #49	@ 0x31
 8001b50:	2178      	movs	r1, #120	@ 0x78
 8001b52:	202d      	movs	r0, #45	@ 0x2d
 8001b54:	f000 fbee 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(65,120,'S');
 8001b58:	2253      	movs	r2, #83	@ 0x53
 8001b5a:	2178      	movs	r1, #120	@ 0x78
 8001b5c:	2041      	movs	r0, #65	@ 0x41
 8001b5e:	f000 fbe9 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,120,'c');
 8001b62:	2263      	movs	r2, #99	@ 0x63
 8001b64:	2178      	movs	r1, #120	@ 0x78
 8001b66:	204b      	movs	r0, #75	@ 0x4b
 8001b68:	f000 fbe4 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(85,120,'o');
 8001b6c:	226f      	movs	r2, #111	@ 0x6f
 8001b6e:	2178      	movs	r1, #120	@ 0x78
 8001b70:	2055      	movs	r0, #85	@ 0x55
 8001b72:	f000 fbdf 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,120,'r');
 8001b76:	2272      	movs	r2, #114	@ 0x72
 8001b78:	2178      	movs	r1, #120	@ 0x78
 8001b7a:	205f      	movs	r0, #95	@ 0x5f
 8001b7c:	f000 fbda 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(105,120,'e');
 8001b80:	2265      	movs	r2, #101	@ 0x65
 8001b82:	2178      	movs	r1, #120	@ 0x78
 8001b84:	2069      	movs	r0, #105	@ 0x69
 8001b86:	f000 fbd5 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,120,':');
 8001b8a:	223a      	movs	r2, #58	@ 0x3a
 8001b8c:	2178      	movs	r1, #120	@ 0x78
 8001b8e:	2073      	movs	r0, #115	@ 0x73
 8001b90:	f000 fbd0 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,120,PlayerOneScore + '0');
 8001b94:	4b54      	ldr	r3, [pc, #336]	@ (8001ce8 <LCD_FinalScreenTwoPlayer+0x268>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3330      	adds	r3, #48	@ 0x30
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2178      	movs	r1, #120	@ 0x78
 8001ba0:	208c      	movs	r0, #140	@ 0x8c
 8001ba2:	f000 fbc7 	bl	8002334 <LCD_DisplayChar>

			/******* Player Two Score **********/
			LCD_DisplayChar(35,140,'P');
 8001ba6:	2250      	movs	r2, #80	@ 0x50
 8001ba8:	218c      	movs	r1, #140	@ 0x8c
 8001baa:	2023      	movs	r0, #35	@ 0x23
 8001bac:	f000 fbc2 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,140,'2');
 8001bb0:	2232      	movs	r2, #50	@ 0x32
 8001bb2:	218c      	movs	r1, #140	@ 0x8c
 8001bb4:	202d      	movs	r0, #45	@ 0x2d
 8001bb6:	f000 fbbd 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(65,140,'S');
 8001bba:	2253      	movs	r2, #83	@ 0x53
 8001bbc:	218c      	movs	r1, #140	@ 0x8c
 8001bbe:	2041      	movs	r0, #65	@ 0x41
 8001bc0:	f000 fbb8 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,140,'c');
 8001bc4:	2263      	movs	r2, #99	@ 0x63
 8001bc6:	218c      	movs	r1, #140	@ 0x8c
 8001bc8:	204b      	movs	r0, #75	@ 0x4b
 8001bca:	f000 fbb3 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(85,140,'o');
 8001bce:	226f      	movs	r2, #111	@ 0x6f
 8001bd0:	218c      	movs	r1, #140	@ 0x8c
 8001bd2:	2055      	movs	r0, #85	@ 0x55
 8001bd4:	f000 fbae 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,140,'r');
 8001bd8:	2272      	movs	r2, #114	@ 0x72
 8001bda:	218c      	movs	r1, #140	@ 0x8c
 8001bdc:	205f      	movs	r0, #95	@ 0x5f
 8001bde:	f000 fba9 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(105,140,'e');
 8001be2:	2265      	movs	r2, #101	@ 0x65
 8001be4:	218c      	movs	r1, #140	@ 0x8c
 8001be6:	2069      	movs	r0, #105	@ 0x69
 8001be8:	f000 fba4 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,140,':');
 8001bec:	223a      	movs	r2, #58	@ 0x3a
 8001bee:	218c      	movs	r1, #140	@ 0x8c
 8001bf0:	2073      	movs	r0, #115	@ 0x73
 8001bf2:	f000 fb9f 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,140,PlayerTwoScore + '0');
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cec <LCD_FinalScreenTwoPlayer+0x26c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	3330      	adds	r3, #48	@ 0x30
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	218c      	movs	r1, #140	@ 0x8c
 8001c02:	208c      	movs	r0, #140	@ 0x8c
 8001c04:	f000 fb96 	bl	8002334 <LCD_DisplayChar>

			/****** Time Elapsed ********/
			LCD_DisplayChar(35,170,'T');
 8001c08:	2254      	movs	r2, #84	@ 0x54
 8001c0a:	21aa      	movs	r1, #170	@ 0xaa
 8001c0c:	2023      	movs	r0, #35	@ 0x23
 8001c0e:	f000 fb91 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,170,'i');
 8001c12:	2269      	movs	r2, #105	@ 0x69
 8001c14:	21aa      	movs	r1, #170	@ 0xaa
 8001c16:	202d      	movs	r0, #45	@ 0x2d
 8001c18:	f000 fb8c 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(55,170,'m');
 8001c1c:	226d      	movs	r2, #109	@ 0x6d
 8001c1e:	21aa      	movs	r1, #170	@ 0xaa
 8001c20:	2037      	movs	r0, #55	@ 0x37
 8001c22:	f000 fb87 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(68,170,'e');
 8001c26:	2265      	movs	r2, #101	@ 0x65
 8001c28:	21aa      	movs	r1, #170	@ 0xaa
 8001c2a:	2044      	movs	r0, #68	@ 0x44
 8001c2c:	f000 fb82 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(75,170,':');
 8001c30:	223a      	movs	r2, #58	@ 0x3a
 8001c32:	21aa      	movs	r1, #170	@ 0xaa
 8001c34:	204b      	movs	r0, #75	@ 0x4b
 8001c36:	f000 fb7d 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(140,170,TotalTime + '0');
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf0 <LCD_FinalScreenTwoPlayer+0x270>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	3330      	adds	r3, #48	@ 0x30
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	21aa      	movs	r1, #170	@ 0xaa
 8001c46:	208c      	movs	r0, #140	@ 0x8c
 8001c48:	f000 fb74 	bl	8002334 <LCD_DisplayChar>

			/********* Play Again Message ******************/
			LCD_Draw_Horizontal_Line(1,215,235,LCD_COLOR_BLUE);
 8001c4c:	231f      	movs	r3, #31
 8001c4e:	22eb      	movs	r2, #235	@ 0xeb
 8001c50:	21d7      	movs	r1, #215	@ 0xd7
 8001c52:	2001      	movs	r0, #1
 8001c54:	f000 fa96 	bl	8002184 <LCD_Draw_Horizontal_Line>

			LCD_DisplayChar(35,260,'P');
 8001c58:	2250      	movs	r2, #80	@ 0x50
 8001c5a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001c5e:	2023      	movs	r0, #35	@ 0x23
 8001c60:	f000 fb68 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(45,260,'l');
 8001c64:	226c      	movs	r2, #108	@ 0x6c
 8001c66:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001c6a:	202d      	movs	r0, #45	@ 0x2d
 8001c6c:	f000 fb62 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(55,260,'a');
 8001c70:	2261      	movs	r2, #97	@ 0x61
 8001c72:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001c76:	2037      	movs	r0, #55	@ 0x37
 8001c78:	f000 fb5c 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(65,260,'y');
 8001c7c:	2279      	movs	r2, #121	@ 0x79
 8001c7e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001c82:	2041      	movs	r0, #65	@ 0x41
 8001c84:	f000 fb56 	bl	8002334 <LCD_DisplayChar>

			LCD_DisplayChar(80,260,'A');
 8001c88:	2241      	movs	r2, #65	@ 0x41
 8001c8a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001c8e:	2050      	movs	r0, #80	@ 0x50
 8001c90:	f000 fb50 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(95,260,'g');
 8001c94:	2267      	movs	r2, #103	@ 0x67
 8001c96:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001c9a:	205f      	movs	r0, #95	@ 0x5f
 8001c9c:	f000 fb4a 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(107,260,'a');
 8001ca0:	2261      	movs	r2, #97	@ 0x61
 8001ca2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001ca6:	206b      	movs	r0, #107	@ 0x6b
 8001ca8:	f000 fb44 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(115,260,'i');
 8001cac:	2269      	movs	r2, #105	@ 0x69
 8001cae:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001cb2:	2073      	movs	r0, #115	@ 0x73
 8001cb4:	f000 fb3e 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(122,260,'n');
 8001cb8:	226e      	movs	r2, #110	@ 0x6e
 8001cba:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001cbe:	207a      	movs	r0, #122	@ 0x7a
 8001cc0:	f000 fb38 	bl	8002334 <LCD_DisplayChar>
			LCD_DisplayChar(133,260,'?');
 8001cc4:	223f      	movs	r2, #63	@ 0x3f
 8001cc6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001cca:	2085      	movs	r0, #133	@ 0x85
 8001ccc:	f000 fb32 	bl	8002334 <LCD_DisplayChar>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed)
 8001cd0:	e6dd      	b.n	8001a8e <LCD_FinalScreenTwoPlayer+0xe>
 8001cd2:	bf00      	nop
 8001cd4:	20000098 	.word	0x20000098
 8001cd8:	08008614 	.word	0x08008614
 8001cdc:	200000a4 	.word	0x200000a4
 8001ce0:	08008628 	.word	0x08008628
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	200000d0 	.word	0x200000d0
 8001cec:	200000d1 	.word	0x200000d1
 8001cf0:	200000d2 	.word	0x200000d2

08001cf4 <EXTI0_IRQHandler>:



// Button interrupt
void EXTI0_IRQHandler()
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f002 fd0b 	bl	8004714 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
	InterruptPress = 1;
 8001cfe:	4b02      	ldr	r3, [pc, #8]	@ (8001d08 <EXTI0_IRQHandler+0x14>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
	//__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI0_IRQn);
	//HAL_NVIC_EnableIRQ(EXTI0_IRQn);

}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200000a0 	.word	0x200000a0

08001d0c <InitButtonInterrupts>:
		return false;
	}
}*/

void InitButtonInterrupts()
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef      Config;
		Config.Mode =         GPIO_MODE_IT_RISING;
 8001d12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d16:	60bb      	str	r3, [r7, #8]
		Config.Speed =        GPIO_SPEED_FREQ_MEDIUM;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
		Config.Pull =         GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
		Config.Pin =          BUTTON_PIN_NUM;
 8001d20:	2301      	movs	r3, #1
 8001d22:	607b      	str	r3, [r7, #4]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <InitButtonInterrupts+0x6c>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <InitButtonInterrupts+0x6c>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <InitButtonInterrupts+0x6c>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
		HAL_GPIO_Init(GPIOA, &Config);
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	480d      	ldr	r0, [pc, #52]	@ (8001d7c <InitButtonInterrupts+0x70>)
 8001d46:	f002 fa13 	bl	8004170 <HAL_GPIO_Init>

		SYSCFG->EXTICR[0] |= (0x0 << (4 * BUTTON_PIN_NUM));
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <InitButtonInterrupts+0x74>)
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <InitButtonInterrupts+0x74>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	6093      	str	r3, [r2, #8]
		EXTI->IMR |= (1 << BUTTON_PIN_NUM);
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <InitButtonInterrupts+0x78>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <InitButtonInterrupts+0x78>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6013      	str	r3, [r2, #0]
		EXTI->RTSR |= (1 << BUTTON_PIN_NUM);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <InitButtonInterrupts+0x78>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4a08      	ldr	r2, [pc, #32]	@ (8001d84 <InitButtonInterrupts+0x78>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6093      	str	r3, [r2, #8]

		//HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d6a:	2006      	movs	r0, #6
 8001d6c:	f002 f9e5 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8001d70:	bf00      	nop
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	@ 0x30
 8001d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	4b5a      	ldr	r3, [pc, #360]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	4a59      	ldr	r2, [pc, #356]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001d98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9e:	4b57      	ldr	r3, [pc, #348]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a52      	ldr	r2, [pc, #328]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b50      	ldr	r3, [pc, #320]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b4c      	ldr	r3, [pc, #304]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a4b      	ldr	r2, [pc, #300]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b49      	ldr	r3, [pc, #292]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b45      	ldr	r3, [pc, #276]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a44      	ldr	r2, [pc, #272]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b42      	ldr	r3, [pc, #264]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b3e      	ldr	r3, [pc, #248]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a3d      	ldr	r2, [pc, #244]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b37      	ldr	r3, [pc, #220]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a36      	ldr	r2, [pc, #216]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e24:	f043 0320 	orr.w	r3, r3, #32
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b2d      	ldr	r3, [pc, #180]	@ (8001efc <LCD_GPIO_Init+0x174>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001e52:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001e56:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001e64:	230e      	movs	r3, #14
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4824      	ldr	r0, [pc, #144]	@ (8001f00 <LCD_GPIO_Init+0x178>)
 8001e70:	f002 f97e 	bl	8004170 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001e74:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e78:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4820      	ldr	r0, [pc, #128]	@ (8001f04 <LCD_GPIO_Init+0x17c>)
 8001e82:	f002 f975 	bl	8004170 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001e86:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	4619      	mov	r1, r3
 8001e92:	481d      	ldr	r0, [pc, #116]	@ (8001f08 <LCD_GPIO_Init+0x180>)
 8001e94:	f002 f96c 	bl	8004170 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001e98:	2348      	movs	r3, #72	@ 0x48
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481a      	ldr	r0, [pc, #104]	@ (8001f0c <LCD_GPIO_Init+0x184>)
 8001ea4:	f002 f964 	bl	8004170 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4816      	ldr	r0, [pc, #88]	@ (8001f10 <LCD_GPIO_Init+0x188>)
 8001eb6:	f002 f95b 	bl	8004170 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001eba:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001ebe:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4813      	ldr	r0, [pc, #76]	@ (8001f14 <LCD_GPIO_Init+0x18c>)
 8001ec8:	f002 f952 	bl	8004170 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001ed0:	2309      	movs	r3, #9
 8001ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480a      	ldr	r0, [pc, #40]	@ (8001f04 <LCD_GPIO_Init+0x17c>)
 8001edc:	f002 f948 	bl	8004170 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001ee0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4809      	ldr	r0, [pc, #36]	@ (8001f14 <LCD_GPIO_Init+0x18c>)
 8001eee:	f002 f93f 	bl	8004170 <HAL_GPIO_Init>
}
 8001ef2:	bf00      	nop
 8001ef4:	3730      	adds	r7, #48	@ 0x30
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020400 	.word	0x40020400
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40021800 	.word	0x40021800

08001f18 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b090      	sub	sp, #64	@ 0x40
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8001f26:	23f0      	movs	r3, #240	@ 0xf0
 8001f28:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001f2e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001f32:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001f34:	2302      	movs	r3, #2
 8001f36:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001f38:	23ff      	movs	r3, #255	@ 0xff
 8001f3a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001f46:	2305      	movs	r3, #5
 8001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <LTCD_Layer_Init+0x78>)
 8001f52:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001f54:	23f0      	movs	r3, #240	@ 0xf0
 8001f56:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001f58:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001f70:	79fa      	ldrb	r2, [r7, #7]
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4619      	mov	r1, r3
 8001f78:	4806      	ldr	r0, [pc, #24]	@ (8001f94 <LTCD_Layer_Init+0x7c>)
 8001f7a:	f003 fd5f 	bl	8005a3c <HAL_LTDC_ConfigLayer>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001f84:	f000 f9f8 	bl	8002378 <LCD_Error_Handler>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	3740      	adds	r7, #64	@ 0x40
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200001c0 	.word	0x200001c0
 8001f94:	200000e4 	.word	0x200000e4

08001f98 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <LTCD__Init+0xb0>)
 8001f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800204c <LTCD__Init+0xb4>)
 8001fa0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001fa2:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <LTCD__Init+0xb0>)
 8001fa4:	2209      	movs	r2, #9
 8001fa6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8001fa8:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <LTCD__Init+0xb0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001fae:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <LTCD__Init+0xb0>)
 8001fb0:	221d      	movs	r2, #29
 8001fb2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001fb4:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <LTCD__Init+0xb0>)
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <LTCD__Init+0xb0>)
 8001fbc:	f240 120d 	movw	r2, #269	@ 0x10d
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001fc2:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <LTCD__Init+0xb0>)
 8001fc4:	f240 1243 	movw	r2, #323	@ 0x143
 8001fc8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8001fca:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <LTCD__Init+0xb0>)
 8001fcc:	f240 1217 	movw	r2, #279	@ 0x117
 8001fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <LTCD__Init+0xb0>)
 8001fd4:	f240 1247 	movw	r2, #327	@ 0x147
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <LTCD__Init+0xb0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <LTCD__Init+0xb0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001fea:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <LTCD__Init+0xb0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <LTCD__Init+0xb8>)
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <LTCD__Init+0xb8>)
 8001ffa:	22c0      	movs	r2, #192	@ 0xc0
 8001ffc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <LTCD__Init+0xb8>)
 8002000:	2204      	movs	r2, #4
 8002002:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <LTCD__Init+0xb8>)
 8002006:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800200c:	4810      	ldr	r0, [pc, #64]	@ (8002050 <LTCD__Init+0xb8>)
 800200e:	f004 fb6f 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <LTCD__Init+0xb0>)
 8002014:	2200      	movs	r2, #0
 8002016:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <LTCD__Init+0xb0>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <LTCD__Init+0xb0>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <LTCD__Init+0xb0>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800202a:	f7ff fead 	bl	8001d88 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800202e:	4806      	ldr	r0, [pc, #24]	@ (8002048 <LTCD__Init+0xb0>)
 8002030:	f003 fc34 	bl	800589c <HAL_LTDC_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800203a:	f000 f99d 	bl	8002378 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800203e:	f000 f9b8 	bl	80023b2 <ili9341_Init>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200000e4 	.word	0x200000e4
 800204c:	40016800 	.word	0x40016800
 8002050:	2000018c 	.word	0x2000018c

08002054 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
 800205e:	460b      	mov	r3, r1
 8002060:	80bb      	strh	r3, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8002066:	88ba      	ldrh	r2, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	461a      	mov	r2, r3
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	4413      	add	r3, r2
 8002076:	4905      	ldr	r1, [pc, #20]	@ (800208c <LCD_Draw_Pixel+0x38>)
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	200001c0 	.word	0x200001c0

08002090 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	4604      	mov	r4, r0
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	4623      	mov	r3, r4
 80020a0:	80fb      	strh	r3, [r7, #6]
 80020a2:	4603      	mov	r3, r0
 80020a4:	80bb      	strh	r3, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	807b      	strh	r3, [r7, #2]
 80020aa:	4613      	mov	r3, r2
 80020ac:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	425b      	negs	r3, r3
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	81fb      	strh	r3, [r7, #14]
 80020b6:	e034      	b.n	8002122 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	425b      	negs	r3, r3
 80020bc:	b29b      	uxth	r3, r3
 80020be:	81bb      	strh	r3, [r7, #12]
 80020c0:	e024      	b.n	800210c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80020c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80020ca:	fb03 f202 	mul.w	r2, r3, r2
 80020ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020d2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	441a      	add	r2, r3
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	8879      	ldrh	r1, [r7, #2]
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dc0b      	bgt.n	8002100 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80020e8:	89ba      	ldrh	r2, [r7, #12]
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	4413      	add	r3, r2
 80020ee:	b298      	uxth	r0, r3
 80020f0:	89fa      	ldrh	r2, [r7, #14]
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	883a      	ldrh	r2, [r7, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7ff ffaa 	bl	8002054 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8002100:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002104:	b29b      	uxth	r3, r3
 8002106:	3301      	adds	r3, #1
 8002108:	b29b      	uxth	r3, r3
 800210a:	81bb      	strh	r3, [r7, #12]
 800210c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	429a      	cmp	r2, r3
 8002114:	ddd5      	ble.n	80020c2 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8002116:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800211a:	b29b      	uxth	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	81fb      	strh	r3, [r7, #14]
 8002122:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	429a      	cmp	r2, r3
 800212a:	ddc5      	ble.n	80020b8 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}

08002136 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002136:	b590      	push	{r4, r7, lr}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	4604      	mov	r4, r0
 800213e:	4608      	mov	r0, r1
 8002140:	4611      	mov	r1, r2
 8002142:	461a      	mov	r2, r3
 8002144:	4623      	mov	r3, r4
 8002146:	80fb      	strh	r3, [r7, #6]
 8002148:	4603      	mov	r3, r0
 800214a:	80bb      	strh	r3, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	81fb      	strh	r3, [r7, #14]
 8002158:	e00b      	b.n	8002172 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800215a:	89fa      	ldrh	r2, [r7, #14]
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	b299      	uxth	r1, r3
 8002162:	883a      	ldrh	r2, [r7, #0]
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff74 	bl	8002054 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	3301      	adds	r3, #1
 8002170:	81fb      	strh	r3, [r7, #14]
 8002172:	89fa      	ldrh	r2, [r7, #14]
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	429a      	cmp	r2, r3
 8002178:	d3ef      	bcc.n	800215a <LCD_Draw_Vertical_Line+0x24>
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}

08002184 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	4604      	mov	r4, r0
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	80fb      	strh	r3, [r7, #6]
 8002196:	4603      	mov	r3, r0
 8002198:	80bb      	strh	r3, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	807b      	strh	r3, [r7, #2]
 800219e:	4613      	mov	r3, r2
 80021a0:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	81fb      	strh	r3, [r7, #14]
 80021a6:	e00b      	b.n	80021c0 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	4413      	add	r3, r2
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	883a      	ldrh	r2, [r7, #0]
 80021b2:	88b9      	ldrh	r1, [r7, #4]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff4d 	bl	8002054 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	3301      	adds	r3, #1
 80021be:	81fb      	strh	r3, [r7, #14]
 80021c0:	89fa      	ldrh	r2, [r7, #14]
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d3ef      	bcc.n	80021a8 <LCD_Draw_Horizontal_Line+0x24>
  }


}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
	...

080021d4 <LCD_Clear>:



void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	460a      	mov	r2, r1
 80021de:	71fb      	strb	r3, [r7, #7]
 80021e0:	4613      	mov	r3, r2
 80021e2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10e      	bne.n	8002208 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e007      	b.n	8002200 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80021f0:	4908      	ldr	r1, [pc, #32]	@ (8002214 <LCD_Clear+0x40>)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	88ba      	ldrh	r2, [r7, #4]
 80021f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3301      	adds	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002206:	d3f3      	bcc.n	80021f0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	200001c0 	.word	0x200001c0

08002218 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8002222:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <LCD_SetTextColor+0x1c>)
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	8013      	strh	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	20000004 	.word	0x20000004

08002238 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002240:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <LCD_SetFont+0x1c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	200001bc 	.word	0x200001bc

08002258 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	603a      	str	r2, [r7, #0]
 8002262:	80fb      	strh	r3, [r7, #6]
 8002264:	460b      	mov	r3, r1
 8002266:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e04c      	b.n	8002310 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	e03f      	b.n	80022fc <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4413      	add	r3, r2
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	4619      	mov	r1, r3
 8002288:	4b27      	ldr	r3, [pc, #156]	@ (8002328 <LCD_Draw_Char+0xd0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	889b      	ldrh	r3, [r3, #4]
 800228e:	4a27      	ldr	r2, [pc, #156]	@ (800232c <LCD_Draw_Char+0xd4>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	b29b      	uxth	r3, r3
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	2280      	movs	r2, #128	@ 0x80
 800229c:	409a      	lsls	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	fa42 f303 	asr.w	r3, r2, r3
 80022a4:	400b      	ands	r3, r1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d104      	bne.n	80022b4 <LCD_Draw_Char+0x5c>
 80022aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002328 <LCD_Draw_Char+0xd0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	889b      	ldrh	r3, [r3, #4]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	d920      	bls.n	80022f6 <LCD_Draw_Char+0x9e>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	fa42 f303 	asr.w	r3, r2, r3
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <LCD_Draw_Char+0x80>
 80022ce:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <LCD_Draw_Char+0xd0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	2b0c      	cmp	r3, #12
 80022d6:	d80e      	bhi.n	80022f6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	4413      	add	r3, r2
 80022e0:	b298      	uxth	r0, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	88bb      	ldrh	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4a10      	ldr	r2, [pc, #64]	@ (8002330 <LCD_Draw_Char+0xd8>)
 80022ee:	8812      	ldrh	r2, [r2, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	f7ff feaf 	bl	8002054 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	3301      	adds	r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <LCD_Draw_Char+0xd0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	889b      	ldrh	r3, [r3, #4]
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4293      	cmp	r3, r2
 8002308:	d3b8      	bcc.n	800227c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3301      	adds	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <LCD_Draw_Char+0xd0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	88db      	ldrh	r3, [r3, #6]
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4293      	cmp	r3, r2
 800231c:	d3ab      	bcc.n	8002276 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200001bc 	.word	0x200001bc
 800232c:	aaaaaaab 	.word	0xaaaaaaab
 8002330:	20000004 	.word	0x20000004

08002334 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]
 800233e:	460b      	mov	r3, r1
 8002340:	80bb      	strh	r3, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	3b20      	subs	r3, #32
 800234a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800234c:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <LCD_DisplayChar+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	4907      	ldr	r1, [pc, #28]	@ (8002374 <LCD_DisplayChar+0x40>)
 8002356:	6809      	ldr	r1, [r1, #0]
 8002358:	88c9      	ldrh	r1, [r1, #6]
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	441a      	add	r2, r3
 8002362:	88b9      	ldrh	r1, [r7, #4]
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff76 	bl	8002258 <LCD_Draw_Char>
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200001bc 	.word	0x200001bc

08002378 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <LCD_Error_Handler+0x8>

08002384 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8002388:	f001 f91b 	bl	80035c2 <STMPE811_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b02      	cmp	r3, #2
 8002390:	d001      	beq.n	8002396 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8002392:	bf00      	nop
 8002394:	e7fd      	b.n	8002392 <InitializeLCDTouch+0xe>
  }
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}

0800239a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f001 f9c5 	bl	8003732 <STMPE811_ReadTouch>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80023b6:	f000 f9ff 	bl	80027b8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80023ba:	20ca      	movs	r0, #202	@ 0xca
 80023bc:	f000 f943 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80023c0:	20c3      	movs	r0, #195	@ 0xc3
 80023c2:	f000 f94d 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80023c6:	2008      	movs	r0, #8
 80023c8:	f000 f94a 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80023cc:	2050      	movs	r0, #80	@ 0x50
 80023ce:	f000 f947 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80023d2:	20cf      	movs	r0, #207	@ 0xcf
 80023d4:	f000 f937 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80023d8:	2000      	movs	r0, #0
 80023da:	f000 f941 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80023de:	20c1      	movs	r0, #193	@ 0xc1
 80023e0:	f000 f93e 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80023e4:	2030      	movs	r0, #48	@ 0x30
 80023e6:	f000 f93b 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80023ea:	20ed      	movs	r0, #237	@ 0xed
 80023ec:	f000 f92b 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80023f0:	2064      	movs	r0, #100	@ 0x64
 80023f2:	f000 f935 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80023f6:	2003      	movs	r0, #3
 80023f8:	f000 f932 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80023fc:	2012      	movs	r0, #18
 80023fe:	f000 f92f 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8002402:	2081      	movs	r0, #129	@ 0x81
 8002404:	f000 f92c 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002408:	20e8      	movs	r0, #232	@ 0xe8
 800240a:	f000 f91c 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800240e:	2085      	movs	r0, #133	@ 0x85
 8002410:	f000 f926 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f000 f923 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800241a:	2078      	movs	r0, #120	@ 0x78
 800241c:	f000 f920 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002420:	20cb      	movs	r0, #203	@ 0xcb
 8002422:	f000 f910 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8002426:	2039      	movs	r0, #57	@ 0x39
 8002428:	f000 f91a 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800242c:	202c      	movs	r0, #44	@ 0x2c
 800242e:	f000 f917 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f914 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8002438:	2034      	movs	r0, #52	@ 0x34
 800243a:	f000 f911 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800243e:	2002      	movs	r0, #2
 8002440:	f000 f90e 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8002444:	20f7      	movs	r0, #247	@ 0xf7
 8002446:	f000 f8fe 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800244a:	2020      	movs	r0, #32
 800244c:	f000 f908 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002450:	20ea      	movs	r0, #234	@ 0xea
 8002452:	f000 f8f8 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f902 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f000 f8ff 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8002462:	20b1      	movs	r0, #177	@ 0xb1
 8002464:	f000 f8ef 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f000 f8f9 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800246e:	201b      	movs	r0, #27
 8002470:	f000 f8f6 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002474:	20b6      	movs	r0, #182	@ 0xb6
 8002476:	f000 f8e6 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800247a:	200a      	movs	r0, #10
 800247c:	f000 f8f0 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8002480:	20a2      	movs	r0, #162	@ 0xa2
 8002482:	f000 f8ed 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8002486:	20c0      	movs	r0, #192	@ 0xc0
 8002488:	f000 f8dd 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800248c:	2010      	movs	r0, #16
 800248e:	f000 f8e7 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8002492:	20c1      	movs	r0, #193	@ 0xc1
 8002494:	f000 f8d7 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8002498:	2010      	movs	r0, #16
 800249a:	f000 f8e1 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800249e:	20c5      	movs	r0, #197	@ 0xc5
 80024a0:	f000 f8d1 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80024a4:	2045      	movs	r0, #69	@ 0x45
 80024a6:	f000 f8db 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80024aa:	2015      	movs	r0, #21
 80024ac:	f000 f8d8 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80024b0:	20c7      	movs	r0, #199	@ 0xc7
 80024b2:	f000 f8c8 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80024b6:	2090      	movs	r0, #144	@ 0x90
 80024b8:	f000 f8d2 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80024bc:	2036      	movs	r0, #54	@ 0x36
 80024be:	f000 f8c2 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80024c2:	20c8      	movs	r0, #200	@ 0xc8
 80024c4:	f000 f8cc 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80024c8:	20f2      	movs	r0, #242	@ 0xf2
 80024ca:	f000 f8bc 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f000 f8c6 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80024d4:	20b0      	movs	r0, #176	@ 0xb0
 80024d6:	f000 f8b6 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80024da:	20c2      	movs	r0, #194	@ 0xc2
 80024dc:	f000 f8c0 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80024e0:	20b6      	movs	r0, #182	@ 0xb6
 80024e2:	f000 f8b0 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80024e6:	200a      	movs	r0, #10
 80024e8:	f000 f8ba 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80024ec:	20a7      	movs	r0, #167	@ 0xa7
 80024ee:	f000 f8b7 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80024f2:	2027      	movs	r0, #39	@ 0x27
 80024f4:	f000 f8b4 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80024f8:	2004      	movs	r0, #4
 80024fa:	f000 f8b1 	bl	8002660 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80024fe:	202a      	movs	r0, #42	@ 0x2a
 8002500:	f000 f8a1 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002504:	2000      	movs	r0, #0
 8002506:	f000 f8ab 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f8a8 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002510:	2000      	movs	r0, #0
 8002512:	f000 f8a5 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002516:	20ef      	movs	r0, #239	@ 0xef
 8002518:	f000 f8a2 	bl	8002660 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800251c:	202b      	movs	r0, #43	@ 0x2b
 800251e:	f000 f892 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f89c 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002528:	2000      	movs	r0, #0
 800252a:	f000 f899 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800252e:	2001      	movs	r0, #1
 8002530:	f000 f896 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002534:	203f      	movs	r0, #63	@ 0x3f
 8002536:	f000 f893 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800253a:	20f6      	movs	r0, #246	@ 0xf6
 800253c:	f000 f883 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002540:	2001      	movs	r0, #1
 8002542:	f000 f88d 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f88a 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800254c:	2006      	movs	r0, #6
 800254e:	f000 f887 	bl	8002660 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002552:	202c      	movs	r0, #44	@ 0x2c
 8002554:	f000 f877 	bl	8002646 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002558:	20c8      	movs	r0, #200	@ 0xc8
 800255a:	f000 f9e9 	bl	8002930 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800255e:	2026      	movs	r0, #38	@ 0x26
 8002560:	f000 f871 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002564:	2001      	movs	r0, #1
 8002566:	f000 f87b 	bl	8002660 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800256a:	20e0      	movs	r0, #224	@ 0xe0
 800256c:	f000 f86b 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002570:	200f      	movs	r0, #15
 8002572:	f000 f875 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002576:	2029      	movs	r0, #41	@ 0x29
 8002578:	f000 f872 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800257c:	2024      	movs	r0, #36	@ 0x24
 800257e:	f000 f86f 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002582:	200c      	movs	r0, #12
 8002584:	f000 f86c 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002588:	200e      	movs	r0, #14
 800258a:	f000 f869 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800258e:	2009      	movs	r0, #9
 8002590:	f000 f866 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8002594:	204e      	movs	r0, #78	@ 0x4e
 8002596:	f000 f863 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800259a:	2078      	movs	r0, #120	@ 0x78
 800259c:	f000 f860 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80025a0:	203c      	movs	r0, #60	@ 0x3c
 80025a2:	f000 f85d 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80025a6:	2009      	movs	r0, #9
 80025a8:	f000 f85a 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80025ac:	2013      	movs	r0, #19
 80025ae:	f000 f857 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80025b2:	2005      	movs	r0, #5
 80025b4:	f000 f854 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80025b8:	2017      	movs	r0, #23
 80025ba:	f000 f851 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80025be:	2011      	movs	r0, #17
 80025c0:	f000 f84e 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f000 f84b 	bl	8002660 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80025ca:	20e1      	movs	r0, #225	@ 0xe1
 80025cc:	f000 f83b 	bl	8002646 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f000 f845 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80025d6:	2016      	movs	r0, #22
 80025d8:	f000 f842 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80025dc:	201b      	movs	r0, #27
 80025de:	f000 f83f 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80025e2:	2004      	movs	r0, #4
 80025e4:	f000 f83c 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80025e8:	2011      	movs	r0, #17
 80025ea:	f000 f839 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80025ee:	2007      	movs	r0, #7
 80025f0:	f000 f836 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80025f4:	2031      	movs	r0, #49	@ 0x31
 80025f6:	f000 f833 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80025fa:	2033      	movs	r0, #51	@ 0x33
 80025fc:	f000 f830 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002600:	2042      	movs	r0, #66	@ 0x42
 8002602:	f000 f82d 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002606:	2005      	movs	r0, #5
 8002608:	f000 f82a 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800260c:	200c      	movs	r0, #12
 800260e:	f000 f827 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002612:	200a      	movs	r0, #10
 8002614:	f000 f824 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002618:	2028      	movs	r0, #40	@ 0x28
 800261a:	f000 f821 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800261e:	202f      	movs	r0, #47	@ 0x2f
 8002620:	f000 f81e 	bl	8002660 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002624:	200f      	movs	r0, #15
 8002626:	f000 f81b 	bl	8002660 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800262a:	2011      	movs	r0, #17
 800262c:	f000 f80b 	bl	8002646 <ili9341_Write_Reg>
  LCD_Delay(200);
 8002630:	20c8      	movs	r0, #200	@ 0xc8
 8002632:	f000 f97d 	bl	8002930 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002636:	2029      	movs	r0, #41	@ 0x29
 8002638:	f000 f805 	bl	8002646 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800263c:	202c      	movs	r0, #44	@ 0x2c
 800263e:	f000 f802 	bl	8002646 <ili9341_Write_Reg>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}

08002646 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f94a 	bl	80028ec <LCD_IO_WriteReg>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f91b 	bl	80028a8 <LCD_IO_WriteData>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002680:	4819      	ldr	r0, [pc, #100]	@ (80026e8 <SPI_Init+0x6c>)
 8002682:	f004 fc6a 	bl	8006f5a <HAL_SPI_GetState>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d12b      	bne.n	80026e4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800268c:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <SPI_Init+0x6c>)
 800268e:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <SPI_Init+0x70>)
 8002690:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <SPI_Init+0x6c>)
 8002694:	2218      	movs	r2, #24
 8002696:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <SPI_Init+0x6c>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <SPI_Init+0x6c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80026a4:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <SPI_Init+0x6c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80026aa:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <SPI_Init+0x6c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80026b0:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <SPI_Init+0x6c>)
 80026b2:	2207      	movs	r2, #7
 80026b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80026b6:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <SPI_Init+0x6c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <SPI_Init+0x6c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <SPI_Init+0x6c>)
 80026c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80026ca:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <SPI_Init+0x6c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <SPI_Init+0x6c>)
 80026d2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026d6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80026d8:	4803      	ldr	r0, [pc, #12]	@ (80026e8 <SPI_Init+0x6c>)
 80026da:	f000 f833 	bl	8002744 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80026de:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <SPI_Init+0x6c>)
 80026e0:	f004 fa46 	bl	8006b70 <HAL_SPI_Init>
  }
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200259c0 	.word	0x200259c0
 80026ec:	40015000 	.word	0x40015000

080026f0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <SPI_Write+0x34>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1db9      	adds	r1, r7, #6
 8002704:	2201      	movs	r2, #1
 8002706:	4808      	ldr	r0, [pc, #32]	@ (8002728 <SPI_Write+0x38>)
 8002708:	f004 fae3 	bl	8006cd2 <HAL_SPI_Transmit>
 800270c:	4603      	mov	r3, r0
 800270e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002716:	f000 f809 	bl	800272c <SPI_Error>
  }
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000010 	.word	0x20000010
 8002728:	200259c0 	.word	0x200259c0

0800272c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002730:	4803      	ldr	r0, [pc, #12]	@ (8002740 <SPI_Error+0x14>)
 8002732:	f004 faa6 	bl	8006c82 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002736:	f7ff ffa1 	bl	800267c <SPI_Init>
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200259c0 	.word	0x200259c0

08002744 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	@ 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <SPI_MspInit+0x6c>)
 8002752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002754:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <SPI_MspInit+0x6c>)
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275a:	6453      	str	r3, [r2, #68]	@ 0x44
 800275c:	4b14      	ldr	r3, [pc, #80]	@ (80027b0 <SPI_MspInit+0x6c>)
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <SPI_MspInit+0x6c>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	4a0f      	ldr	r2, [pc, #60]	@ (80027b0 <SPI_MspInit+0x6c>)
 8002772:	f043 0320 	orr.w	r3, r3, #32
 8002776:	6313      	str	r3, [r2, #48]	@ 0x30
 8002778:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <SPI_MspInit+0x6c>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002784:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800278e:	2302      	movs	r3, #2
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002792:	2301      	movs	r3, #1
 8002794:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002796:	2305      	movs	r3, #5
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	4804      	ldr	r0, [pc, #16]	@ (80027b4 <SPI_MspInit+0x70>)
 80027a2:	f001 fce5 	bl	8004170 <HAL_GPIO_Init>
}
 80027a6:	bf00      	nop
 80027a8:	3728      	adds	r7, #40	@ 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40021400 	.word	0x40021400

080027b8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80027be:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <LCD_IO_Init+0xe0>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d164      	bne.n	8002890 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80027c6:	4b34      	ldr	r3, [pc, #208]	@ (8002898 <LCD_IO_Init+0xe0>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	4b32      	ldr	r3, [pc, #200]	@ (800289c <LCD_IO_Init+0xe4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	4a31      	ldr	r2, [pc, #196]	@ (800289c <LCD_IO_Init+0xe4>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6313      	str	r3, [r2, #48]	@ 0x30
 80027dc:	4b2f      	ldr	r3, [pc, #188]	@ (800289c <LCD_IO_Init+0xe4>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80027e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4619      	mov	r1, r3
 8002800:	4827      	ldr	r0, [pc, #156]	@ (80028a0 <LCD_IO_Init+0xe8>)
 8002802:	f001 fcb5 	bl	8004170 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	4b24      	ldr	r3, [pc, #144]	@ (800289c <LCD_IO_Init+0xe4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	4a23      	ldr	r2, [pc, #140]	@ (800289c <LCD_IO_Init+0xe4>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6313      	str	r3, [r2, #48]	@ 0x30
 8002816:	4b21      	ldr	r3, [pc, #132]	@ (800289c <LCD_IO_Init+0xe4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002826:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002828:	2301      	movs	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	4619      	mov	r1, r3
 800283a:	4819      	ldr	r0, [pc, #100]	@ (80028a0 <LCD_IO_Init+0xe8>)
 800283c:	f001 fc98 	bl	8004170 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <LCD_IO_Init+0xe4>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <LCD_IO_Init+0xe4>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <LCD_IO_Init+0xe4>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800285c:	2304      	movs	r3, #4
 800285e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002868:	2302      	movs	r3, #2
 800286a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	4619      	mov	r1, r3
 8002872:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <LCD_IO_Init+0xec>)
 8002874:	f001 fc7c 	bl	8004170 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002878:	2200      	movs	r2, #0
 800287a:	2104      	movs	r1, #4
 800287c:	4809      	ldr	r0, [pc, #36]	@ (80028a4 <LCD_IO_Init+0xec>)
 800287e:	f001 ff2f 	bl	80046e0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002882:	2201      	movs	r2, #1
 8002884:	2104      	movs	r1, #4
 8002886:	4807      	ldr	r0, [pc, #28]	@ (80028a4 <LCD_IO_Init+0xec>)
 8002888:	f001 ff2a 	bl	80046e0 <HAL_GPIO_WritePin>

    SPI_Init();
 800288c:	f7ff fef6 	bl	800267c <SPI_Init>
  }
}
 8002890:	bf00      	nop
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20025a18 	.word	0x20025a18
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40020800 	.word	0x40020800

080028a8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80028b2:	2201      	movs	r2, #1
 80028b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b8:	480a      	ldr	r0, [pc, #40]	@ (80028e4 <LCD_IO_WriteData+0x3c>)
 80028ba:	f001 ff11 	bl	80046e0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80028be:	2200      	movs	r2, #0
 80028c0:	2104      	movs	r1, #4
 80028c2:	4809      	ldr	r0, [pc, #36]	@ (80028e8 <LCD_IO_WriteData+0x40>)
 80028c4:	f001 ff0c 	bl	80046e0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff10 	bl	80026f0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80028d0:	2201      	movs	r2, #1
 80028d2:	2104      	movs	r1, #4
 80028d4:	4804      	ldr	r0, [pc, #16]	@ (80028e8 <LCD_IO_WriteData+0x40>)
 80028d6:	f001 ff03 	bl	80046e0 <HAL_GPIO_WritePin>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40020c00 	.word	0x40020c00
 80028e8:	40020800 	.word	0x40020800

080028ec <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80028f6:	2200      	movs	r2, #0
 80028f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028fc:	480a      	ldr	r0, [pc, #40]	@ (8002928 <LCD_IO_WriteReg+0x3c>)
 80028fe:	f001 feef 	bl	80046e0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002902:	2200      	movs	r2, #0
 8002904:	2104      	movs	r1, #4
 8002906:	4809      	ldr	r0, [pc, #36]	@ (800292c <LCD_IO_WriteReg+0x40>)
 8002908:	f001 feea 	bl	80046e0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	b29b      	uxth	r3, r3
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff feed 	bl	80026f0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002916:	2201      	movs	r2, #1
 8002918:	2104      	movs	r1, #4
 800291a:	4804      	ldr	r0, [pc, #16]	@ (800292c <LCD_IO_WriteReg+0x40>)
 800291c:	f001 fee0 	bl	80046e0 <HAL_GPIO_WritePin>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40020c00 	.word	0x40020c00
 800292c:	40020800 	.word	0x40020800

08002930 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f001 fae3 	bl	8003f04 <HAL_Delay>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800294a:	f001 fa69 	bl	8003e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800294e:	f000 f815 	bl	800297c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002952:	f000 f9f1 	bl	8002d38 <MX_GPIO_Init>
  MX_LTDC_Init();
 8002956:	f000 f8bb 	bl	8002ad0 <MX_LTDC_Init>
  //MX_RNG_Init();
  MX_TIM2_Init();
 800295a:	f000 f9a1 	bl	8002ca0 <MX_TIM2_Init>
  MX_SPI5_Init();
 800295e:	f000 f969 	bl	8002c34 <MX_SPI5_Init>
  MX_I2C3_Init();
 8002962:	f000 f875 	bl	8002a50 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8002966:	f7fd fe0b 	bl	8000580 <ApplicationInit>
  //InitButtonInterrupts();
  //LCD_Visual_Demo();
  HAL_Delay(2000);
 800296a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800296e:	f001 fac9 	bl	8003f04 <HAL_Delay>
  /* USER CODE END 2 */
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
  LCD_ScreenOne(); // This function Will not return
 8002972:	f7fd fe35 	bl	80005e0 <LCD_ScreenOne>
#endif
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002976:	bf00      	nop
 8002978:	e7fd      	b.n	8002976 <main+0x30>
	...

0800297c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b094      	sub	sp, #80	@ 0x50
 8002980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002982:	f107 0320 	add.w	r3, r7, #32
 8002986:	2230      	movs	r2, #48	@ 0x30
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f005 f8b2 	bl	8007af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	4b28      	ldr	r3, [pc, #160]	@ (8002a48 <SystemClock_Config+0xcc>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	4a27      	ldr	r2, [pc, #156]	@ (8002a48 <SystemClock_Config+0xcc>)
 80029aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b0:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <SystemClock_Config+0xcc>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <SystemClock_Config+0xd0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <SystemClock_Config+0xd0>)
 80029c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a4c <SystemClock_Config+0xd0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029d8:	2301      	movs	r3, #1
 80029da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e2:	2302      	movs	r3, #2
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029ec:	2308      	movs	r3, #8
 80029ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80029f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80029f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029f6:	2302      	movs	r3, #2
 80029f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029fa:	2307      	movs	r3, #7
 80029fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029fe:	f107 0320 	add.w	r3, r7, #32
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 f9f0 	bl	8005de8 <HAL_RCC_OscConfig>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002a0e:	f000 fb41 	bl	8003094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a12:	230f      	movs	r3, #15
 8002a14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a16:	2302      	movs	r3, #2
 8002a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	2105      	movs	r1, #5
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 fc51 	bl	80062d8 <HAL_RCC_ClockConfig>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002a3c:	f000 fb2a 	bl	8003094 <Error_Handler>
  }
}
 8002a40:	bf00      	nop
 8002a42:	3750      	adds	r7, #80	@ 0x50
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000

08002a50 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a56:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac8 <MX_I2C3_Init+0x78>)
 8002a58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002acc <MX_I2C3_Init+0x7c>)
 8002a5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a60:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002a66:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a72:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a74:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a80:	4b10      	ldr	r3, [pc, #64]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a86:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a8c:	480d      	ldr	r0, [pc, #52]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002a8e:	f001 fe65 	bl	800475c <HAL_I2C_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002a98:	f000 fafc 	bl	8003094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4809      	ldr	r0, [pc, #36]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002aa0:	f002 fe80 	bl	80057a4 <HAL_I2CEx_ConfigAnalogFilter>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002aaa:	f000 faf3 	bl	8003094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4804      	ldr	r0, [pc, #16]	@ (8002ac4 <MX_I2C3_Init+0x74>)
 8002ab2:	f002 feb3 	bl	800581c <HAL_I2CEx_ConfigDigitalFilter>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002abc:	f000 faea 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20025a1c 	.word	0x20025a1c
 8002ac8:	40005c00 	.word	0x40005c00
 8002acc:	000186a0 	.word	0x000186a0

08002ad0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b09a      	sub	sp, #104	@ 0x68
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002ad6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ada:	2234      	movs	r2, #52	@ 0x34
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 f808 	bl	8007af4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	2234      	movs	r2, #52	@ 0x34
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f005 f802 	bl	8007af4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002af0:	4b4e      	ldr	r3, [pc, #312]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002af2:	4a4f      	ldr	r2, [pc, #316]	@ (8002c30 <MX_LTDC_Init+0x160>)
 8002af4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002af6:	4b4d      	ldr	r3, [pc, #308]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002afc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b02:	4b4a      	ldr	r3, [pc, #296]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b08:	4b48      	ldr	r3, [pc, #288]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002b14:	4b45      	ldr	r3, [pc, #276]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b16:	2203      	movs	r2, #3
 8002b18:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002b1a:	4b44      	ldr	r3, [pc, #272]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b1c:	220e      	movs	r2, #14
 8002b1e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002b20:	4b42      	ldr	r3, [pc, #264]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b22:	2205      	movs	r2, #5
 8002b24:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8002b26:	4b41      	ldr	r3, [pc, #260]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b28:	f240 228e 	movw	r2, #654	@ 0x28e
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b30:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8002b36:	4b3d      	ldr	r3, [pc, #244]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b38:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b40:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002b46:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002b4e:	4b37      	ldr	r3, [pc, #220]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002b56:	4b35      	ldr	r3, [pc, #212]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002b5e:	4833      	ldr	r0, [pc, #204]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002b60:	f002 fe9c 	bl	800589c <HAL_LTDC_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002b6a:	f000 fa93 	bl	8003094 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b8e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002b90:	2305      	movs	r3, #5
 8002b92:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002bb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	481c      	ldr	r0, [pc, #112]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002bbc:	f002 ff3e 	bl	8005a3c <HAL_LTDC_ConfigLayer>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002bc6:	f000 fa65 	bl	8003094 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bea:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002bec:	2305      	movs	r3, #5
 8002bee:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002c0e:	463b      	mov	r3, r7
 8002c10:	2201      	movs	r2, #1
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <MX_LTDC_Init+0x15c>)
 8002c16:	f002 ff11 	bl	8005a3c <HAL_LTDC_ConfigLayer>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002c20:	f000 fa38 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002c24:	bf00      	nop
 8002c26:	3768      	adds	r7, #104	@ 0x68
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20025a70 	.word	0x20025a70
 8002c30:	40016800 	.word	0x40016800

08002c34 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002c38:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c3a:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <MX_SPI5_Init+0x68>)
 8002c3c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002c3e:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c44:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002c46:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c4c:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c58:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c64:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c66:	4b0c      	ldr	r3, [pc, #48]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c80:	220a      	movs	r2, #10
 8002c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002c84:	4804      	ldr	r0, [pc, #16]	@ (8002c98 <MX_SPI5_Init+0x64>)
 8002c86:	f003 ff73 	bl	8006b70 <HAL_SPI_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002c90:	f000 fa00 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20025b18 	.word	0x20025b18
 8002c9c:	40015000 	.word	0x40015000

08002ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002cbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cca:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002cd0:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd8:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cde:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ce4:	4813      	ldr	r0, [pc, #76]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002ce6:	f004 fa23 	bl	8007130 <HAL_TIM_Base_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002cf0:	f000 f9d0 	bl	8003094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cfa:	f107 0308 	add.w	r3, r7, #8
 8002cfe:	4619      	mov	r1, r3
 8002d00:	480c      	ldr	r0, [pc, #48]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002d02:	f004 fa64 	bl	80071ce <HAL_TIM_ConfigClockSource>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d0c:	f000 f9c2 	bl	8003094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d18:	463b      	mov	r3, r7
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	@ (8002d34 <MX_TIM2_Init+0x94>)
 8002d1e:	f004 fc63 	bl	80075e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d28:	f000 f9b4 	bl	8003094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d2c:	bf00      	nop
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20025b70 	.word	0x20025b70

08002d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	@ 0x38
 8002d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
 8002d4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	4bb2      	ldr	r3, [pc, #712]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d56:	4ab1      	ldr	r2, [pc, #708]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5e:	4baf      	ldr	r3, [pc, #700]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	623b      	str	r3, [r7, #32]
 8002d68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	4bab      	ldr	r3, [pc, #684]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	4aaa      	ldr	r2, [pc, #680]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d74:	f043 0320 	orr.w	r3, r3, #32
 8002d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7a:	4ba8      	ldr	r3, [pc, #672]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	4ba4      	ldr	r3, [pc, #656]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	4aa3      	ldr	r2, [pc, #652]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d96:	4ba1      	ldr	r3, [pc, #644]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	4b9d      	ldr	r3, [pc, #628]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	4a9c      	ldr	r2, [pc, #624]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db2:	4b9a      	ldr	r3, [pc, #616]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	4b96      	ldr	r3, [pc, #600]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	4a95      	ldr	r2, [pc, #596]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dce:	4b93      	ldr	r3, [pc, #588]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b8f      	ldr	r3, [pc, #572]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	4a8e      	ldr	r2, [pc, #568]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dea:	4b8c      	ldr	r3, [pc, #560]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b88      	ldr	r3, [pc, #544]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	4a87      	ldr	r2, [pc, #540]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002e00:	f043 0310 	orr.w	r3, r3, #16
 8002e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e06:	4b85      	ldr	r3, [pc, #532]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	4b81      	ldr	r3, [pc, #516]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	4a80      	ldr	r2, [pc, #512]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e22:	4b7e      	ldr	r3, [pc, #504]	@ (800301c <MX_GPIO_Init+0x2e4>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2116      	movs	r1, #22
 8002e32:	487b      	ldr	r0, [pc, #492]	@ (8003020 <MX_GPIO_Init+0x2e8>)
 8002e34:	f001 fc54 	bl	80046e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2180      	movs	r1, #128	@ 0x80
 8002e3c:	4879      	ldr	r0, [pc, #484]	@ (8003024 <MX_GPIO_Init+0x2ec>)
 8002e3e:	f001 fc4f 	bl	80046e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002e42:	2200      	movs	r2, #0
 8002e44:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002e48:	4877      	ldr	r0, [pc, #476]	@ (8003028 <MX_GPIO_Init+0x2f0>)
 8002e4a:	f001 fc49 	bl	80046e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002e54:	4875      	ldr	r0, [pc, #468]	@ (800302c <MX_GPIO_Init+0x2f4>)
 8002e56:	f001 fc43 	bl	80046e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002e5a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e6c:	230c      	movs	r3, #12
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e74:	4619      	mov	r1, r3
 8002e76:	486e      	ldr	r0, [pc, #440]	@ (8003030 <MX_GPIO_Init+0x2f8>)
 8002e78:	f001 f97a 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e94:	4619      	mov	r1, r3
 8002e96:	4862      	ldr	r0, [pc, #392]	@ (8003020 <MX_GPIO_Init+0x2e8>)
 8002e98:	f001 f96a 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002e9c:	2316      	movs	r3, #22
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	485b      	ldr	r0, [pc, #364]	@ (8003020 <MX_GPIO_Init+0x2e8>)
 8002eb4:	f001 f95c 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002eb8:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ebe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4855      	ldr	r0, [pc, #340]	@ (8003024 <MX_GPIO_Init+0x2ec>)
 8002ed0:	f001 f94e 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002ed4:	2380      	movs	r3, #128	@ 0x80
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	484e      	ldr	r0, [pc, #312]	@ (8003024 <MX_GPIO_Init+0x2ec>)
 8002eec:	f001 f940 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ef4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f02:	4619      	mov	r1, r3
 8002f04:	4846      	ldr	r0, [pc, #280]	@ (8003020 <MX_GPIO_Init+0x2e8>)
 8002f06:	f001 f933 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4845      	ldr	r0, [pc, #276]	@ (8003034 <MX_GPIO_Init+0x2fc>)
 8002f1e:	f001 f927 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002f22:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f30:	2303      	movs	r3, #3
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f34:	230c      	movs	r3, #12
 8002f36:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	483b      	ldr	r0, [pc, #236]	@ (800302c <MX_GPIO_Init+0x2f4>)
 8002f40:	f001 f916 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002f44:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f56:	230c      	movs	r3, #12
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4835      	ldr	r0, [pc, #212]	@ (8003038 <MX_GPIO_Init+0x300>)
 8002f62:	f001 f905 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002f66:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002f78:	230c      	movs	r3, #12
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f80:	4619      	mov	r1, r3
 8002f82:	482c      	ldr	r0, [pc, #176]	@ (8003034 <MX_GPIO_Init+0x2fc>)
 8002f84:	f001 f8f4 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002f88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4825      	ldr	r0, [pc, #148]	@ (8003034 <MX_GPIO_Init+0x2fc>)
 8002f9e:	f001 f8e7 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002fa2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002fb4:	230c      	movs	r3, #12
 8002fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	481a      	ldr	r0, [pc, #104]	@ (8003028 <MX_GPIO_Init+0x2f0>)
 8002fc0:	f001 f8d6 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002fc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4813      	ldr	r0, [pc, #76]	@ (8003028 <MX_GPIO_Init+0x2f0>)
 8002fda:	f001 f8c9 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002fde:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2300      	movs	r3, #0
 8002fee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	480c      	ldr	r0, [pc, #48]	@ (8003028 <MX_GPIO_Init+0x2f0>)
 8002ff8:	f001 f8ba 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002ffc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800300e:	2307      	movs	r3, #7
 8003010:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003016:	4619      	mov	r1, r3
 8003018:	e010      	b.n	800303c <MX_GPIO_Init+0x304>
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	40020800 	.word	0x40020800
 8003024:	40020000 	.word	0x40020000
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021800 	.word	0x40021800
 8003030:	40021400 	.word	0x40021400
 8003034:	40020400 	.word	0x40020400
 8003038:	40021000 	.word	0x40021000
 800303c:	4812      	ldr	r0, [pc, #72]	@ (8003088 <MX_GPIO_Init+0x350>)
 800303e:	f001 f897 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003042:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003048:	2301      	movs	r3, #1
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003058:	4619      	mov	r1, r3
 800305a:	480c      	ldr	r0, [pc, #48]	@ (800308c <MX_GPIO_Init+0x354>)
 800305c:	f001 f888 	bl	8004170 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003060:	2360      	movs	r3, #96	@ 0x60
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003070:	230c      	movs	r3, #12
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003078:	4619      	mov	r1, r3
 800307a:	4805      	ldr	r0, [pc, #20]	@ (8003090 <MX_GPIO_Init+0x358>)
 800307c:	f001 f878 	bl	8004170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003080:	bf00      	nop
 8003082:	3738      	adds	r7, #56	@ 0x38
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40020000 	.word	0x40020000
 800308c:	40021800 	.word	0x40021800
 8003090:	40020400 	.word	0x40020400

08003094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003098:	b672      	cpsid	i
}
 800309a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <Error_Handler+0x8>

080030a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <HAL_MspInit+0x4c>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	4a0f      	ldr	r2, [pc, #60]	@ (80030ec <HAL_MspInit+0x4c>)
 80030b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <HAL_MspInit+0x4c>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_MspInit+0x4c>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <HAL_MspInit+0x4c>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_MspInit+0x4c>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030de:	2007      	movs	r0, #7
 80030e0:	f001 f804 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	@ 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a29      	ldr	r2, [pc, #164]	@ (80031b4 <HAL_I2C_MspInit+0xc4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d14b      	bne.n	80031aa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	4b28      	ldr	r3, [pc, #160]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	4a27      	ldr	r2, [pc, #156]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6313      	str	r3, [r2, #48]	@ 0x30
 8003122:	4b25      	ldr	r3, [pc, #148]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b21      	ldr	r3, [pc, #132]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	4a20      	ldr	r2, [pc, #128]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6313      	str	r3, [r2, #48]	@ 0x30
 800313e:	4b1e      	ldr	r3, [pc, #120]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800314a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800314e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003150:	2312      	movs	r3, #18
 8003152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003158:	2300      	movs	r3, #0
 800315a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800315c:	2304      	movs	r3, #4
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4619      	mov	r1, r3
 8003166:	4815      	ldr	r0, [pc, #84]	@ (80031bc <HAL_I2C_MspInit+0xcc>)
 8003168:	f001 f802 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800316c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003172:	2312      	movs	r3, #18
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800317e:	2304      	movs	r3, #4
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	480d      	ldr	r0, [pc, #52]	@ (80031c0 <HAL_I2C_MspInit+0xd0>)
 800318a:	f000 fff1 	bl	8004170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 8003198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800319c:	6413      	str	r3, [r2, #64]	@ 0x40
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_I2C_MspInit+0xc8>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	@ 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40005c00 	.word	0x40005c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020800 	.word	0x40020800
 80031c0:	40020000 	.word	0x40020000

080031c4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b09a      	sub	sp, #104	@ 0x68
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031e0:	2230      	movs	r2, #48	@ 0x30
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f004 fc85 	bl	8007af4 <memset>
  if(hltdc->Instance==LTDC)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a81      	ldr	r2, [pc, #516]	@ (80033f4 <HAL_LTDC_MspInit+0x230>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	f040 80fb 	bne.w	80033ec <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80031f6:	2308      	movs	r3, #8
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 80031fa:	23c8      	movs	r3, #200	@ 0xc8
 80031fc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80031fe:	2302      	movs	r3, #2
 8003200:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8003202:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003206:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fa6f 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8003218:	f7ff ff3c 	bl	8003094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800321c:	2300      	movs	r3, #0
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	4b75      	ldr	r3, [pc, #468]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 8003222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003224:	4a74      	ldr	r2, [pc, #464]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 8003226:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800322a:	6453      	str	r3, [r2, #68]	@ 0x44
 800322c:	4b72      	ldr	r3, [pc, #456]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 800322e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003230:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	4b6e      	ldr	r3, [pc, #440]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	4a6d      	ldr	r2, [pc, #436]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 8003242:	f043 0320 	orr.w	r3, r3, #32
 8003246:	6313      	str	r3, [r2, #48]	@ 0x30
 8003248:	4b6b      	ldr	r3, [pc, #428]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	4b67      	ldr	r3, [pc, #412]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	4a66      	ldr	r2, [pc, #408]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6313      	str	r3, [r2, #48]	@ 0x30
 8003264:	4b64      	ldr	r3, [pc, #400]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	4b60      	ldr	r3, [pc, #384]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003278:	4a5f      	ldr	r2, [pc, #380]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003280:	4b5d      	ldr	r3, [pc, #372]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	4b59      	ldr	r3, [pc, #356]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	4a58      	ldr	r2, [pc, #352]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 8003296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800329a:	6313      	str	r3, [r2, #48]	@ 0x30
 800329c:	4b56      	ldr	r3, [pc, #344]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	4b52      	ldr	r3, [pc, #328]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	4a51      	ldr	r2, [pc, #324]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 80032b2:	f043 0304 	orr.w	r3, r3, #4
 80032b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b8:	4b4f      	ldr	r3, [pc, #316]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	4b4b      	ldr	r3, [pc, #300]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	4a4a      	ldr	r2, [pc, #296]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 80032ce:	f043 0308 	orr.w	r3, r3, #8
 80032d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d4:	4b48      	ldr	r3, [pc, #288]	@ (80033f8 <HAL_LTDC_MspInit+0x234>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80032e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032e4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	2300      	movs	r3, #0
 80032f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032f2:	230e      	movs	r3, #14
 80032f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80032f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032fa:	4619      	mov	r1, r3
 80032fc:	483f      	ldr	r0, [pc, #252]	@ (80033fc <HAL_LTDC_MspInit+0x238>)
 80032fe:	f000 ff37 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003302:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003306:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003314:	230e      	movs	r3, #14
 8003316:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800331c:	4619      	mov	r1, r3
 800331e:	4838      	ldr	r0, [pc, #224]	@ (8003400 <HAL_LTDC_MspInit+0x23c>)
 8003320:	f000 ff26 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003324:	2303      	movs	r3, #3
 8003326:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003330:	2300      	movs	r3, #0
 8003332:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003334:	2309      	movs	r3, #9
 8003336:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003338:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800333c:	4619      	mov	r1, r3
 800333e:	4831      	ldr	r0, [pc, #196]	@ (8003404 <HAL_LTDC_MspInit+0x240>)
 8003340:	f000 ff16 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003344:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003348:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003356:	230e      	movs	r3, #14
 8003358:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800335e:	4619      	mov	r1, r3
 8003360:	4828      	ldr	r0, [pc, #160]	@ (8003404 <HAL_LTDC_MspInit+0x240>)
 8003362:	f000 ff05 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003366:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800336a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003378:	230e      	movs	r3, #14
 800337a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800337c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003380:	4619      	mov	r1, r3
 8003382:	4821      	ldr	r0, [pc, #132]	@ (8003408 <HAL_LTDC_MspInit+0x244>)
 8003384:	f000 fef4 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003388:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800338c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	2300      	movs	r3, #0
 8003398:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800339a:	230e      	movs	r3, #14
 800339c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033a2:	4619      	mov	r1, r3
 80033a4:	4819      	ldr	r0, [pc, #100]	@ (800340c <HAL_LTDC_MspInit+0x248>)
 80033a6:	f000 fee3 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80033aa:	2348      	movs	r3, #72	@ 0x48
 80033ac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	2300      	movs	r3, #0
 80033b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033ba:	230e      	movs	r3, #14
 80033bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033c2:	4619      	mov	r1, r3
 80033c4:	4812      	ldr	r0, [pc, #72]	@ (8003410 <HAL_LTDC_MspInit+0x24c>)
 80033c6:	f000 fed3 	bl	8004170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80033ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033ce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d0:	2302      	movs	r3, #2
 80033d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d8:	2300      	movs	r3, #0
 80033da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80033dc:	2309      	movs	r3, #9
 80033de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033e4:	4619      	mov	r1, r3
 80033e6:	4808      	ldr	r0, [pc, #32]	@ (8003408 <HAL_LTDC_MspInit+0x244>)
 80033e8:	f000 fec2 	bl	8004170 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80033ec:	bf00      	nop
 80033ee:	3768      	adds	r7, #104	@ 0x68
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40016800 	.word	0x40016800
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40021400 	.word	0x40021400
 8003400:	40020000 	.word	0x40020000
 8003404:	40020400 	.word	0x40020400
 8003408:	40021800 	.word	0x40021800
 800340c:	40020800 	.word	0x40020800
 8003410:	40020c00 	.word	0x40020c00

08003414 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0b      	ldr	r2, [pc, #44]	@ (8003450 <HAL_RNG_MspInit+0x3c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d10d      	bne.n	8003442 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <HAL_RNG_MspInit+0x40>)
 800342c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342e:	4a09      	ldr	r2, [pc, #36]	@ (8003454 <HAL_RNG_MspInit+0x40>)
 8003430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003434:	6353      	str	r3, [r2, #52]	@ 0x34
 8003436:	4b07      	ldr	r3, [pc, #28]	@ (8003454 <HAL_RNG_MspInit+0x40>)
 8003438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	50060800 	.word	0x50060800
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	@ 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <HAL_SPI_MspInit+0x84>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d12c      	bne.n	80034d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <HAL_SPI_MspInit+0x88>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	4a17      	ldr	r2, [pc, #92]	@ (80034e0 <HAL_SPI_MspInit+0x88>)
 8003484:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003488:	6453      	str	r3, [r2, #68]	@ 0x44
 800348a:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <HAL_SPI_MspInit+0x88>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <HAL_SPI_MspInit+0x88>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	4a10      	ldr	r2, [pc, #64]	@ (80034e0 <HAL_SPI_MspInit+0x88>)
 80034a0:	f043 0320 	orr.w	r3, r3, #32
 80034a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a6:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <HAL_SPI_MspInit+0x88>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80034b2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80034b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c0:	2300      	movs	r3, #0
 80034c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80034c4:	2305      	movs	r3, #5
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	4805      	ldr	r0, [pc, #20]	@ (80034e4 <HAL_SPI_MspInit+0x8c>)
 80034d0:	f000 fe4e 	bl	8004170 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80034d4:	bf00      	nop
 80034d6:	3728      	adds	r7, #40	@ 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40015000 	.word	0x40015000
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40021400 	.word	0x40021400

080034e8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a08      	ldr	r2, [pc, #32]	@ (8003518 <HAL_SPI_MspDeInit+0x30>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10a      	bne.n	8003510 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80034fa:	4b08      	ldr	r3, [pc, #32]	@ (800351c <HAL_SPI_MspDeInit+0x34>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	4a07      	ldr	r2, [pc, #28]	@ (800351c <HAL_SPI_MspDeInit+0x34>)
 8003500:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003504:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003506:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800350a:	4805      	ldr	r0, [pc, #20]	@ (8003520 <HAL_SPI_MspDeInit+0x38>)
 800350c:	f000 ffdc 	bl	80044c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40015000 	.word	0x40015000
 800351c:	40023800 	.word	0x40023800
 8003520:	40021400 	.word	0x40021400

08003524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003534:	d10d      	bne.n	8003552 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <HAL_TIM_Base_MspInit+0x3c>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	4a08      	ldr	r2, [pc, #32]	@ (8003560 <HAL_TIM_Base_MspInit+0x3c>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6413      	str	r3, [r2, #64]	@ 0x40
 8003546:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <HAL_TIM_Base_MspInit+0x3c>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <NMI_Handler+0x4>

0800356c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <HardFault_Handler+0x4>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <MemManage_Handler+0x4>

0800357c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <BusFault_Handler+0x4>

08003584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <UsageFault_Handler+0x4>

0800358c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ba:	f000 fc83 	bl	8003ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80035c8:	f000 f9ce 	bl	8003968 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80035cc:	f000 f98e 	bl	80038ec <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80035d0:	2202      	movs	r2, #2
 80035d2:	2103      	movs	r1, #3
 80035d4:	2082      	movs	r0, #130	@ 0x82
 80035d6:	f000 fa1b 	bl	8003a10 <I2C3_Write>
    HAL_Delay(5);
 80035da:	2005      	movs	r0, #5
 80035dc:	f000 fc92 	bl	8003f04 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80035e0:	2200      	movs	r2, #0
 80035e2:	2103      	movs	r1, #3
 80035e4:	2082      	movs	r0, #130	@ 0x82
 80035e6:	f000 fa13 	bl	8003a10 <I2C3_Write>
    HAL_Delay(2);
 80035ea:	2002      	movs	r0, #2
 80035ec:	f000 fc8a 	bl	8003f04 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80035f0:	1cba      	adds	r2, r7, #2
 80035f2:	2302      	movs	r3, #2
 80035f4:	2100      	movs	r1, #0
 80035f6:	2082      	movs	r0, #130	@ 0x82
 80035f8:	f000 fa5a 	bl	8003ab0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003602:	887b      	ldrh	r3, [r7, #2]
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	b29a      	uxth	r2, r3
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	4313      	orrs	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	f640 0211 	movw	r2, #2065	@ 0x811
 8003614:	4293      	cmp	r3, r2
 8003616:	d001      	beq.n	800361c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003618:	2303      	movs	r3, #3
 800361a:	e075      	b.n	8003708 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800361c:	2202      	movs	r2, #2
 800361e:	2103      	movs	r1, #3
 8003620:	2082      	movs	r0, #130	@ 0x82
 8003622:	f000 f9f5 	bl	8003a10 <I2C3_Write>
    HAL_Delay(5);
 8003626:	2005      	movs	r0, #5
 8003628:	f000 fc6c 	bl	8003f04 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800362c:	2200      	movs	r2, #0
 800362e:	2103      	movs	r1, #3
 8003630:	2082      	movs	r0, #130	@ 0x82
 8003632:	f000 f9ed 	bl	8003a10 <I2C3_Write>
    HAL_Delay(2);
 8003636:	2002      	movs	r0, #2
 8003638:	f000 fc64 	bl	8003f04 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800363c:	2004      	movs	r0, #4
 800363e:	f000 f867 	bl	8003710 <STMPE811_Read>
 8003642:	4603      	mov	r3, r0
 8003644:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003646:	797b      	ldrb	r3, [r7, #5]
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800364e:	797b      	ldrb	r3, [r7, #5]
 8003650:	461a      	mov	r2, r3
 8003652:	2104      	movs	r1, #4
 8003654:	2082      	movs	r0, #130	@ 0x82
 8003656:	f000 f9db 	bl	8003a10 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800365a:	2004      	movs	r0, #4
 800365c:	f000 f858 	bl	8003710 <STMPE811_Read>
 8003660:	4603      	mov	r3, r0
 8003662:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003664:	797b      	ldrb	r3, [r7, #5]
 8003666:	f023 0302 	bic.w	r3, r3, #2
 800366a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800366c:	797b      	ldrb	r3, [r7, #5]
 800366e:	461a      	mov	r2, r3
 8003670:	2104      	movs	r1, #4
 8003672:	2082      	movs	r0, #130	@ 0x82
 8003674:	f000 f9cc 	bl	8003a10 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003678:	2249      	movs	r2, #73	@ 0x49
 800367a:	2120      	movs	r1, #32
 800367c:	2082      	movs	r0, #130	@ 0x82
 800367e:	f000 f9c7 	bl	8003a10 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003682:	2002      	movs	r0, #2
 8003684:	f000 fc3e 	bl	8003f04 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003688:	2201      	movs	r2, #1
 800368a:	2121      	movs	r1, #33	@ 0x21
 800368c:	2082      	movs	r0, #130	@ 0x82
 800368e:	f000 f9bf 	bl	8003a10 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003692:	2017      	movs	r0, #23
 8003694:	f000 f83c 	bl	8003710 <STMPE811_Read>
 8003698:	4603      	mov	r3, r0
 800369a:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800369c:	797b      	ldrb	r3, [r7, #5]
 800369e:	f043 031e 	orr.w	r3, r3, #30
 80036a2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80036a4:	797b      	ldrb	r3, [r7, #5]
 80036a6:	461a      	mov	r2, r3
 80036a8:	2117      	movs	r1, #23
 80036aa:	2082      	movs	r0, #130	@ 0x82
 80036ac:	f000 f9b0 	bl	8003a10 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80036b0:	229a      	movs	r2, #154	@ 0x9a
 80036b2:	2141      	movs	r1, #65	@ 0x41
 80036b4:	2082      	movs	r0, #130	@ 0x82
 80036b6:	f000 f9ab 	bl	8003a10 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80036ba:	2201      	movs	r2, #1
 80036bc:	214a      	movs	r1, #74	@ 0x4a
 80036be:	2082      	movs	r0, #130	@ 0x82
 80036c0:	f000 f9a6 	bl	8003a10 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80036c4:	2201      	movs	r2, #1
 80036c6:	214b      	movs	r1, #75	@ 0x4b
 80036c8:	2082      	movs	r0, #130	@ 0x82
 80036ca:	f000 f9a1 	bl	8003a10 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80036ce:	2200      	movs	r2, #0
 80036d0:	214b      	movs	r1, #75	@ 0x4b
 80036d2:	2082      	movs	r0, #130	@ 0x82
 80036d4:	f000 f99c 	bl	8003a10 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80036d8:	2201      	movs	r2, #1
 80036da:	2156      	movs	r1, #86	@ 0x56
 80036dc:	2082      	movs	r0, #130	@ 0x82
 80036de:	f000 f997 	bl	8003a10 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80036e2:	2201      	movs	r2, #1
 80036e4:	2158      	movs	r1, #88	@ 0x58
 80036e6:	2082      	movs	r0, #130	@ 0x82
 80036e8:	f000 f992 	bl	8003a10 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80036ec:	2203      	movs	r2, #3
 80036ee:	2140      	movs	r1, #64	@ 0x40
 80036f0:	2082      	movs	r0, #130	@ 0x82
 80036f2:	f000 f98d 	bl	8003a10 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80036f6:	22ff      	movs	r2, #255	@ 0xff
 80036f8:	210b      	movs	r1, #11
 80036fa:	2082      	movs	r0, #130	@ 0x82
 80036fc:	f000 f988 	bl	8003a10 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8003700:	20c8      	movs	r0, #200	@ 0xc8
 8003702:	f000 fbff 	bl	8003f04 <HAL_Delay>

    return STMPE811_State_Ok;
 8003706:	2302      	movs	r3, #2

}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800371a:	f107 020f 	add.w	r2, r7, #15
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	4619      	mov	r1, r3
 8003722:	2082      	movs	r0, #130	@ 0x82
 8003724:	f000 f99e 	bl	8003a64 <I2C3_Read>

    return readData;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	791a      	ldrb	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8003742:	2040      	movs	r0, #64	@ 0x40
 8003744:	f7ff ffe4 	bl	8003710 <STMPE811_Read>
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800374c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db0e      	blt.n	8003772 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800375a:	2201      	movs	r2, #1
 800375c:	214b      	movs	r1, #75	@ 0x4b
 800375e:	2082      	movs	r0, #130	@ 0x82
 8003760:	f000 f956 	bl	8003a10 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003764:	2200      	movs	r2, #0
 8003766:	214b      	movs	r1, #75	@ 0x4b
 8003768:	2082      	movs	r0, #130	@ 0x82
 800376a:	f000 f951 	bl	8003a10 <I2C3_Write>

        return STMPE811_State_Released;
 800376e:	2301      	movs	r3, #1
 8003770:	e0a7      	b.n	80038c2 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	799b      	ldrb	r3, [r3, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d117      	bne.n	80037aa <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f9b8 	bl	8003af4 <TM_STMPE811_ReadX>
 8003784:	4603      	mov	r3, r0
 8003786:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	885b      	ldrh	r3, [r3, #2]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fa0b 	bl	8003bb0 <TM_STMPE811_ReadY>
 800379a:	4603      	mov	r3, r0
 800379c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80037a0:	3301      	adds	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	805a      	strh	r2, [r3, #2]
 80037a8:	e048      	b.n	800383c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	799b      	ldrb	r3, [r3, #6]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d112      	bne.n	80037d8 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f99c 	bl	8003af4 <TM_STMPE811_ReadX>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	885b      	ldrh	r3, [r3, #2]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f9f1 	bl	8003bb0 <TM_STMPE811_ReadY>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	805a      	strh	r2, [r3, #2]
 80037d6:	e031      	b.n	800383c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	799b      	ldrb	r3, [r3, #6]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d115      	bne.n	800380c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	885b      	ldrh	r3, [r3, #2]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f985 	bl	8003af4 <TM_STMPE811_ReadX>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f9da 	bl	8003bb0 <TM_STMPE811_ReadY>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003802:	3301      	adds	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	e017      	b.n	800383c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	799b      	ldrb	r3, [r3, #6]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d113      	bne.n	800383c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f96b 	bl	8003af4 <TM_STMPE811_ReadX>
 800381e:	4603      	mov	r3, r0
 8003820:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f9be 	bl	8003bb0 <TM_STMPE811_ReadY>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800383c:	2201      	movs	r2, #1
 800383e:	214b      	movs	r1, #75	@ 0x4b
 8003840:	2082      	movs	r0, #130	@ 0x82
 8003842:	f000 f8e5 	bl	8003a10 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003846:	2200      	movs	r2, #0
 8003848:	214b      	movs	r1, #75	@ 0x4b
 800384a:	2082      	movs	r0, #130	@ 0x82
 800384c:	f000 f8e0 	bl	8003a10 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	799b      	ldrb	r3, [r3, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <STMPE811_ReadTouch+0x12e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	799b      	ldrb	r3, [r3, #6]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d115      	bne.n	800388c <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d027      	beq.n	80038b8 <STMPE811_ReadTouch+0x186>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	2bee      	cmp	r3, #238	@ 0xee
 800386e:	d823      	bhi.n	80038b8 <STMPE811_ReadTouch+0x186>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	885b      	ldrh	r3, [r3, #2]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01f      	beq.n	80038b8 <STMPE811_ReadTouch+0x186>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	885b      	ldrh	r3, [r3, #2]
 800387c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8003880:	d81a      	bhi.n	80038b8 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003888:	2300      	movs	r3, #0
 800388a:	e01a      	b.n	80038c2 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <STMPE811_ReadTouch+0x188>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800389c:	d80d      	bhi.n	80038ba <STMPE811_ReadTouch+0x188>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	885b      	ldrh	r3, [r3, #2]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <STMPE811_ReadTouch+0x188>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	885b      	ldrh	r3, [r3, #2]
 80038aa:	2bee      	cmp	r3, #238	@ 0xee
 80038ac:	d805      	bhi.n	80038ba <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e004      	b.n	80038c2 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80038b8:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80038c0:	2301      	movs	r3, #1
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80038d0:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20025c0c 	.word	0x20025c0c

080038ec <I2C3_Init>:

static void I2C3_Init()
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <I2C3_Init+0x6c>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	4a17      	ldr	r2, [pc, #92]	@ (8003958 <I2C3_Init+0x6c>)
 80038fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003900:	6413      	str	r3, [r2, #64]	@ 0x40
 8003902:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <I2C3_Init+0x6c>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800390e:	4b13      	ldr	r3, [pc, #76]	@ (800395c <I2C3_Init+0x70>)
 8003910:	4a13      	ldr	r2, [pc, #76]	@ (8003960 <I2C3_Init+0x74>)
 8003912:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <I2C3_Init+0x70>)
 8003916:	4a13      	ldr	r2, [pc, #76]	@ (8003964 <I2C3_Init+0x78>)
 8003918:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <I2C3_Init+0x70>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003920:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <I2C3_Init+0x70>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003926:	4b0d      	ldr	r3, [pc, #52]	@ (800395c <I2C3_Init+0x70>)
 8003928:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800392c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800392e:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <I2C3_Init+0x70>)
 8003930:	2200      	movs	r2, #0
 8003932:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003934:	4b09      	ldr	r3, [pc, #36]	@ (800395c <I2C3_Init+0x70>)
 8003936:	2200      	movs	r2, #0
 8003938:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800393a:	4808      	ldr	r0, [pc, #32]	@ (800395c <I2C3_Init+0x70>)
 800393c:	f000 ff0e 	bl	800475c <HAL_I2C_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <I2C3_Init+0x5e>
    }
    return;
 800394e:	bf00      	nop
}
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800
 800395c:	20025bb8 	.word	0x20025bb8
 8003960:	40005c00 	.word	0x40005c00
 8003964:	000186a0 	.word	0x000186a0

08003968 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	60da      	str	r2, [r3, #12]
 800397c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <I2C3_MspInit+0x9c>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <I2C3_MspInit+0x9c>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	6313      	str	r3, [r2, #48]	@ 0x30
 800398e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a04 <I2C3_MspInit+0x9c>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	4b19      	ldr	r3, [pc, #100]	@ (8003a04 <I2C3_MspInit+0x9c>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	4a18      	ldr	r2, [pc, #96]	@ (8003a04 <I2C3_MspInit+0x9c>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039aa:	4b16      	ldr	r3, [pc, #88]	@ (8003a04 <I2C3_MspInit+0x9c>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80039b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039bc:	2312      	movs	r3, #18
 80039be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039c8:	2304      	movs	r3, #4
 80039ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	4619      	mov	r1, r3
 80039d2:	480d      	ldr	r0, [pc, #52]	@ (8003a08 <I2C3_MspInit+0xa0>)
 80039d4:	f000 fbcc 	bl	8004170 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80039d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039de:	2312      	movs	r3, #18
 80039e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80039ea:	2304      	movs	r3, #4
 80039ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80039ee:	f107 030c 	add.w	r3, r7, #12
 80039f2:	4619      	mov	r1, r3
 80039f4:	4805      	ldr	r0, [pc, #20]	@ (8003a0c <I2C3_MspInit+0xa4>)
 80039f6:	f000 fbbb 	bl	8004170 <HAL_GPIO_Init>
    
}
 80039fa:	bf00      	nop
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40020800 	.word	0x40020800
 8003a0c:	40020000 	.word	0x40020000

08003a10 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af04      	add	r7, sp, #16
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	717b      	strb	r3, [r7, #5]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8003a22:	793b      	ldrb	r3, [r7, #4]
 8003a24:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003a26:	797b      	ldrb	r3, [r7, #5]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	88f9      	ldrh	r1, [r7, #6]
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <I2C3_Write+0x48>)
 8003a2e:	9302      	str	r3, [sp, #8]
 8003a30:	2301      	movs	r3, #1
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	f107 030f 	add.w	r3, r7, #15
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	4807      	ldr	r0, [pc, #28]	@ (8003a5c <I2C3_Write+0x4c>)
 8003a3e:	f000 ffd1 	bl	80049e4 <HAL_I2C_Mem_Write>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <I2C3_Write+0x50>)
 8003a48:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003a4a:	f7ff ff3f 	bl	80038cc <verifyHAL_I2C_IS_OKAY>
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	0003d090 	.word	0x0003d090
 8003a5c:	20025bb8 	.word	0x20025bb8
 8003a60:	20025c0c 	.word	0x20025c0c

08003a64 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af04      	add	r7, sp, #16
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	603a      	str	r2, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
 8003a70:	460b      	mov	r3, r1
 8003a72:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	b299      	uxth	r1, r3
 8003a78:	79bb      	ldrb	r3, [r7, #6]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <I2C3_Read+0x40>)
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	2301      	movs	r3, #1
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	4807      	ldr	r0, [pc, #28]	@ (8003aa8 <I2C3_Read+0x44>)
 8003a8c:	f001 f8a4 	bl	8004bd8 <HAL_I2C_Mem_Read>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <I2C3_Read+0x48>)
 8003a96:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003a98:	f7ff ff18 	bl	80038cc <verifyHAL_I2C_IS_OKAY>
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	0003d090 	.word	0x0003d090
 8003aa8:	20025bb8 	.word	0x20025bb8
 8003aac:	20025c0c 	.word	0x20025c0c

08003ab0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af04      	add	r7, sp, #16
 8003ab6:	603a      	str	r2, [r7, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	71bb      	strb	r3, [r7, #6]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	b299      	uxth	r1, r3
 8003aca:	79bb      	ldrb	r3, [r7, #6]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	4b07      	ldr	r3, [pc, #28]	@ (8003aec <I2C3_MulitByteRead+0x3c>)
 8003ad0:	9302      	str	r3, [sp, #8]
 8003ad2:	88bb      	ldrh	r3, [r7, #4]
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	2301      	movs	r3, #1
 8003adc:	4804      	ldr	r0, [pc, #16]	@ (8003af0 <I2C3_MulitByteRead+0x40>)
 8003ade:	f001 f87b 	bl	8004bd8 <HAL_I2C_Mem_Read>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	0003d090 	.word	0x0003d090
 8003af0:	20025bb8 	.word	0x20025bb8

08003af4 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003afe:	204d      	movs	r0, #77	@ 0x4d
 8003b00:	f7ff fe06 	bl	8003710 <STMPE811_Read>
 8003b04:	4603      	mov	r3, r0
 8003b06:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003b08:	204e      	movs	r0, #78	@ 0x4e
 8003b0a:	f7ff fe01 	bl	8003710 <STMPE811_Read>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003b12:	7a7b      	ldrb	r3, [r7, #9]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	b21a      	sxth	r2, r3
 8003b18:	7a3b      	ldrb	r3, [r7, #8]
 8003b1a:	b21b      	sxth	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b24:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	dc06      	bgt.n	8003b3a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003b2c:	89fb      	ldrh	r3, [r7, #14]
 8003b2e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8003b32:	330c      	adds	r3, #12
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	81fb      	strh	r3, [r7, #14]
 8003b38:	e005      	b.n	8003b46 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003b3a:	89fb      	ldrh	r3, [r7, #14]
 8003b3c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003b40:	3308      	adds	r3, #8
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003b46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	@ (8003bac <TM_STMPE811_ReadX+0xb8>)
 8003b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b50:	441a      	add	r2, r3
 8003b52:	10d2      	asrs	r2, r2, #3
 8003b54:	17db      	asrs	r3, r3, #31
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b5e:	2bef      	cmp	r3, #239	@ 0xef
 8003b60:	dd02      	ble.n	8003b68 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8003b62:	23ef      	movs	r3, #239	@ 0xef
 8003b64:	81fb      	strh	r3, [r7, #14]
 8003b66:	e005      	b.n	8003b74 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003b68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da01      	bge.n	8003b74 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003b74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	dd05      	ble.n	8003b8a <TM_STMPE811_ReadX+0x96>
 8003b7e:	89fa      	ldrh	r2, [r7, #14]
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b21b      	sxth	r3, r3
 8003b88:	e004      	b.n	8003b94 <TM_STMPE811_ReadX+0xa0>
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	88fa      	ldrh	r2, [r7, #6]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	b21b      	sxth	r3, r3
 8003b94:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003b96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	dd01      	ble.n	8003ba2 <TM_STMPE811_ReadX+0xae>
        return val;
 8003b9e:	89fb      	ldrh	r3, [r7, #14]
 8003ba0:	e000      	b.n	8003ba4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	88888889 	.word	0x88888889

08003bb0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003bba:	204f      	movs	r0, #79	@ 0x4f
 8003bbc:	f7ff fda8 	bl	8003710 <STMPE811_Read>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003bc4:	2050      	movs	r0, #80	@ 0x50
 8003bc6:	f7ff fda3 	bl	8003710 <STMPE811_Read>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003bce:	7a7b      	ldrb	r3, [r7, #9]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	b21a      	sxth	r2, r3
 8003bd4:	7a3b      	ldrb	r3, [r7, #8]
 8003bd6:	b21b      	sxth	r3, r3
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003bdc:	89fb      	ldrh	r3, [r7, #14]
 8003bde:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bea:	4a19      	ldr	r2, [pc, #100]	@ (8003c50 <TM_STMPE811_ReadY+0xa0>)
 8003bec:	fb82 1203 	smull	r1, r2, r2, r3
 8003bf0:	1052      	asrs	r2, r2, #1
 8003bf2:	17db      	asrs	r3, r3, #31
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	dc02      	bgt.n	8003c06 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	81fb      	strh	r3, [r7, #14]
 8003c04:	e007      	b.n	8003c16 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c0a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003c0e:	db02      	blt.n	8003c16 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003c10:	f240 133f 	movw	r3, #319	@ 0x13f
 8003c14:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003c16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	dd05      	ble.n	8003c2c <TM_STMPE811_ReadY+0x7c>
 8003c20:	89fa      	ldrh	r2, [r7, #14]
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	e004      	b.n	8003c36 <TM_STMPE811_ReadY+0x86>
 8003c2c:	89fb      	ldrh	r3, [r7, #14]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b21b      	sxth	r3, r3
 8003c36:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003c38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	dd01      	ble.n	8003c44 <TM_STMPE811_ReadY+0x94>
        return val;
 8003c40:	89fb      	ldrh	r3, [r7, #14]
 8003c42:	e000      	b.n	8003c46 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003c44:	88fb      	ldrh	r3, [r7, #6]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	2e8ba2e9 	.word	0x2e8ba2e9

08003c54 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e00a      	b.n	8003c8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c74:	f3af 8000 	nop.w
 8003c78:	4601      	mov	r1, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	60ba      	str	r2, [r7, #8]
 8003c80:	b2ca      	uxtb	r2, r1
 8003c82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3301      	adds	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	dbf0      	blt.n	8003c74 <_read+0x12>
  }

  return len;
 8003c92:	687b      	ldr	r3, [r7, #4]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	e009      	b.n	8003cc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	60ba      	str	r2, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	dbf1      	blt.n	8003cae <_write+0x12>
  }
  return len;
 8003cca:	687b      	ldr	r3, [r7, #4]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <_close>:

int _close(int file)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cfc:	605a      	str	r2, [r3, #4]
  return 0;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_isatty>:

int _isatty(int file)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d14:	2301      	movs	r3, #1
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d44:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <_sbrk+0x5c>)
 8003d46:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <_sbrk+0x60>)
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d50:	4b13      	ldr	r3, [pc, #76]	@ (8003da0 <_sbrk+0x64>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d58:	4b11      	ldr	r3, [pc, #68]	@ (8003da0 <_sbrk+0x64>)
 8003d5a:	4a12      	ldr	r2, [pc, #72]	@ (8003da4 <_sbrk+0x68>)
 8003d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d5e:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <_sbrk+0x64>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d207      	bcs.n	8003d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d6c:	f003 ff10 	bl	8007b90 <__errno>
 8003d70:	4603      	mov	r3, r0
 8003d72:	220c      	movs	r2, #12
 8003d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	e009      	b.n	8003d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d7c:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <_sbrk+0x64>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d82:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <_sbrk+0x64>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	4a05      	ldr	r2, [pc, #20]	@ (8003da0 <_sbrk+0x64>)
 8003d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20030000 	.word	0x20030000
 8003d9c:	00000400 	.word	0x00000400
 8003da0:	20025c10 	.word	0x20025c10
 8003da4:	20025d68 	.word	0x20025d68

08003da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dac:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <SystemInit+0x20>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	4a05      	ldr	r2, [pc, #20]	@ (8003dc8 <SystemInit+0x20>)
 8003db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dd0:	f7ff ffea 	bl	8003da8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003dd4:	480c      	ldr	r0, [pc, #48]	@ (8003e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dd6:	490d      	ldr	r1, [pc, #52]	@ (8003e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ddc:	e002      	b.n	8003de4 <LoopCopyDataInit>

08003dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003de2:	3304      	adds	r3, #4

08003de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003de8:	d3f9      	bcc.n	8003dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dea:	4a0a      	ldr	r2, [pc, #40]	@ (8003e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dec:	4c0a      	ldr	r4, [pc, #40]	@ (8003e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df0:	e001      	b.n	8003df6 <LoopFillZerobss>

08003df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df4:	3204      	adds	r2, #4

08003df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003df8:	d3fb      	bcc.n	8003df2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003dfa:	f003 fecf 	bl	8007b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dfe:	f7fe fda2 	bl	8002946 <main>
  bx  lr    
 8003e02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003e04:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e0c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003e10:	0800986c 	.word	0x0800986c
  ldr r2, =_sbss
 8003e14:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003e18:	20025d64 	.word	0x20025d64

08003e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e1c:	e7fe      	b.n	8003e1c <ADC_IRQHandler>
	...

08003e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e24:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <HAL_Init+0x40>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0d      	ldr	r2, [pc, #52]	@ (8003e60 <HAL_Init+0x40>)
 8003e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_Init+0x40>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <HAL_Init+0x40>)
 8003e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e3c:	4b08      	ldr	r3, [pc, #32]	@ (8003e60 <HAL_Init+0x40>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a07      	ldr	r2, [pc, #28]	@ (8003e60 <HAL_Init+0x40>)
 8003e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e48:	2003      	movs	r0, #3
 8003e4a:	f000 f94f 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f000 f808 	bl	8003e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e54:	f7ff f924 	bl	80030a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023c00 	.word	0x40023c00

08003e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e6c:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <HAL_InitTick+0x54>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <HAL_InitTick+0x58>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f967 	bl	8004156 <HAL_SYSTICK_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e00e      	b.n	8003eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b0f      	cmp	r3, #15
 8003e96:	d80a      	bhi.n	8003eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e98:	2200      	movs	r2, #0
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	f000 f92f 	bl	8004102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ea4:	4a06      	ldr	r2, [pc, #24]	@ (8003ec0 <HAL_InitTick+0x5c>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000014 	.word	0x20000014
 8003ebc:	2000001c 	.word	0x2000001c
 8003ec0:	20000018 	.word	0x20000018

08003ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ec8:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_IncTick+0x20>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <HAL_IncTick+0x24>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <HAL_IncTick+0x24>)
 8003ed6:	6013      	str	r3, [r2, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	2000001c 	.word	0x2000001c
 8003ee8:	20025c14 	.word	0x20025c14

08003eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return uwTick;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_GetTick+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20025c14 	.word	0x20025c14

08003f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f0c:	f7ff ffee 	bl	8003eec <HAL_GetTick>
 8003f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d005      	beq.n	8003f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <HAL_Delay+0x44>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f2a:	bf00      	nop
 8003f2c:	f7ff ffde 	bl	8003eec <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d8f7      	bhi.n	8003f2c <HAL_Delay+0x28>
  {
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2000001c 	.word	0x2000001c

08003f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f7e:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	60d3      	str	r3, [r2, #12]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <__NVIC_GetPriorityGrouping+0x18>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 0307 	and.w	r3, r3, #7
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db0b      	blt.n	8003fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	4907      	ldr	r1, [pc, #28]	@ (8003fe8 <__NVIC_EnableIRQ+0x38>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000e100 	.word	0xe000e100

08003fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	db0a      	blt.n	8004016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	490c      	ldr	r1, [pc, #48]	@ (8004038 <__NVIC_SetPriority+0x4c>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	440b      	add	r3, r1
 8004010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004014:	e00a      	b.n	800402c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4908      	ldr	r1, [pc, #32]	@ (800403c <__NVIC_SetPriority+0x50>)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	3b04      	subs	r3, #4
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	440b      	add	r3, r1
 800402a:	761a      	strb	r2, [r3, #24]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000e100 	.word	0xe000e100
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	@ 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f1c3 0307 	rsb	r3, r3, #7
 800405a:	2b04      	cmp	r3, #4
 800405c:	bf28      	it	cs
 800405e:	2304      	movcs	r3, #4
 8004060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3304      	adds	r3, #4
 8004066:	2b06      	cmp	r3, #6
 8004068:	d902      	bls.n	8004070 <NVIC_EncodePriority+0x30>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3b03      	subs	r3, #3
 800406e:	e000      	b.n	8004072 <NVIC_EncodePriority+0x32>
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	401a      	ands	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004088:	f04f 31ff 	mov.w	r1, #4294967295
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	43d9      	mvns	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004098:	4313      	orrs	r3, r2
         );
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	@ 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040b8:	d301      	bcc.n	80040be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00f      	b.n	80040de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040be:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <SysTick_Config+0x40>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c6:	210f      	movs	r1, #15
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f7ff ff8e 	bl	8003fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <SysTick_Config+0x40>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d6:	4b04      	ldr	r3, [pc, #16]	@ (80040e8 <SysTick_Config+0x40>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff29 	bl	8003f4c <__NVIC_SetPriorityGrouping>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004114:	f7ff ff3e 	bl	8003f94 <__NVIC_GetPriorityGrouping>
 8004118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff ff8e 	bl	8004040 <NVIC_EncodePriority>
 8004124:	4602      	mov	r2, r0
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff5d 	bl	8003fec <__NVIC_SetPriority>
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff31 	bl	8003fb0 <__NVIC_EnableIRQ>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffa2 	bl	80040a8 <SysTick_Config>
 8004164:	4603      	mov	r3, r0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004170:	b480      	push	{r7}
 8004172:	b089      	sub	sp, #36	@ 0x24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e177      	b.n	800447c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800418c:	2201      	movs	r2, #1
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	f040 8166 	bne.w	8004476 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d005      	beq.n	80041c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d130      	bne.n	8004224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	2203      	movs	r2, #3
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f8:	2201      	movs	r2, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 0201 	and.w	r2, r3, #1
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4313      	orrs	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b03      	cmp	r3, #3
 800422e:	d017      	beq.n	8004260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	2203      	movs	r2, #3
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	43db      	mvns	r3, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4013      	ands	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d123      	bne.n	80042b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	08da      	lsrs	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3208      	adds	r2, #8
 8004274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	220f      	movs	r2, #15
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	08da      	lsrs	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3208      	adds	r2, #8
 80042ae:	69b9      	ldr	r1, [r7, #24]
 80042b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	2203      	movs	r2, #3
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0203 	and.w	r2, r3, #3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80c0 	beq.w	8004476 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	4b66      	ldr	r3, [pc, #408]	@ (8004494 <HAL_GPIO_Init+0x324>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	4a65      	ldr	r2, [pc, #404]	@ (8004494 <HAL_GPIO_Init+0x324>)
 8004300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004304:	6453      	str	r3, [r2, #68]	@ 0x44
 8004306:	4b63      	ldr	r3, [pc, #396]	@ (8004494 <HAL_GPIO_Init+0x324>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004312:	4a61      	ldr	r2, [pc, #388]	@ (8004498 <HAL_GPIO_Init+0x328>)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	089b      	lsrs	r3, r3, #2
 8004318:	3302      	adds	r3, #2
 800431a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	220f      	movs	r2, #15
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a58      	ldr	r2, [pc, #352]	@ (800449c <HAL_GPIO_Init+0x32c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d037      	beq.n	80043ae <HAL_GPIO_Init+0x23e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a57      	ldr	r2, [pc, #348]	@ (80044a0 <HAL_GPIO_Init+0x330>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d031      	beq.n	80043aa <HAL_GPIO_Init+0x23a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a56      	ldr	r2, [pc, #344]	@ (80044a4 <HAL_GPIO_Init+0x334>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d02b      	beq.n	80043a6 <HAL_GPIO_Init+0x236>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a55      	ldr	r2, [pc, #340]	@ (80044a8 <HAL_GPIO_Init+0x338>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d025      	beq.n	80043a2 <HAL_GPIO_Init+0x232>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a54      	ldr	r2, [pc, #336]	@ (80044ac <HAL_GPIO_Init+0x33c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01f      	beq.n	800439e <HAL_GPIO_Init+0x22e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a53      	ldr	r2, [pc, #332]	@ (80044b0 <HAL_GPIO_Init+0x340>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d019      	beq.n	800439a <HAL_GPIO_Init+0x22a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a52      	ldr	r2, [pc, #328]	@ (80044b4 <HAL_GPIO_Init+0x344>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_GPIO_Init+0x226>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a51      	ldr	r2, [pc, #324]	@ (80044b8 <HAL_GPIO_Init+0x348>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00d      	beq.n	8004392 <HAL_GPIO_Init+0x222>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a50      	ldr	r2, [pc, #320]	@ (80044bc <HAL_GPIO_Init+0x34c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d007      	beq.n	800438e <HAL_GPIO_Init+0x21e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a4f      	ldr	r2, [pc, #316]	@ (80044c0 <HAL_GPIO_Init+0x350>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d101      	bne.n	800438a <HAL_GPIO_Init+0x21a>
 8004386:	2309      	movs	r3, #9
 8004388:	e012      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 800438a:	230a      	movs	r3, #10
 800438c:	e010      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 800438e:	2308      	movs	r3, #8
 8004390:	e00e      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 8004392:	2307      	movs	r3, #7
 8004394:	e00c      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 8004396:	2306      	movs	r3, #6
 8004398:	e00a      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 800439a:	2305      	movs	r3, #5
 800439c:	e008      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 800439e:	2304      	movs	r3, #4
 80043a0:	e006      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 80043a2:	2303      	movs	r3, #3
 80043a4:	e004      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e002      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_GPIO_Init+0x240>
 80043ae:	2300      	movs	r3, #0
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	f002 0203 	and.w	r2, r2, #3
 80043b6:	0092      	lsls	r2, r2, #2
 80043b8:	4093      	lsls	r3, r2
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043c0:	4935      	ldr	r1, [pc, #212]	@ (8004498 <HAL_GPIO_Init+0x328>)
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	089b      	lsrs	r3, r3, #2
 80043c6:	3302      	adds	r3, #2
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ce:	4b3d      	ldr	r3, [pc, #244]	@ (80044c4 <HAL_GPIO_Init+0x354>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043f2:	4a34      	ldr	r2, [pc, #208]	@ (80044c4 <HAL_GPIO_Init+0x354>)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f8:	4b32      	ldr	r3, [pc, #200]	@ (80044c4 <HAL_GPIO_Init+0x354>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800441c:	4a29      	ldr	r2, [pc, #164]	@ (80044c4 <HAL_GPIO_Init+0x354>)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004422:	4b28      	ldr	r3, [pc, #160]	@ (80044c4 <HAL_GPIO_Init+0x354>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004446:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <HAL_GPIO_Init+0x354>)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800444c:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <HAL_GPIO_Init+0x354>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004470:	4a14      	ldr	r2, [pc, #80]	@ (80044c4 <HAL_GPIO_Init+0x354>)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3301      	adds	r3, #1
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b0f      	cmp	r3, #15
 8004480:	f67f ae84 	bls.w	800418c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3724      	adds	r7, #36	@ 0x24
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	40013800 	.word	0x40013800
 800449c:	40020000 	.word	0x40020000
 80044a0:	40020400 	.word	0x40020400
 80044a4:	40020800 	.word	0x40020800
 80044a8:	40020c00 	.word	0x40020c00
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40021400 	.word	0x40021400
 80044b4:	40021800 	.word	0x40021800
 80044b8:	40021c00 	.word	0x40021c00
 80044bc:	40022000 	.word	0x40022000
 80044c0:	40022400 	.word	0x40022400
 80044c4:	40013c00 	.word	0x40013c00

080044c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e0d9      	b.n	8004698 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	f040 80c9 	bne.w	8004692 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004500:	4a6b      	ldr	r2, [pc, #428]	@ (80046b0 <HAL_GPIO_DeInit+0x1e8>)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	3302      	adds	r3, #2
 8004508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	220f      	movs	r2, #15
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a63      	ldr	r2, [pc, #396]	@ (80046b4 <HAL_GPIO_DeInit+0x1ec>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d037      	beq.n	800459a <HAL_GPIO_DeInit+0xd2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a62      	ldr	r2, [pc, #392]	@ (80046b8 <HAL_GPIO_DeInit+0x1f0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d031      	beq.n	8004596 <HAL_GPIO_DeInit+0xce>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a61      	ldr	r2, [pc, #388]	@ (80046bc <HAL_GPIO_DeInit+0x1f4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02b      	beq.n	8004592 <HAL_GPIO_DeInit+0xca>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a60      	ldr	r2, [pc, #384]	@ (80046c0 <HAL_GPIO_DeInit+0x1f8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d025      	beq.n	800458e <HAL_GPIO_DeInit+0xc6>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a5f      	ldr	r2, [pc, #380]	@ (80046c4 <HAL_GPIO_DeInit+0x1fc>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01f      	beq.n	800458a <HAL_GPIO_DeInit+0xc2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a5e      	ldr	r2, [pc, #376]	@ (80046c8 <HAL_GPIO_DeInit+0x200>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d019      	beq.n	8004586 <HAL_GPIO_DeInit+0xbe>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a5d      	ldr	r2, [pc, #372]	@ (80046cc <HAL_GPIO_DeInit+0x204>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_GPIO_DeInit+0xba>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a5c      	ldr	r2, [pc, #368]	@ (80046d0 <HAL_GPIO_DeInit+0x208>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00d      	beq.n	800457e <HAL_GPIO_DeInit+0xb6>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a5b      	ldr	r2, [pc, #364]	@ (80046d4 <HAL_GPIO_DeInit+0x20c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <HAL_GPIO_DeInit+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a5a      	ldr	r2, [pc, #360]	@ (80046d8 <HAL_GPIO_DeInit+0x210>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <HAL_GPIO_DeInit+0xae>
 8004572:	2309      	movs	r3, #9
 8004574:	e012      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 8004576:	230a      	movs	r3, #10
 8004578:	e010      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 800457a:	2308      	movs	r3, #8
 800457c:	e00e      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 800457e:	2307      	movs	r3, #7
 8004580:	e00c      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 8004582:	2306      	movs	r3, #6
 8004584:	e00a      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 8004586:	2305      	movs	r3, #5
 8004588:	e008      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 800458a:	2304      	movs	r3, #4
 800458c:	e006      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 800458e:	2303      	movs	r3, #3
 8004590:	e004      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 8004592:	2302      	movs	r3, #2
 8004594:	e002      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_GPIO_DeInit+0xd4>
 800459a:	2300      	movs	r3, #0
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	f002 0203 	and.w	r2, r2, #3
 80045a2:	0092      	lsls	r2, r2, #2
 80045a4:	4093      	lsls	r3, r2
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d132      	bne.n	8004612 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80045ac:	4b4b      	ldr	r3, [pc, #300]	@ (80046dc <HAL_GPIO_DeInit+0x214>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	4949      	ldr	r1, [pc, #292]	@ (80046dc <HAL_GPIO_DeInit+0x214>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80045ba:	4b48      	ldr	r3, [pc, #288]	@ (80046dc <HAL_GPIO_DeInit+0x214>)
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	4946      	ldr	r1, [pc, #280]	@ (80046dc <HAL_GPIO_DeInit+0x214>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80045c8:	4b44      	ldr	r3, [pc, #272]	@ (80046dc <HAL_GPIO_DeInit+0x214>)
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	4942      	ldr	r1, [pc, #264]	@ (80046dc <HAL_GPIO_DeInit+0x214>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80045d6:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <HAL_GPIO_DeInit+0x214>)
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	43db      	mvns	r3, r3
 80045de:	493f      	ldr	r1, [pc, #252]	@ (80046dc <HAL_GPIO_DeInit+0x214>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	220f      	movs	r2, #15
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80045f4:	4a2e      	ldr	r2, [pc, #184]	@ (80046b0 <HAL_GPIO_DeInit+0x1e8>)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	3302      	adds	r3, #2
 80045fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	43da      	mvns	r2, r3
 8004604:	482a      	ldr	r0, [pc, #168]	@ (80046b0 <HAL_GPIO_DeInit+0x1e8>)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	089b      	lsrs	r3, r3, #2
 800460a:	400a      	ands	r2, r1
 800460c:	3302      	adds	r3, #2
 800460e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	2103      	movs	r1, #3
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	08da      	lsrs	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3208      	adds	r2, #8
 8004630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	220f      	movs	r2, #15
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	08d2      	lsrs	r2, r2, #3
 8004648:	4019      	ands	r1, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3208      	adds	r2, #8
 800464e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	2103      	movs	r1, #3
 800465c:	fa01 f303 	lsl.w	r3, r1, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	2101      	movs	r1, #1
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	401a      	ands	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	2103      	movs	r1, #3
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	401a      	ands	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	3301      	adds	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	f67f af22 	bls.w	80044e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40020000 	.word	0x40020000
 80046b8:	40020400 	.word	0x40020400
 80046bc:	40020800 	.word	0x40020800
 80046c0:	40020c00 	.word	0x40020c00
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40021400 	.word	0x40021400
 80046cc:	40021800 	.word	0x40021800
 80046d0:	40021c00 	.word	0x40021c00
 80046d4:	40022000 	.word	0x40022000
 80046d8:	40022400 	.word	0x40022400
 80046dc:	40013c00 	.word	0x40013c00

080046e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
 80046ec:	4613      	mov	r3, r2
 80046ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046f0:	787b      	ldrb	r3, [r7, #1]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046fc:	e003      	b.n	8004706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046fe:	887b      	ldrh	r3, [r7, #2]
 8004700:	041a      	lsls	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	619a      	str	r2, [r3, #24]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800471e:	4b08      	ldr	r3, [pc, #32]	@ (8004740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	4013      	ands	r3, r2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800472a:	4a05      	ldr	r2, [pc, #20]	@ (8004740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f806 	bl	8004744 <HAL_GPIO_EXTI_Callback>
  }
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40013c00 	.word	0x40013c00

08004744 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e12b      	b.n	80049c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fe fcb4 	bl	80030f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2224      	movs	r2, #36	@ 0x24
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047c0:	f001 ff82 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 80047c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4a81      	ldr	r2, [pc, #516]	@ (80049d0 <HAL_I2C_Init+0x274>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d807      	bhi.n	80047e0 <HAL_I2C_Init+0x84>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a80      	ldr	r2, [pc, #512]	@ (80049d4 <HAL_I2C_Init+0x278>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bf94      	ite	ls
 80047d8:	2301      	movls	r3, #1
 80047da:	2300      	movhi	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e006      	b.n	80047ee <HAL_I2C_Init+0x92>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a7d      	ldr	r2, [pc, #500]	@ (80049d8 <HAL_I2C_Init+0x27c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	bf94      	ite	ls
 80047e8:	2301      	movls	r3, #1
 80047ea:	2300      	movhi	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e0e7      	b.n	80049c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a78      	ldr	r2, [pc, #480]	@ (80049dc <HAL_I2C_Init+0x280>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0c9b      	lsrs	r3, r3, #18
 8004800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a6a      	ldr	r2, [pc, #424]	@ (80049d0 <HAL_I2C_Init+0x274>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d802      	bhi.n	8004830 <HAL_I2C_Init+0xd4>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	3301      	adds	r3, #1
 800482e:	e009      	b.n	8004844 <HAL_I2C_Init+0xe8>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	4a69      	ldr	r2, [pc, #420]	@ (80049e0 <HAL_I2C_Init+0x284>)
 800483c:	fba2 2303 	umull	r2, r3, r2, r3
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	3301      	adds	r3, #1
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	430b      	orrs	r3, r1
 800484a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004856:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	495c      	ldr	r1, [pc, #368]	@ (80049d0 <HAL_I2C_Init+0x274>)
 8004860:	428b      	cmp	r3, r1
 8004862:	d819      	bhi.n	8004898 <HAL_I2C_Init+0x13c>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e59      	subs	r1, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004872:	1c59      	adds	r1, r3, #1
 8004874:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004878:	400b      	ands	r3, r1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_I2C_Init+0x138>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1e59      	subs	r1, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fbb1 f3f3 	udiv	r3, r1, r3
 800488c:	3301      	adds	r3, #1
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	e051      	b.n	8004938 <HAL_I2C_Init+0x1dc>
 8004894:	2304      	movs	r3, #4
 8004896:	e04f      	b.n	8004938 <HAL_I2C_Init+0x1dc>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d111      	bne.n	80048c4 <HAL_I2C_Init+0x168>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1e58      	subs	r0, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	440b      	add	r3, r1
 80048ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e012      	b.n	80048ea <HAL_I2C_Init+0x18e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1e58      	subs	r0, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	0099      	lsls	r1, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048da:	3301      	adds	r3, #1
 80048dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_I2C_Init+0x196>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e022      	b.n	8004938 <HAL_I2C_Init+0x1dc>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10e      	bne.n	8004918 <HAL_I2C_Init+0x1bc>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1e58      	subs	r0, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	440b      	add	r3, r1
 8004908:	fbb0 f3f3 	udiv	r3, r0, r3
 800490c:	3301      	adds	r3, #1
 800490e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004916:	e00f      	b.n	8004938 <HAL_I2C_Init+0x1dc>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e58      	subs	r0, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	0099      	lsls	r1, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	fbb0 f3f3 	udiv	r3, r0, r3
 800492e:	3301      	adds	r3, #1
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	6809      	ldr	r1, [r1, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004966:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6911      	ldr	r1, [r2, #16]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68d2      	ldr	r2, [r2, #12]
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	430b      	orrs	r3, r1
 800497a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	000186a0 	.word	0x000186a0
 80049d4:	001e847f 	.word	0x001e847f
 80049d8:	003d08ff 	.word	0x003d08ff
 80049dc:	431bde83 	.word	0x431bde83
 80049e0:	10624dd3 	.word	0x10624dd3

080049e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	460b      	mov	r3, r1
 80049f8:	813b      	strh	r3, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049fe:	f7ff fa75 	bl	8003eec <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	f040 80d9 	bne.w	8004bc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2319      	movs	r3, #25
 8004a18:	2201      	movs	r2, #1
 8004a1a:	496d      	ldr	r1, [pc, #436]	@ (8004bd0 <HAL_I2C_Mem_Write+0x1ec>)
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fc8b 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e0cc      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Mem_Write+0x56>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e0c5      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d007      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2221      	movs	r2, #33	@ 0x21
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2240      	movs	r2, #64	@ 0x40
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a3a      	ldr	r2, [r7, #32]
 8004a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a4d      	ldr	r2, [pc, #308]	@ (8004bd4 <HAL_I2C_Mem_Write+0x1f0>)
 8004aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aa2:	88f8      	ldrh	r0, [r7, #6]
 8004aa4:	893a      	ldrh	r2, [r7, #8]
 8004aa6:	8979      	ldrh	r1, [r7, #10]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fac2 	bl	800503c <I2C_RequestMemoryWrite>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d052      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e081      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fd50 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d107      	bne.n	8004aea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e06b      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d11b      	bne.n	8004b64 <HAL_I2C_Mem_Write+0x180>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d017      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	781a      	ldrb	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1aa      	bne.n	8004ac2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fd43 	bl	80055fc <I2C_WaitOnBTFFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d107      	bne.n	8004b94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e016      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e000      	b.n	8004bc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004bc4:	2302      	movs	r3, #2
  }
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	00100002 	.word	0x00100002
 8004bd4:	ffff0000 	.word	0xffff0000

08004bd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	@ 0x30
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	4608      	mov	r0, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	461a      	mov	r2, r3
 8004be6:	4603      	mov	r3, r0
 8004be8:	817b      	strh	r3, [r7, #10]
 8004bea:	460b      	mov	r3, r1
 8004bec:	813b      	strh	r3, [r7, #8]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bf2:	f7ff f97b 	bl	8003eec <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	f040 8214 	bne.w	800502e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	2319      	movs	r3, #25
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	497b      	ldr	r1, [pc, #492]	@ (8004dfc <HAL_I2C_Mem_Read+0x224>)
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fb91 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e207      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_I2C_Mem_Read+0x56>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e200      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d007      	beq.n	8004c54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2222      	movs	r2, #34	@ 0x22
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2240      	movs	r2, #64	@ 0x40
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a5b      	ldr	r2, [pc, #364]	@ (8004e00 <HAL_I2C_Mem_Read+0x228>)
 8004c94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c96:	88f8      	ldrh	r0, [r7, #6]
 8004c98:	893a      	ldrh	r2, [r7, #8]
 8004c9a:	8979      	ldrh	r1, [r7, #10]
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fa5e 	bl	8005168 <I2C_RequestMemoryRead>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e1bc      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d113      	bne.n	8004ce6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	e190      	b.n	8005008 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d11b      	bne.n	8004d26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e170      	b.n	8005008 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d11b      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	e150      	b.n	8005008 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d7c:	e144      	b.n	8005008 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	f200 80f1 	bhi.w	8004f6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d123      	bne.n	8004dd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fc79 	bl	800568c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e145      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dd6:	e117      	b.n	8005008 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d14e      	bne.n	8004e7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de6:	2200      	movs	r2, #0
 8004de8:	4906      	ldr	r1, [pc, #24]	@ (8004e04 <HAL_I2C_Mem_Read+0x22c>)
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 faa4 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e11a      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
 8004dfa:	bf00      	nop
 8004dfc:	00100002 	.word	0x00100002
 8004e00:	ffff0000 	.word	0xffff0000
 8004e04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e7c:	e0c4      	b.n	8005008 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e84:	2200      	movs	r2, #0
 8004e86:	496c      	ldr	r1, [pc, #432]	@ (8005038 <HAL_I2C_Mem_Read+0x460>)
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 fa55 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0cb      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4955      	ldr	r1, [pc, #340]	@ (8005038 <HAL_I2C_Mem_Read+0x460>)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fa27 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e09d      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f68:	e04e      	b.n	8005008 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fb8c 	bl	800568c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e058      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d124      	bne.n	8005008 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d107      	bne.n	8004fd6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	f47f aeb6 	bne.w	8004d7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
  }
}
 8005030:	4618      	mov	r0, r3
 8005032:	3728      	adds	r7, #40	@ 0x28
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	00010004 	.word	0x00010004

0800503c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	461a      	mov	r2, r3
 800504a:	4603      	mov	r3, r0
 800504c:	817b      	strh	r3, [r7, #10]
 800504e:	460b      	mov	r3, r1
 8005050:	813b      	strh	r3, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005064:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2200      	movs	r2, #0
 800506e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f960 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00d      	beq.n	800509a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800508c:	d103      	bne.n	8005096 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005094:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e05f      	b.n	800515a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	6a3a      	ldr	r2, [r7, #32]
 80050ae:	492d      	ldr	r1, [pc, #180]	@ (8005164 <I2C_RequestMemoryWrite+0x128>)
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f9bb 	bl	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e04c      	b.n	800515a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d8:	6a39      	ldr	r1, [r7, #32]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fa46 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d107      	bne.n	80050fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e02b      	b.n	800515a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005108:	893b      	ldrh	r3, [r7, #8]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	611a      	str	r2, [r3, #16]
 8005112:	e021      	b.n	8005158 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005114:	893b      	ldrh	r3, [r7, #8]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	b29b      	uxth	r3, r3
 800511a:	b2da      	uxtb	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005124:	6a39      	ldr	r1, [r7, #32]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fa20 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00d      	beq.n	800514e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	2b04      	cmp	r3, #4
 8005138:	d107      	bne.n	800514a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005148:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e005      	b.n	800515a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800514e:	893b      	ldrh	r3, [r7, #8]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	00010002 	.word	0x00010002

08005168 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	4603      	mov	r3, r0
 8005178:	817b      	strh	r3, [r7, #10]
 800517a:	460b      	mov	r3, r1
 800517c:	813b      	strh	r3, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005190:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f8c2 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00d      	beq.n	80051d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051c8:	d103      	bne.n	80051d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e0aa      	b.n	800532c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051d6:	897b      	ldrh	r3, [r7, #10]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	6a3a      	ldr	r2, [r7, #32]
 80051ea:	4952      	ldr	r1, [pc, #328]	@ (8005334 <I2C_RequestMemoryRead+0x1cc>)
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f91d 	bl	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e097      	b.n	800532c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005214:	6a39      	ldr	r1, [r7, #32]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f9a8 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00d      	beq.n	800523e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	2b04      	cmp	r3, #4
 8005228:	d107      	bne.n	800523a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e076      	b.n	800532c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d105      	bne.n	8005250 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005244:	893b      	ldrh	r3, [r7, #8]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	611a      	str	r2, [r3, #16]
 800524e:	e021      	b.n	8005294 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005250:	893b      	ldrh	r3, [r7, #8]
 8005252:	0a1b      	lsrs	r3, r3, #8
 8005254:	b29b      	uxth	r3, r3
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800525e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005260:	6a39      	ldr	r1, [r7, #32]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f982 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	2b04      	cmp	r3, #4
 8005274:	d107      	bne.n	8005286 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e050      	b.n	800532c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800528a:	893b      	ldrh	r3, [r7, #8]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005296:	6a39      	ldr	r1, [r7, #32]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f967 	bl	800556c <I2C_WaitOnTXEFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00d      	beq.n	80052c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d107      	bne.n	80052bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e035      	b.n	800532c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f82b 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00d      	beq.n	8005304 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f6:	d103      	bne.n	8005300 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e013      	b.n	800532c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005304:	897b      	ldrh	r3, [r7, #10]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	4906      	ldr	r1, [pc, #24]	@ (8005334 <I2C_RequestMemoryRead+0x1cc>)
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f886 	bl	800542c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	00010002 	.word	0x00010002

08005338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005348:	e048      	b.n	80053dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d044      	beq.n	80053dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fe fdcb 	bl	8003eec <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d139      	bne.n	80053dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	0c1b      	lsrs	r3, r3, #16
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	d10d      	bne.n	800538e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	43da      	mvns	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4013      	ands	r3, r2
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	bf0c      	ite	eq
 8005384:	2301      	moveq	r3, #1
 8005386:	2300      	movne	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	e00c      	b.n	80053a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	43da      	mvns	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4013      	ands	r3, r2
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d116      	bne.n	80053dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	f043 0220 	orr.w	r2, r3, #32
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e023      	b.n	8005424 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10d      	bne.n	8005402 <I2C_WaitOnFlagUntilTimeout+0xca>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	43da      	mvns	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	e00c      	b.n	800541c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	43da      	mvns	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	4013      	ands	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	429a      	cmp	r2, r3
 8005420:	d093      	beq.n	800534a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800543a:	e071      	b.n	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544a:	d123      	bne.n	8005494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800545a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005464:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	f043 0204 	orr.w	r2, r3, #4
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e067      	b.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d041      	beq.n	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549c:	f7fe fd26 	bl	8003eec <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d302      	bcc.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d136      	bne.n	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d10c      	bne.n	80054d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	43da      	mvns	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf14      	ite	ne
 80054ce:	2301      	movne	r3, #1
 80054d0:	2300      	moveq	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e00b      	b.n	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	43da      	mvns	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d016      	beq.n	8005520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e021      	b.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	0c1b      	lsrs	r3, r3, #16
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d10c      	bne.n	8005544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	43da      	mvns	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4013      	ands	r3, r2
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	e00b      	b.n	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	43da      	mvns	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	f47f af6d 	bne.w	800543c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005578:	e034      	b.n	80055e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f8e3 	bl	8005746 <I2C_IsAcknowledgeFailed>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e034      	b.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d028      	beq.n	80055e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fe fcab 	bl	8003eec <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d11d      	bne.n	80055e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b2:	2b80      	cmp	r3, #128	@ 0x80
 80055b4:	d016      	beq.n	80055e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e007      	b.n	80055f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ee:	2b80      	cmp	r3, #128	@ 0x80
 80055f0:	d1c3      	bne.n	800557a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005608:	e034      	b.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f89b 	bl	8005746 <I2C_IsAcknowledgeFailed>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e034      	b.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d028      	beq.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005622:	f7fe fc63 	bl	8003eec <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	d302      	bcc.n	8005638 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d11d      	bne.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b04      	cmp	r3, #4
 8005644:	d016      	beq.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e007      	b.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b04      	cmp	r3, #4
 8005680:	d1c3      	bne.n	800560a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005698:	e049      	b.n	800572e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d119      	bne.n	80056dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0210 	mvn.w	r2, #16
 80056b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e030      	b.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056dc:	f7fe fc06 	bl	8003eec <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d302      	bcc.n	80056f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d11d      	bne.n	800572e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b40      	cmp	r3, #64	@ 0x40
 80056fe:	d016      	beq.n	800572e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e007      	b.n	800573e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b40      	cmp	r3, #64	@ 0x40
 800573a:	d1ae      	bne.n	800569a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575c:	d11b      	bne.n	8005796 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005766:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	f043 0204 	orr.w	r2, r3, #4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d129      	bne.n	800580e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2224      	movs	r2, #36	@ 0x24
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0210 	bic.w	r2, r2, #16
 80057e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e000      	b.n	8005810 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b20      	cmp	r3, #32
 8005834:	d12a      	bne.n	800588c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2224      	movs	r2, #36	@ 0x24
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005856:	89fb      	ldrh	r3, [r7, #14]
 8005858:	f023 030f 	bic.w	r3, r3, #15
 800585c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	b29a      	uxth	r2, r3
 8005862:	89fb      	ldrh	r3, [r7, #14]
 8005864:	4313      	orrs	r3, r2
 8005866:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	89fa      	ldrh	r2, [r7, #14]
 800586e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e000      	b.n	800588e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800588c:	2302      	movs	r3, #2
  }
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e0bf      	b.n	8005a2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fd fc7e 	bl	80031c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80058de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6999      	ldr	r1, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6899      	ldr	r1, [r3, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b4a      	ldr	r3, [pc, #296]	@ (8005a38 <HAL_LTDC_Init+0x19c>)
 8005910:	400b      	ands	r3, r1
 8005912:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68d9      	ldr	r1, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a38 <HAL_LTDC_Init+0x19c>)
 800593e:	400b      	ands	r3, r1
 8005940:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	041b      	lsls	r3, r3, #16
 8005948:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68d9      	ldr	r1, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6919      	ldr	r1, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b33      	ldr	r3, [pc, #204]	@ (8005a38 <HAL_LTDC_Init+0x19c>)
 800596c:	400b      	ands	r3, r1
 800596e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	041b      	lsls	r3, r3, #16
 8005976:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6919      	ldr	r1, [r3, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6959      	ldr	r1, [r3, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <HAL_LTDC_Init+0x19c>)
 800599a:	400b      	ands	r3, r1
 800599c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6959      	ldr	r1, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80059de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0206 	orr.w	r2, r2, #6
 8005a0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	f000f800 	.word	0xf000f800

08005a3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a3c:	b5b0      	push	{r4, r5, r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_LTDC_ConfigLayer+0x1a>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e02c      	b.n	8005ab0 <HAL_LTDC_ConfigLayer+0x74>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2134      	movs	r1, #52	@ 0x34
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	4413      	add	r3, r2
 8005a72:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4614      	mov	r4, r2
 8005a7a:	461d      	mov	r5, r3
 8005a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f811 	bl	8005ab8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bdb0      	pop	{r4, r5, r7, pc}

08005ab8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b089      	sub	sp, #36	@ 0x24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	0c1b      	lsrs	r3, r3, #16
 8005ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad4:	4413      	add	r3, r2
 8005ad6:	041b      	lsls	r3, r3, #16
 8005ad8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	01db      	lsls	r3, r3, #7
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3384      	adds	r3, #132	@ 0x84
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	4611      	mov	r1, r2
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	01d2      	lsls	r2, r2, #7
 8005af4:	440a      	add	r2, r1
 8005af6:	3284      	adds	r2, #132	@ 0x84
 8005af8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005afc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b0e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b10:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4619      	mov	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	01db      	lsls	r3, r3, #7
 8005b1c:	440b      	add	r3, r1
 8005b1e:	3384      	adds	r3, #132	@ 0x84
 8005b20:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005b26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b36:	4413      	add	r3, r2
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	01db      	lsls	r3, r3, #7
 8005b46:	4413      	add	r3, r2
 8005b48:	3384      	adds	r3, #132	@ 0x84
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	4611      	mov	r1, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	01d2      	lsls	r2, r2, #7
 8005b56:	440a      	add	r2, r1
 8005b58:	3284      	adds	r2, #132	@ 0x84
 8005b5a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005b5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b6e:	4413      	add	r3, r2
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4619      	mov	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	01db      	lsls	r3, r3, #7
 8005b7c:	440b      	add	r3, r1
 8005b7e:	3384      	adds	r3, #132	@ 0x84
 8005b80:	4619      	mov	r1, r3
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	01db      	lsls	r3, r3, #7
 8005b92:	4413      	add	r3, r2
 8005b94:	3384      	adds	r3, #132	@ 0x84
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	01d2      	lsls	r2, r2, #7
 8005ba2:	440a      	add	r2, r1
 8005ba4:	3284      	adds	r2, #132	@ 0x84
 8005ba6:	f023 0307 	bic.w	r3, r3, #7
 8005baa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	01db      	lsls	r3, r3, #7
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3384      	adds	r3, #132	@ 0x84
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	061b      	lsls	r3, r3, #24
 8005bdc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	01db      	lsls	r3, r3, #7
 8005be8:	4413      	add	r3, r2
 8005bea:	3384      	adds	r3, #132	@ 0x84
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	01db      	lsls	r3, r3, #7
 8005bf8:	4413      	add	r3, r2
 8005bfa:	3384      	adds	r3, #132	@ 0x84
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c08:	461a      	mov	r2, r3
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	01db      	lsls	r3, r3, #7
 8005c1c:	440b      	add	r3, r1
 8005c1e:	3384      	adds	r3, #132	@ 0x84
 8005c20:	4619      	mov	r1, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	01db      	lsls	r3, r3, #7
 8005c32:	4413      	add	r3, r2
 8005c34:	3384      	adds	r3, #132	@ 0x84
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	01d2      	lsls	r2, r2, #7
 8005c42:	440a      	add	r2, r1
 8005c44:	3284      	adds	r2, #132	@ 0x84
 8005c46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	01db      	lsls	r3, r3, #7
 8005c56:	4413      	add	r3, r2
 8005c58:	3384      	adds	r3, #132	@ 0x84
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	01db      	lsls	r3, r3, #7
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3384      	adds	r3, #132	@ 0x84
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	4611      	mov	r1, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	01d2      	lsls	r2, r2, #7
 8005c7c:	440a      	add	r2, r1
 8005c7e:	3284      	adds	r2, #132	@ 0x84
 8005c80:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c84:	f023 0307 	bic.w	r3, r3, #7
 8005c88:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	6809      	ldr	r1, [r1, #0]
 8005c96:	4608      	mov	r0, r1
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	01c9      	lsls	r1, r1, #7
 8005c9c:	4401      	add	r1, r0
 8005c9e:	3184      	adds	r1, #132	@ 0x84
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	01db      	lsls	r3, r3, #7
 8005cae:	4413      	add	r3, r2
 8005cb0:	3384      	adds	r3, #132	@ 0x84
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	01db      	lsls	r3, r3, #7
 8005cbe:	4413      	add	r3, r2
 8005cc0:	3384      	adds	r3, #132	@ 0x84
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	01db      	lsls	r3, r3, #7
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3384      	adds	r3, #132	@ 0x84
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005ce6:	2304      	movs	r3, #4
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	e01b      	b.n	8005d24 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d102      	bne.n	8005cfa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e014      	b.n	8005d24 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d00b      	beq.n	8005d1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d007      	beq.n	8005d1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d003      	beq.n	8005d1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d16:	2b07      	cmp	r3, #7
 8005d18:	d102      	bne.n	8005d20 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	e001      	b.n	8005d24 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005d20:	2301      	movs	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	01db      	lsls	r3, r3, #7
 8005d2e:	4413      	add	r3, r2
 8005d30:	3384      	adds	r3, #132	@ 0x84
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	4611      	mov	r1, r2
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	01d2      	lsls	r2, r2, #7
 8005d3e:	440a      	add	r2, r1
 8005d40:	3284      	adds	r2, #132	@ 0x84
 8005d42:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005d46:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	1acb      	subs	r3, r1, r3
 8005d5e:	69f9      	ldr	r1, [r7, #28]
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	6809      	ldr	r1, [r1, #0]
 8005d6a:	4608      	mov	r0, r1
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	01c9      	lsls	r1, r1, #7
 8005d70:	4401      	add	r1, r0
 8005d72:	3184      	adds	r1, #132	@ 0x84
 8005d74:	4313      	orrs	r3, r2
 8005d76:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	01db      	lsls	r3, r3, #7
 8005d82:	4413      	add	r3, r2
 8005d84:	3384      	adds	r3, #132	@ 0x84
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	01d2      	lsls	r2, r2, #7
 8005d92:	440a      	add	r2, r1
 8005d94:	3284      	adds	r2, #132	@ 0x84
 8005d96:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d9a:	f023 0307 	bic.w	r3, r3, #7
 8005d9e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	01db      	lsls	r3, r3, #7
 8005daa:	4413      	add	r3, r2
 8005dac:	3384      	adds	r3, #132	@ 0x84
 8005dae:	461a      	mov	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	01db      	lsls	r3, r3, #7
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3384      	adds	r3, #132	@ 0x84
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	01d2      	lsls	r2, r2, #7
 8005dd0:	440a      	add	r2, r1
 8005dd2:	3284      	adds	r2, #132	@ 0x84
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	6013      	str	r3, [r2, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3724      	adds	r7, #36	@ 0x24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
	...

08005de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e267      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d075      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e06:	4b88      	ldr	r3, [pc, #544]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00c      	beq.n	8005e2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e12:	4b85      	ldr	r3, [pc, #532]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d112      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1e:	4b82      	ldr	r3, [pc, #520]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e2a:	d10b      	bne.n	8005e44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05b      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x108>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d157      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e242      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e4c:	d106      	bne.n	8005e5c <HAL_RCC_OscConfig+0x74>
 8005e4e:	4b76      	ldr	r3, [pc, #472]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a75      	ldr	r2, [pc, #468]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e01d      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x98>
 8005e66:	4b70      	ldr	r3, [pc, #448]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6f      	ldr	r2, [pc, #444]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	4b6d      	ldr	r3, [pc, #436]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6c      	ldr	r2, [pc, #432]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0xb0>
 8005e80:	4b69      	ldr	r3, [pc, #420]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a68      	ldr	r2, [pc, #416]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	4b66      	ldr	r3, [pc, #408]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a65      	ldr	r2, [pc, #404]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fe f824 	bl	8003eec <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea8:	f7fe f820 	bl	8003eec <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	@ 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e207      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eba:	4b5b      	ldr	r3, [pc, #364]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0xc0>
 8005ec6:	e014      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fe f810 	bl	8003eec <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fe f80c 	bl	8003eec <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	@ 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1f3      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ee2:	4b51      	ldr	r3, [pc, #324]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0xe8>
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005efe:	4b4a      	ldr	r3, [pc, #296]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0a:	4b47      	ldr	r3, [pc, #284]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d11c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f16:	4b44      	ldr	r3, [pc, #272]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f22:	4b41      	ldr	r3, [pc, #260]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e1c7      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4937      	ldr	r1, [pc, #220]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f4e:	e03a      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d020      	beq.n	8005f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f58:	4b34      	ldr	r3, [pc, #208]	@ (800602c <HAL_RCC_OscConfig+0x244>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5e:	f7fd ffc5 	bl	8003eec <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f66:	f7fd ffc1 	bl	8003eec <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e1a8      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f78:	4b2b      	ldr	r3, [pc, #172]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f84:	4b28      	ldr	r3, [pc, #160]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4925      	ldr	r1, [pc, #148]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
 8005f98:	e015      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9a:	4b24      	ldr	r3, [pc, #144]	@ (800602c <HAL_RCC_OscConfig+0x244>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fd ffa4 	bl	8003eec <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa8:	f7fd ffa0 	bl	8003eec <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e187      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fba:	4b1b      	ldr	r3, [pc, #108]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d036      	beq.n	8006040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d016      	beq.n	8006008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fda:	4b15      	ldr	r3, [pc, #84]	@ (8006030 <HAL_RCC_OscConfig+0x248>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe0:	f7fd ff84 	bl	8003eec <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fd ff80 	bl	8003eec <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e167      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8006028 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x200>
 8006006:	e01b      	b.n	8006040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006008:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <HAL_RCC_OscConfig+0x248>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600e:	f7fd ff6d 	bl	8003eec <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006014:	e00e      	b.n	8006034 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006016:	f7fd ff69 	bl	8003eec <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d907      	bls.n	8006034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e150      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006028:	40023800 	.word	0x40023800
 800602c:	42470000 	.word	0x42470000
 8006030:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006034:	4b88      	ldr	r3, [pc, #544]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1ea      	bne.n	8006016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8097 	beq.w	800617c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006052:	4b81      	ldr	r3, [pc, #516]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	2300      	movs	r3, #0
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	4b7d      	ldr	r3, [pc, #500]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006066:	4a7c      	ldr	r2, [pc, #496]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800606c:	6413      	str	r3, [r2, #64]	@ 0x40
 800606e:	4b7a      	ldr	r3, [pc, #488]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607e:	4b77      	ldr	r3, [pc, #476]	@ (800625c <HAL_RCC_OscConfig+0x474>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d118      	bne.n	80060bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800608a:	4b74      	ldr	r3, [pc, #464]	@ (800625c <HAL_RCC_OscConfig+0x474>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a73      	ldr	r2, [pc, #460]	@ (800625c <HAL_RCC_OscConfig+0x474>)
 8006090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006096:	f7fd ff29 	bl	8003eec <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609e:	f7fd ff25 	bl	8003eec <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e10c      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b0:	4b6a      	ldr	r3, [pc, #424]	@ (800625c <HAL_RCC_OscConfig+0x474>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d106      	bne.n	80060d2 <HAL_RCC_OscConfig+0x2ea>
 80060c4:	4b64      	ldr	r3, [pc, #400]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c8:	4a63      	ldr	r2, [pc, #396]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d0:	e01c      	b.n	800610c <HAL_RCC_OscConfig+0x324>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCC_OscConfig+0x30c>
 80060da:	4b5f      	ldr	r3, [pc, #380]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	4a5e      	ldr	r2, [pc, #376]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060e0:	f043 0304 	orr.w	r3, r3, #4
 80060e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	4a5b      	ldr	r2, [pc, #364]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f2:	e00b      	b.n	800610c <HAL_RCC_OscConfig+0x324>
 80060f4:	4b58      	ldr	r3, [pc, #352]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f8:	4a57      	ldr	r2, [pc, #348]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80060fa:	f023 0301 	bic.w	r3, r3, #1
 80060fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006100:	4b55      	ldr	r3, [pc, #340]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	4a54      	ldr	r2, [pc, #336]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006106:	f023 0304 	bic.w	r3, r3, #4
 800610a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d015      	beq.n	8006140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fd feea 	bl	8003eec <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611a:	e00a      	b.n	8006132 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611c:	f7fd fee6 	bl	8003eec <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e0cb      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006132:	4b49      	ldr	r3, [pc, #292]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0ee      	beq.n	800611c <HAL_RCC_OscConfig+0x334>
 800613e:	e014      	b.n	800616a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006140:	f7fd fed4 	bl	8003eec <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006146:	e00a      	b.n	800615e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006148:	f7fd fed0 	bl	8003eec <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0b5      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615e:	4b3e      	ldr	r3, [pc, #248]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1ee      	bne.n	8006148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d105      	bne.n	800617c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006170:	4b39      	ldr	r3, [pc, #228]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	4a38      	ldr	r2, [pc, #224]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800617a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 80a1 	beq.w	80062c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006186:	4b34      	ldr	r3, [pc, #208]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
 800618e:	2b08      	cmp	r3, #8
 8006190:	d05c      	beq.n	800624c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d141      	bne.n	800621e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619a:	4b31      	ldr	r3, [pc, #196]	@ (8006260 <HAL_RCC_OscConfig+0x478>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a0:	f7fd fea4 	bl	8003eec <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a8:	f7fd fea0 	bl	8003eec <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e087      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ba:	4b27      	ldr	r3, [pc, #156]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69da      	ldr	r2, [r3, #28]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	3b01      	subs	r3, #1
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	491b      	ldr	r1, [pc, #108]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <HAL_RCC_OscConfig+0x478>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f6:	f7fd fe79 	bl	8003eec <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fe:	f7fd fe75 	bl	8003eec <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e05c      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006210:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f0      	beq.n	80061fe <HAL_RCC_OscConfig+0x416>
 800621c:	e054      	b.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621e:	4b10      	ldr	r3, [pc, #64]	@ (8006260 <HAL_RCC_OscConfig+0x478>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006224:	f7fd fe62 	bl	8003eec <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800622c:	f7fd fe5e 	bl	8003eec <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e045      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800623e:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <HAL_RCC_OscConfig+0x470>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x444>
 800624a:	e03d      	b.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d107      	bne.n	8006264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e038      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
 8006258:	40023800 	.word	0x40023800
 800625c:	40007000 	.word	0x40007000
 8006260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006264:	4b1b      	ldr	r3, [pc, #108]	@ (80062d4 <HAL_RCC_OscConfig+0x4ec>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d028      	beq.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d121      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628a:	429a      	cmp	r2, r3
 800628c:	d11a      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800629a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800629c:	4293      	cmp	r3, r2
 800629e:	d111      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	3b01      	subs	r3, #1
 80062ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800

080062d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e0cc      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062ec:	4b68      	ldr	r3, [pc, #416]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d90c      	bls.n	8006314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fa:	4b65      	ldr	r3, [pc, #404]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006302:	4b63      	ldr	r3, [pc, #396]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0b8      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800632c:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a58      	ldr	r2, [pc, #352]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006336:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006344:	4b53      	ldr	r3, [pc, #332]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a52      	ldr	r2, [pc, #328]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800634e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b50      	ldr	r3, [pc, #320]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	494d      	ldr	r1, [pc, #308]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d044      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	4b47      	ldr	r3, [pc, #284]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d119      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e07f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d003      	beq.n	8006396 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006392:	2b03      	cmp	r3, #3
 8006394:	d107      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006396:	4b3f      	ldr	r3, [pc, #252]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e06f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e067      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063b6:	4b37      	ldr	r3, [pc, #220]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 0203 	bic.w	r2, r3, #3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	4934      	ldr	r1, [pc, #208]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063c8:	f7fd fd90 	bl	8003eec <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ce:	e00a      	b.n	80063e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d0:	f7fd fd8c 	bl	8003eec <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e04f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 020c 	and.w	r2, r3, #12
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d1eb      	bne.n	80063d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063f8:	4b25      	ldr	r3, [pc, #148]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d20c      	bcs.n	8006420 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b22      	ldr	r3, [pc, #136]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800640e:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e032      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800642c:	4b19      	ldr	r3, [pc, #100]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4916      	ldr	r1, [pc, #88]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	490e      	ldr	r1, [pc, #56]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800645e:	f000 f821 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8006462:	4602      	mov	r2, r0
 8006464:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	490a      	ldr	r1, [pc, #40]	@ (8006498 <HAL_RCC_ClockConfig+0x1c0>)
 8006470:	5ccb      	ldrb	r3, [r1, r3]
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	4a09      	ldr	r2, [pc, #36]	@ (800649c <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <HAL_RCC_ClockConfig+0x1c8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7fd fcf0 	bl	8003e64 <HAL_InitTick>

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40023c00 	.word	0x40023c00
 8006494:	40023800 	.word	0x40023800
 8006498:	08009810 	.word	0x08009810
 800649c:	20000014 	.word	0x20000014
 80064a0:	20000018 	.word	0x20000018

080064a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a8:	b094      	sub	sp, #80	@ 0x50
 80064aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064bc:	4b79      	ldr	r3, [pc, #484]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d00d      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x40>
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	f200 80e1 	bhi.w	8006690 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x34>
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d003      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x3a>
 80064d6:	e0db      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d8:	4b73      	ldr	r3, [pc, #460]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80064da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064dc:	e0db      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064de:	4b73      	ldr	r3, [pc, #460]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x208>)
 80064e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064e2:	e0d8      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064e4:	4b6f      	ldr	r3, [pc, #444]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064ee:	4b6d      	ldr	r3, [pc, #436]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d063      	beq.n	80065c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064fa:	4b6a      	ldr	r3, [pc, #424]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2200      	movs	r2, #0
 8006502:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006504:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650c:	633b      	str	r3, [r7, #48]	@ 0x30
 800650e:	2300      	movs	r3, #0
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
 8006512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006516:	4622      	mov	r2, r4
 8006518:	462b      	mov	r3, r5
 800651a:	f04f 0000 	mov.w	r0, #0
 800651e:	f04f 0100 	mov.w	r1, #0
 8006522:	0159      	lsls	r1, r3, #5
 8006524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006528:	0150      	lsls	r0, r2, #5
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4621      	mov	r1, r4
 8006530:	1a51      	subs	r1, r2, r1
 8006532:	6139      	str	r1, [r7, #16]
 8006534:	4629      	mov	r1, r5
 8006536:	eb63 0301 	sbc.w	r3, r3, r1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006548:	4659      	mov	r1, fp
 800654a:	018b      	lsls	r3, r1, #6
 800654c:	4651      	mov	r1, sl
 800654e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006552:	4651      	mov	r1, sl
 8006554:	018a      	lsls	r2, r1, #6
 8006556:	4651      	mov	r1, sl
 8006558:	ebb2 0801 	subs.w	r8, r2, r1
 800655c:	4659      	mov	r1, fp
 800655e:	eb63 0901 	sbc.w	r9, r3, r1
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800656e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006576:	4690      	mov	r8, r2
 8006578:	4699      	mov	r9, r3
 800657a:	4623      	mov	r3, r4
 800657c:	eb18 0303 	adds.w	r3, r8, r3
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	462b      	mov	r3, r5
 8006584:	eb49 0303 	adc.w	r3, r9, r3
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006596:	4629      	mov	r1, r5
 8006598:	024b      	lsls	r3, r1, #9
 800659a:	4621      	mov	r1, r4
 800659c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065a0:	4621      	mov	r1, r4
 80065a2:	024a      	lsls	r2, r1, #9
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065aa:	2200      	movs	r2, #0
 80065ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065b4:	f7f9 fe6c 	bl	8000290 <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4613      	mov	r3, r2
 80065be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c0:	e058      	b.n	8006674 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065c2:	4b38      	ldr	r3, [pc, #224]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	2200      	movs	r2, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	4611      	mov	r1, r2
 80065ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	2300      	movs	r3, #0
 80065d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065dc:	4642      	mov	r2, r8
 80065de:	464b      	mov	r3, r9
 80065e0:	f04f 0000 	mov.w	r0, #0
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	0159      	lsls	r1, r3, #5
 80065ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065ee:	0150      	lsls	r0, r2, #5
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4641      	mov	r1, r8
 80065f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80065fa:	4649      	mov	r1, r9
 80065fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800660c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006610:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006614:	ebb2 040a 	subs.w	r4, r2, sl
 8006618:	eb63 050b 	sbc.w	r5, r3, fp
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	00eb      	lsls	r3, r5, #3
 8006626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800662a:	00e2      	lsls	r2, r4, #3
 800662c:	4614      	mov	r4, r2
 800662e:	461d      	mov	r5, r3
 8006630:	4643      	mov	r3, r8
 8006632:	18e3      	adds	r3, r4, r3
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	464b      	mov	r3, r9
 8006638:	eb45 0303 	adc.w	r3, r5, r3
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800664a:	4629      	mov	r1, r5
 800664c:	028b      	lsls	r3, r1, #10
 800664e:	4621      	mov	r1, r4
 8006650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006654:	4621      	mov	r1, r4
 8006656:	028a      	lsls	r2, r1, #10
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800665e:	2200      	movs	r2, #0
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	61fa      	str	r2, [r7, #28]
 8006664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006668:	f7f9 fe12 	bl	8000290 <__aeabi_uldivmod>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4613      	mov	r3, r2
 8006672:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006674:	4b0b      	ldr	r3, [pc, #44]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	3301      	adds	r3, #1
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006684:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800668e:	e002      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006690:	4b05      	ldr	r3, [pc, #20]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006692:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006698:	4618      	mov	r0, r3
 800669a:	3750      	adds	r7, #80	@ 0x50
 800669c:	46bd      	mov	sp, r7
 800669e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a2:	bf00      	nop
 80066a4:	40023800 	.word	0x40023800
 80066a8:	00f42400 	.word	0x00f42400
 80066ac:	007a1200 	.word	0x007a1200

080066b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b4:	4b03      	ldr	r3, [pc, #12]	@ (80066c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066b6:	681b      	ldr	r3, [r3, #0]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000014 	.word	0x20000014

080066c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066cc:	f7ff fff0 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	0a9b      	lsrs	r3, r3, #10
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4903      	ldr	r1, [pc, #12]	@ (80066ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40023800 	.word	0x40023800
 80066ec:	08009820 	.word	0x08009820

080066f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006720:	2b00      	cmp	r3, #0
 8006722:	d075      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006724:	4b91      	ldr	r3, [pc, #580]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800672a:	f7fd fbdf 	bl	8003eec <HAL_GetTick>
 800672e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006732:	f7fd fbdb 	bl	8003eec <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e189      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006744:	4b8a      	ldr	r3, [pc, #552]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	019a      	lsls	r2, r3, #6
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	071b      	lsls	r3, r3, #28
 8006768:	4981      	ldr	r1, [pc, #516]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800676a:	4313      	orrs	r3, r2
 800676c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01f      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800677c:	4b7c      	ldr	r3, [pc, #496]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800677e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006782:	0f1b      	lsrs	r3, r3, #28
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	019a      	lsls	r2, r3, #6
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	061b      	lsls	r3, r3, #24
 8006796:	431a      	orrs	r2, r3
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	071b      	lsls	r3, r3, #28
 800679c:	4974      	ldr	r1, [pc, #464]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80067a4:	4b72      	ldr	r3, [pc, #456]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067aa:	f023 021f 	bic.w	r2, r3, #31
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	496e      	ldr	r1, [pc, #440]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00d      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	019a      	lsls	r2, r3, #6
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	061b      	lsls	r3, r3, #24
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	071b      	lsls	r3, r3, #28
 80067dc:	4964      	ldr	r1, [pc, #400]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067e4:	4b61      	ldr	r3, [pc, #388]	@ (800696c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ea:	f7fd fb7f 	bl	8003eec <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067f2:	f7fd fb7b 	bl	8003eec <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e129      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006804:	4b5a      	ldr	r3, [pc, #360]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006824:	2b00      	cmp	r3, #0
 8006826:	d079      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006828:	4b52      	ldr	r3, [pc, #328]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800682e:	f7fd fb5d 	bl	8003eec <HAL_GetTick>
 8006832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006836:	f7fd fb59 	bl	8003eec <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e107      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006848:	4b49      	ldr	r3, [pc, #292]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006854:	d0ef      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	d020      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006862:	4b43      	ldr	r3, [pc, #268]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006868:	0f1b      	lsrs	r3, r3, #28
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	019a      	lsls	r2, r3, #6
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	061b      	lsls	r3, r3, #24
 800687c:	431a      	orrs	r2, r3
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	071b      	lsls	r3, r3, #28
 8006882:	493b      	ldr	r1, [pc, #236]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800688a:	4b39      	ldr	r3, [pc, #228]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800688c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006890:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	3b01      	subs	r3, #1
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	4934      	ldr	r1, [pc, #208]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01e      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b6:	0e1b      	lsrs	r3, r3, #24
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	019a      	lsls	r2, r3, #6
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	061b      	lsls	r3, r3, #24
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	071b      	lsls	r3, r3, #28
 80068d0:	4927      	ldr	r1, [pc, #156]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068d8:	4b25      	ldr	r3, [pc, #148]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e6:	4922      	ldr	r1, [pc, #136]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068ee:	4b21      	ldr	r3, [pc, #132]	@ (8006974 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068f4:	f7fd fafa 	bl	8003eec <HAL_GetTick>
 80068f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068fa:	e008      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068fc:	f7fd faf6 	bl	8003eec <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e0a4      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800690e:	4b18      	ldr	r3, [pc, #96]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800691a:	d1ef      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 808b 	beq.w	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006932:	4a0f      	ldr	r2, [pc, #60]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006938:	6413      	str	r3, [r2, #64]	@ 0x40
 800693a:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006946:	4b0c      	ldr	r3, [pc, #48]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a0b      	ldr	r2, [pc, #44]	@ (8006978 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800694c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006950:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006952:	f7fd facb 	bl	8003eec <HAL_GetTick>
 8006956:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006958:	e010      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695a:	f7fd fac7 	bl	8003eec <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d909      	bls.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e075      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800696c:	42470068 	.word	0x42470068
 8006970:	40023800 	.word	0x40023800
 8006974:	42470070 	.word	0x42470070
 8006978:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800697c:	4b38      	ldr	r3, [pc, #224]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0e8      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006988:	4b36      	ldr	r3, [pc, #216]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800698a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006990:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d02f      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d028      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069b6:	4b2c      	ldr	r3, [pc, #176]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069bc:	4a29      	ldr	r2, [pc, #164]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069c2:	4b28      	ldr	r3, [pc, #160]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d114      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069ce:	f7fd fa8d 	bl	8003eec <HAL_GetTick>
 80069d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d4:	e00a      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d6:	f7fd fa89 	bl	8003eec <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d901      	bls.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e035      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0ee      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a04:	d10d      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006a06:	4b17      	ldr	r3, [pc, #92]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a1a:	4912      	ldr	r1, [pc, #72]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	608b      	str	r3, [r1, #8]
 8006a20:	e005      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006a22:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	4a0f      	ldr	r2, [pc, #60]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a28:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a2c:	6093      	str	r3, [r2, #8]
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3a:	490a      	ldr	r1, [pc, #40]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006a52:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006a54:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40007000 	.word	0x40007000
 8006a64:	40023800 	.word	0x40023800
 8006a68:	42470e40 	.word	0x42470e40
 8006a6c:	424711e0 	.word	0x424711e0

08006a70 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e01c      	b.n	8006abc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	795b      	ldrb	r3, [r3, #5]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d105      	bne.n	8006a98 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc fcbe 	bl	8003414 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0204 	orr.w	r2, r2, #4
 8006aac:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	791b      	ldrb	r3, [r3, #4]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_RNG_GenerateRandomNumber+0x1a>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e044      	b.n	8006b68 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	795b      	ldrb	r3, [r3, #5]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d133      	bne.n	8006b56 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2202      	movs	r2, #2
 8006af2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006af4:	f7fd f9fa 	bl	8003eec <HAL_GetTick>
 8006af8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006afa:	e018      	b.n	8006b2e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006afc:	f7fd f9f6 	bl	8003eec <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d911      	bls.n	8006b2e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d00a      	beq.n	8006b2e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e01c      	b.n	8006b68 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d1df      	bne.n	8006afc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	715a      	strb	r2, [r3, #5]
 8006b54:	e004      	b.n	8006b60 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2204      	movs	r2, #4
 8006b5a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	711a      	strb	r2, [r3, #4]

  return status;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e07b      	b.n	8006c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d108      	bne.n	8006b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b92:	d009      	beq.n	8006ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	61da      	str	r2, [r3, #28]
 8006b9a:	e005      	b.n	8006ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7fc fc48 	bl	8003458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2c:	ea42 0103 	orr.w	r1, r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	f003 0104 	and.w	r1, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4e:	f003 0210 	and.w	r2, r3, #16
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e01a      	b.n	8006cca <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006caa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fc fc1b 	bl	80034e8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b088      	sub	sp, #32
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	603b      	str	r3, [r7, #0]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce2:	f7fd f903 	bl	8003eec <HAL_GetTick>
 8006ce6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ce8:	88fb      	ldrh	r3, [r7, #6]
 8006cea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d001      	beq.n	8006cfc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e12a      	b.n	8006f52 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_SPI_Transmit+0x36>
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e122      	b.n	8006f52 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_SPI_Transmit+0x48>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e11b      	b.n	8006f52 <HAL_SPI_Transmit+0x280>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2203      	movs	r2, #3
 8006d26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	88fa      	ldrh	r2, [r7, #6]
 8006d3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d68:	d10f      	bne.n	8006d8a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d94:	2b40      	cmp	r3, #64	@ 0x40
 8006d96:	d007      	beq.n	8006da8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006db0:	d152      	bne.n	8006e58 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_SPI_Transmit+0xee>
 8006dba:	8b7b      	ldrh	r3, [r7, #26]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d145      	bne.n	8006e4c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc4:	881a      	ldrh	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd0:	1c9a      	adds	r2, r3, #2
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006de4:	e032      	b.n	8006e4c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d112      	bne.n	8006e1a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df8:	881a      	ldrh	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e04:	1c9a      	adds	r2, r3, #2
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e18:	e018      	b.n	8006e4c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e1a:	f7fd f867 	bl	8003eec <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	683a      	ldr	r2, [r7, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d803      	bhi.n	8006e32 <HAL_SPI_Transmit+0x160>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d102      	bne.n	8006e38 <HAL_SPI_Transmit+0x166>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d109      	bne.n	8006e4c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e082      	b.n	8006f52 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1c7      	bne.n	8006de6 <HAL_SPI_Transmit+0x114>
 8006e56:	e053      	b.n	8006f00 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <HAL_SPI_Transmit+0x194>
 8006e60:	8b7b      	ldrh	r3, [r7, #26]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d147      	bne.n	8006ef6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	330c      	adds	r3, #12
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e8c:	e033      	b.n	8006ef6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d113      	bne.n	8006ec4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ec2:	e018      	b.n	8006ef6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ec4:	f7fd f812 	bl	8003eec <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d803      	bhi.n	8006edc <HAL_SPI_Transmit+0x20a>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d102      	bne.n	8006ee2 <HAL_SPI_Transmit+0x210>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e02d      	b.n	8006f52 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1c6      	bne.n	8006e8e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f8bf 	bl	8007088 <SPI_EndRxTxTransaction>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006f50:	2300      	movs	r3, #0
  }
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3720      	adds	r7, #32
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f68:	b2db      	uxtb	r3, r3
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f88:	f7fc ffb0 	bl	8003eec <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	4413      	add	r3, r2
 8006f96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f98:	f7fc ffa8 	bl	8003eec <HAL_GetTick>
 8006f9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f9e:	4b39      	ldr	r3, [pc, #228]	@ (8007084 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	015b      	lsls	r3, r3, #5
 8006fa4:	0d1b      	lsrs	r3, r3, #20
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
 8006fac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fae:	e054      	b.n	800705a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d050      	beq.n	800705a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fb8:	f7fc ff98 	bl	8003eec <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d902      	bls.n	8006fce <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d13d      	bne.n	800704a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fe6:	d111      	bne.n	800700c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff0:	d004      	beq.n	8006ffc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ffa:	d107      	bne.n	800700c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800700a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007014:	d10f      	bne.n	8007036 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e017      	b.n	800707a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	3b01      	subs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4013      	ands	r3, r2
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	429a      	cmp	r2, r3
 8007068:	bf0c      	ite	eq
 800706a:	2301      	moveq	r3, #1
 800706c:	2300      	movne	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	461a      	mov	r2, r3
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	429a      	cmp	r2, r3
 8007076:	d19b      	bne.n	8006fb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000014 	.word	0x20000014

08007088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2201      	movs	r2, #1
 800709c:	2102      	movs	r1, #2
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff ff6a 	bl	8006f78 <SPI_WaitFlagStateUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e032      	b.n	8007120 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <SPI_EndRxTxTransaction+0xa0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1b      	ldr	r2, [pc, #108]	@ (800712c <SPI_EndRxTxTransaction+0xa4>)
 80070c0:	fba2 2303 	umull	r2, r3, r2, r3
 80070c4:	0d5b      	lsrs	r3, r3, #21
 80070c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070d8:	d112      	bne.n	8007100 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2200      	movs	r2, #0
 80070e2:	2180      	movs	r1, #128	@ 0x80
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff ff47 	bl	8006f78 <SPI_WaitFlagStateUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d016      	beq.n	800711e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f4:	f043 0220 	orr.w	r2, r3, #32
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e00f      	b.n	8007120 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	3b01      	subs	r3, #1
 800710a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b80      	cmp	r3, #128	@ 0x80
 8007118:	d0f2      	beq.n	8007100 <SPI_EndRxTxTransaction+0x78>
 800711a:	e000      	b.n	800711e <SPI_EndRxTxTransaction+0x96>
        break;
 800711c:	bf00      	nop
  }

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000014 	.word	0x20000014
 800712c:	165e9f81 	.word	0x165e9f81

08007130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e041      	b.n	80071c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fc f9e4 	bl	8003524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f000 f8f4 	bl	800735c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d101      	bne.n	80071ea <HAL_TIM_ConfigClockSource+0x1c>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e0b4      	b.n	8007354 <HAL_TIM_ConfigClockSource+0x186>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007208:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007210:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007222:	d03e      	beq.n	80072a2 <HAL_TIM_ConfigClockSource+0xd4>
 8007224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007228:	f200 8087 	bhi.w	800733a <HAL_TIM_ConfigClockSource+0x16c>
 800722c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007230:	f000 8086 	beq.w	8007340 <HAL_TIM_ConfigClockSource+0x172>
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007238:	d87f      	bhi.n	800733a <HAL_TIM_ConfigClockSource+0x16c>
 800723a:	2b70      	cmp	r3, #112	@ 0x70
 800723c:	d01a      	beq.n	8007274 <HAL_TIM_ConfigClockSource+0xa6>
 800723e:	2b70      	cmp	r3, #112	@ 0x70
 8007240:	d87b      	bhi.n	800733a <HAL_TIM_ConfigClockSource+0x16c>
 8007242:	2b60      	cmp	r3, #96	@ 0x60
 8007244:	d050      	beq.n	80072e8 <HAL_TIM_ConfigClockSource+0x11a>
 8007246:	2b60      	cmp	r3, #96	@ 0x60
 8007248:	d877      	bhi.n	800733a <HAL_TIM_ConfigClockSource+0x16c>
 800724a:	2b50      	cmp	r3, #80	@ 0x50
 800724c:	d03c      	beq.n	80072c8 <HAL_TIM_ConfigClockSource+0xfa>
 800724e:	2b50      	cmp	r3, #80	@ 0x50
 8007250:	d873      	bhi.n	800733a <HAL_TIM_ConfigClockSource+0x16c>
 8007252:	2b40      	cmp	r3, #64	@ 0x40
 8007254:	d058      	beq.n	8007308 <HAL_TIM_ConfigClockSource+0x13a>
 8007256:	2b40      	cmp	r3, #64	@ 0x40
 8007258:	d86f      	bhi.n	800733a <HAL_TIM_ConfigClockSource+0x16c>
 800725a:	2b30      	cmp	r3, #48	@ 0x30
 800725c:	d064      	beq.n	8007328 <HAL_TIM_ConfigClockSource+0x15a>
 800725e:	2b30      	cmp	r3, #48	@ 0x30
 8007260:	d86b      	bhi.n	800733a <HAL_TIM_ConfigClockSource+0x16c>
 8007262:	2b20      	cmp	r3, #32
 8007264:	d060      	beq.n	8007328 <HAL_TIM_ConfigClockSource+0x15a>
 8007266:	2b20      	cmp	r3, #32
 8007268:	d867      	bhi.n	800733a <HAL_TIM_ConfigClockSource+0x16c>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d05c      	beq.n	8007328 <HAL_TIM_ConfigClockSource+0x15a>
 800726e:	2b10      	cmp	r3, #16
 8007270:	d05a      	beq.n	8007328 <HAL_TIM_ConfigClockSource+0x15a>
 8007272:	e062      	b.n	800733a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007284:	f000 f990 	bl	80075a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007296:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	609a      	str	r2, [r3, #8]
      break;
 80072a0:	e04f      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072b2:	f000 f979 	bl	80075a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072c4:	609a      	str	r2, [r3, #8]
      break;
 80072c6:	e03c      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072d4:	461a      	mov	r2, r3
 80072d6:	f000 f8ed 	bl	80074b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2150      	movs	r1, #80	@ 0x50
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f946 	bl	8007572 <TIM_ITRx_SetConfig>
      break;
 80072e6:	e02c      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072f4:	461a      	mov	r2, r3
 80072f6:	f000 f90c 	bl	8007512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2160      	movs	r1, #96	@ 0x60
 8007300:	4618      	mov	r0, r3
 8007302:	f000 f936 	bl	8007572 <TIM_ITRx_SetConfig>
      break;
 8007306:	e01c      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007314:	461a      	mov	r2, r3
 8007316:	f000 f8cd 	bl	80074b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2140      	movs	r1, #64	@ 0x40
 8007320:	4618      	mov	r0, r3
 8007322:	f000 f926 	bl	8007572 <TIM_ITRx_SetConfig>
      break;
 8007326:	e00c      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f000 f91d 	bl	8007572 <TIM_ITRx_SetConfig>
      break;
 8007338:	e003      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
      break;
 800733e:	e000      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007340:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a46      	ldr	r2, [pc, #280]	@ (8007488 <TIM_Base_SetConfig+0x12c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d013      	beq.n	800739c <TIM_Base_SetConfig+0x40>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737a:	d00f      	beq.n	800739c <TIM_Base_SetConfig+0x40>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a43      	ldr	r2, [pc, #268]	@ (800748c <TIM_Base_SetConfig+0x130>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00b      	beq.n	800739c <TIM_Base_SetConfig+0x40>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a42      	ldr	r2, [pc, #264]	@ (8007490 <TIM_Base_SetConfig+0x134>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d007      	beq.n	800739c <TIM_Base_SetConfig+0x40>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a41      	ldr	r2, [pc, #260]	@ (8007494 <TIM_Base_SetConfig+0x138>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d003      	beq.n	800739c <TIM_Base_SetConfig+0x40>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a40      	ldr	r2, [pc, #256]	@ (8007498 <TIM_Base_SetConfig+0x13c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d108      	bne.n	80073ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a35      	ldr	r2, [pc, #212]	@ (8007488 <TIM_Base_SetConfig+0x12c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d02b      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073bc:	d027      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a32      	ldr	r2, [pc, #200]	@ (800748c <TIM_Base_SetConfig+0x130>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d023      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a31      	ldr	r2, [pc, #196]	@ (8007490 <TIM_Base_SetConfig+0x134>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01f      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a30      	ldr	r2, [pc, #192]	@ (8007494 <TIM_Base_SetConfig+0x138>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01b      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2f      	ldr	r2, [pc, #188]	@ (8007498 <TIM_Base_SetConfig+0x13c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d017      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2e      	ldr	r2, [pc, #184]	@ (800749c <TIM_Base_SetConfig+0x140>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2d      	ldr	r2, [pc, #180]	@ (80074a0 <TIM_Base_SetConfig+0x144>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00f      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a2c      	ldr	r2, [pc, #176]	@ (80074a4 <TIM_Base_SetConfig+0x148>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00b      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a2b      	ldr	r2, [pc, #172]	@ (80074a8 <TIM_Base_SetConfig+0x14c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d007      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a2a      	ldr	r2, [pc, #168]	@ (80074ac <TIM_Base_SetConfig+0x150>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d003      	beq.n	800740e <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a29      	ldr	r2, [pc, #164]	@ (80074b0 <TIM_Base_SetConfig+0x154>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d108      	bne.n	8007420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a10      	ldr	r2, [pc, #64]	@ (8007488 <TIM_Base_SetConfig+0x12c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_Base_SetConfig+0xf8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a12      	ldr	r2, [pc, #72]	@ (8007498 <TIM_Base_SetConfig+0x13c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d103      	bne.n	800745c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b01      	cmp	r3, #1
 800746c:	d105      	bne.n	800747a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f023 0201 	bic.w	r2, r3, #1
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	611a      	str	r2, [r3, #16]
  }
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40010000 	.word	0x40010000
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800
 8007494:	40000c00 	.word	0x40000c00
 8007498:	40010400 	.word	0x40010400
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800
 80074a8:	40001800 	.word	0x40001800
 80074ac:	40001c00 	.word	0x40001c00
 80074b0:	40002000 	.word	0x40002000

080074b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f023 0201 	bic.w	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f023 030a 	bic.w	r3, r3, #10
 80074f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007512:	b480      	push	{r7}
 8007514:	b087      	sub	sp, #28
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	f023 0210 	bic.w	r2, r3, #16
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800753c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	031b      	lsls	r3, r3, #12
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	4313      	orrs	r3, r2
 8007546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800754e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	4313      	orrs	r3, r2
 8007558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007572:	b480      	push	{r7}
 8007574:	b085      	sub	sp, #20
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	f043 0307 	orr.w	r3, r3, #7
 8007594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	609a      	str	r2, [r3, #8]
}
 800759c:	bf00      	nop
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	021a      	lsls	r2, r3, #8
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	609a      	str	r2, [r3, #8]
}
 80075dc:	bf00      	nop
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e05a      	b.n	80076b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a21      	ldr	r2, [pc, #132]	@ (80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d022      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800764c:	d01d      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1d      	ldr	r2, [pc, #116]	@ (80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d018      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1b      	ldr	r2, [pc, #108]	@ (80076cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a1a      	ldr	r2, [pc, #104]	@ (80076d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00e      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a18      	ldr	r2, [pc, #96]	@ (80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d009      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a17      	ldr	r2, [pc, #92]	@ (80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d004      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a15      	ldr	r2, [pc, #84]	@ (80076dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d10c      	bne.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	4313      	orrs	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40000c00 	.word	0x40000c00
 80076d4:	40010400 	.word	0x40010400
 80076d8:	40014000 	.word	0x40014000
 80076dc:	40001800 	.word	0x40001800

080076e0 <std>:
 80076e0:	2300      	movs	r3, #0
 80076e2:	b510      	push	{r4, lr}
 80076e4:	4604      	mov	r4, r0
 80076e6:	e9c0 3300 	strd	r3, r3, [r0]
 80076ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ee:	6083      	str	r3, [r0, #8]
 80076f0:	8181      	strh	r1, [r0, #12]
 80076f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80076f4:	81c2      	strh	r2, [r0, #14]
 80076f6:	6183      	str	r3, [r0, #24]
 80076f8:	4619      	mov	r1, r3
 80076fa:	2208      	movs	r2, #8
 80076fc:	305c      	adds	r0, #92	@ 0x5c
 80076fe:	f000 f9f9 	bl	8007af4 <memset>
 8007702:	4b0d      	ldr	r3, [pc, #52]	@ (8007738 <std+0x58>)
 8007704:	6263      	str	r3, [r4, #36]	@ 0x24
 8007706:	4b0d      	ldr	r3, [pc, #52]	@ (800773c <std+0x5c>)
 8007708:	62a3      	str	r3, [r4, #40]	@ 0x28
 800770a:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <std+0x60>)
 800770c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800770e:	4b0d      	ldr	r3, [pc, #52]	@ (8007744 <std+0x64>)
 8007710:	6323      	str	r3, [r4, #48]	@ 0x30
 8007712:	4b0d      	ldr	r3, [pc, #52]	@ (8007748 <std+0x68>)
 8007714:	6224      	str	r4, [r4, #32]
 8007716:	429c      	cmp	r4, r3
 8007718:	d006      	beq.n	8007728 <std+0x48>
 800771a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800771e:	4294      	cmp	r4, r2
 8007720:	d002      	beq.n	8007728 <std+0x48>
 8007722:	33d0      	adds	r3, #208	@ 0xd0
 8007724:	429c      	cmp	r4, r3
 8007726:	d105      	bne.n	8007734 <std+0x54>
 8007728:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800772c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007730:	f000 ba58 	b.w	8007be4 <__retarget_lock_init_recursive>
 8007734:	bd10      	pop	{r4, pc}
 8007736:	bf00      	nop
 8007738:	08007945 	.word	0x08007945
 800773c:	08007967 	.word	0x08007967
 8007740:	0800799f 	.word	0x0800799f
 8007744:	080079c3 	.word	0x080079c3
 8007748:	20025c18 	.word	0x20025c18

0800774c <stdio_exit_handler>:
 800774c:	4a02      	ldr	r2, [pc, #8]	@ (8007758 <stdio_exit_handler+0xc>)
 800774e:	4903      	ldr	r1, [pc, #12]	@ (800775c <stdio_exit_handler+0x10>)
 8007750:	4803      	ldr	r0, [pc, #12]	@ (8007760 <stdio_exit_handler+0x14>)
 8007752:	f000 b869 	b.w	8007828 <_fwalk_sglue>
 8007756:	bf00      	nop
 8007758:	20000020 	.word	0x20000020
 800775c:	08008485 	.word	0x08008485
 8007760:	20000030 	.word	0x20000030

08007764 <cleanup_stdio>:
 8007764:	6841      	ldr	r1, [r0, #4]
 8007766:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <cleanup_stdio+0x34>)
 8007768:	4299      	cmp	r1, r3
 800776a:	b510      	push	{r4, lr}
 800776c:	4604      	mov	r4, r0
 800776e:	d001      	beq.n	8007774 <cleanup_stdio+0x10>
 8007770:	f000 fe88 	bl	8008484 <_fflush_r>
 8007774:	68a1      	ldr	r1, [r4, #8]
 8007776:	4b09      	ldr	r3, [pc, #36]	@ (800779c <cleanup_stdio+0x38>)
 8007778:	4299      	cmp	r1, r3
 800777a:	d002      	beq.n	8007782 <cleanup_stdio+0x1e>
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fe81 	bl	8008484 <_fflush_r>
 8007782:	68e1      	ldr	r1, [r4, #12]
 8007784:	4b06      	ldr	r3, [pc, #24]	@ (80077a0 <cleanup_stdio+0x3c>)
 8007786:	4299      	cmp	r1, r3
 8007788:	d004      	beq.n	8007794 <cleanup_stdio+0x30>
 800778a:	4620      	mov	r0, r4
 800778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007790:	f000 be78 	b.w	8008484 <_fflush_r>
 8007794:	bd10      	pop	{r4, pc}
 8007796:	bf00      	nop
 8007798:	20025c18 	.word	0x20025c18
 800779c:	20025c80 	.word	0x20025c80
 80077a0:	20025ce8 	.word	0x20025ce8

080077a4 <global_stdio_init.part.0>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <global_stdio_init.part.0+0x30>)
 80077a8:	4c0b      	ldr	r4, [pc, #44]	@ (80077d8 <global_stdio_init.part.0+0x34>)
 80077aa:	4a0c      	ldr	r2, [pc, #48]	@ (80077dc <global_stdio_init.part.0+0x38>)
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	4620      	mov	r0, r4
 80077b0:	2200      	movs	r2, #0
 80077b2:	2104      	movs	r1, #4
 80077b4:	f7ff ff94 	bl	80076e0 <std>
 80077b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077bc:	2201      	movs	r2, #1
 80077be:	2109      	movs	r1, #9
 80077c0:	f7ff ff8e 	bl	80076e0 <std>
 80077c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077c8:	2202      	movs	r2, #2
 80077ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ce:	2112      	movs	r1, #18
 80077d0:	f7ff bf86 	b.w	80076e0 <std>
 80077d4:	20025d50 	.word	0x20025d50
 80077d8:	20025c18 	.word	0x20025c18
 80077dc:	0800774d 	.word	0x0800774d

080077e0 <__sfp_lock_acquire>:
 80077e0:	4801      	ldr	r0, [pc, #4]	@ (80077e8 <__sfp_lock_acquire+0x8>)
 80077e2:	f000 ba00 	b.w	8007be6 <__retarget_lock_acquire_recursive>
 80077e6:	bf00      	nop
 80077e8:	20025d59 	.word	0x20025d59

080077ec <__sfp_lock_release>:
 80077ec:	4801      	ldr	r0, [pc, #4]	@ (80077f4 <__sfp_lock_release+0x8>)
 80077ee:	f000 b9fb 	b.w	8007be8 <__retarget_lock_release_recursive>
 80077f2:	bf00      	nop
 80077f4:	20025d59 	.word	0x20025d59

080077f8 <__sinit>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	f7ff fff0 	bl	80077e0 <__sfp_lock_acquire>
 8007800:	6a23      	ldr	r3, [r4, #32]
 8007802:	b11b      	cbz	r3, 800780c <__sinit+0x14>
 8007804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007808:	f7ff bff0 	b.w	80077ec <__sfp_lock_release>
 800780c:	4b04      	ldr	r3, [pc, #16]	@ (8007820 <__sinit+0x28>)
 800780e:	6223      	str	r3, [r4, #32]
 8007810:	4b04      	ldr	r3, [pc, #16]	@ (8007824 <__sinit+0x2c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f5      	bne.n	8007804 <__sinit+0xc>
 8007818:	f7ff ffc4 	bl	80077a4 <global_stdio_init.part.0>
 800781c:	e7f2      	b.n	8007804 <__sinit+0xc>
 800781e:	bf00      	nop
 8007820:	08007765 	.word	0x08007765
 8007824:	20025d50 	.word	0x20025d50

08007828 <_fwalk_sglue>:
 8007828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800782c:	4607      	mov	r7, r0
 800782e:	4688      	mov	r8, r1
 8007830:	4614      	mov	r4, r2
 8007832:	2600      	movs	r6, #0
 8007834:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007838:	f1b9 0901 	subs.w	r9, r9, #1
 800783c:	d505      	bpl.n	800784a <_fwalk_sglue+0x22>
 800783e:	6824      	ldr	r4, [r4, #0]
 8007840:	2c00      	cmp	r4, #0
 8007842:	d1f7      	bne.n	8007834 <_fwalk_sglue+0xc>
 8007844:	4630      	mov	r0, r6
 8007846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800784a:	89ab      	ldrh	r3, [r5, #12]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d907      	bls.n	8007860 <_fwalk_sglue+0x38>
 8007850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007854:	3301      	adds	r3, #1
 8007856:	d003      	beq.n	8007860 <_fwalk_sglue+0x38>
 8007858:	4629      	mov	r1, r5
 800785a:	4638      	mov	r0, r7
 800785c:	47c0      	blx	r8
 800785e:	4306      	orrs	r6, r0
 8007860:	3568      	adds	r5, #104	@ 0x68
 8007862:	e7e9      	b.n	8007838 <_fwalk_sglue+0x10>

08007864 <iprintf>:
 8007864:	b40f      	push	{r0, r1, r2, r3}
 8007866:	b507      	push	{r0, r1, r2, lr}
 8007868:	4906      	ldr	r1, [pc, #24]	@ (8007884 <iprintf+0x20>)
 800786a:	ab04      	add	r3, sp, #16
 800786c:	6808      	ldr	r0, [r1, #0]
 800786e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007872:	6881      	ldr	r1, [r0, #8]
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	f000 fadb 	bl	8007e30 <_vfiprintf_r>
 800787a:	b003      	add	sp, #12
 800787c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007880:	b004      	add	sp, #16
 8007882:	4770      	bx	lr
 8007884:	2000002c 	.word	0x2000002c

08007888 <_puts_r>:
 8007888:	6a03      	ldr	r3, [r0, #32]
 800788a:	b570      	push	{r4, r5, r6, lr}
 800788c:	6884      	ldr	r4, [r0, #8]
 800788e:	4605      	mov	r5, r0
 8007890:	460e      	mov	r6, r1
 8007892:	b90b      	cbnz	r3, 8007898 <_puts_r+0x10>
 8007894:	f7ff ffb0 	bl	80077f8 <__sinit>
 8007898:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800789a:	07db      	lsls	r3, r3, #31
 800789c:	d405      	bmi.n	80078aa <_puts_r+0x22>
 800789e:	89a3      	ldrh	r3, [r4, #12]
 80078a0:	0598      	lsls	r0, r3, #22
 80078a2:	d402      	bmi.n	80078aa <_puts_r+0x22>
 80078a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078a6:	f000 f99e 	bl	8007be6 <__retarget_lock_acquire_recursive>
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	0719      	lsls	r1, r3, #28
 80078ae:	d502      	bpl.n	80078b6 <_puts_r+0x2e>
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d135      	bne.n	8007922 <_puts_r+0x9a>
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 f8c5 	bl	8007a48 <__swsetup_r>
 80078be:	b380      	cbz	r0, 8007922 <_puts_r+0x9a>
 80078c0:	f04f 35ff 	mov.w	r5, #4294967295
 80078c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c6:	07da      	lsls	r2, r3, #31
 80078c8:	d405      	bmi.n	80078d6 <_puts_r+0x4e>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	059b      	lsls	r3, r3, #22
 80078ce:	d402      	bmi.n	80078d6 <_puts_r+0x4e>
 80078d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d2:	f000 f989 	bl	8007be8 <__retarget_lock_release_recursive>
 80078d6:	4628      	mov	r0, r5
 80078d8:	bd70      	pop	{r4, r5, r6, pc}
 80078da:	2b00      	cmp	r3, #0
 80078dc:	da04      	bge.n	80078e8 <_puts_r+0x60>
 80078de:	69a2      	ldr	r2, [r4, #24]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	dc17      	bgt.n	8007914 <_puts_r+0x8c>
 80078e4:	290a      	cmp	r1, #10
 80078e6:	d015      	beq.n	8007914 <_puts_r+0x8c>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	7019      	strb	r1, [r3, #0]
 80078f0:	68a3      	ldr	r3, [r4, #8]
 80078f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078f6:	3b01      	subs	r3, #1
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	2900      	cmp	r1, #0
 80078fc:	d1ed      	bne.n	80078da <_puts_r+0x52>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da11      	bge.n	8007926 <_puts_r+0x9e>
 8007902:	4622      	mov	r2, r4
 8007904:	210a      	movs	r1, #10
 8007906:	4628      	mov	r0, r5
 8007908:	f000 f85f 	bl	80079ca <__swbuf_r>
 800790c:	3001      	adds	r0, #1
 800790e:	d0d7      	beq.n	80078c0 <_puts_r+0x38>
 8007910:	250a      	movs	r5, #10
 8007912:	e7d7      	b.n	80078c4 <_puts_r+0x3c>
 8007914:	4622      	mov	r2, r4
 8007916:	4628      	mov	r0, r5
 8007918:	f000 f857 	bl	80079ca <__swbuf_r>
 800791c:	3001      	adds	r0, #1
 800791e:	d1e7      	bne.n	80078f0 <_puts_r+0x68>
 8007920:	e7ce      	b.n	80078c0 <_puts_r+0x38>
 8007922:	3e01      	subs	r6, #1
 8007924:	e7e4      	b.n	80078f0 <_puts_r+0x68>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	6022      	str	r2, [r4, #0]
 800792c:	220a      	movs	r2, #10
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e7ee      	b.n	8007910 <_puts_r+0x88>
	...

08007934 <puts>:
 8007934:	4b02      	ldr	r3, [pc, #8]	@ (8007940 <puts+0xc>)
 8007936:	4601      	mov	r1, r0
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f7ff bfa5 	b.w	8007888 <_puts_r>
 800793e:	bf00      	nop
 8007940:	2000002c 	.word	0x2000002c

08007944 <__sread>:
 8007944:	b510      	push	{r4, lr}
 8007946:	460c      	mov	r4, r1
 8007948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794c:	f000 f8fc 	bl	8007b48 <_read_r>
 8007950:	2800      	cmp	r0, #0
 8007952:	bfab      	itete	ge
 8007954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007956:	89a3      	ldrhlt	r3, [r4, #12]
 8007958:	181b      	addge	r3, r3, r0
 800795a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800795e:	bfac      	ite	ge
 8007960:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007962:	81a3      	strhlt	r3, [r4, #12]
 8007964:	bd10      	pop	{r4, pc}

08007966 <__swrite>:
 8007966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800796a:	461f      	mov	r7, r3
 800796c:	898b      	ldrh	r3, [r1, #12]
 800796e:	05db      	lsls	r3, r3, #23
 8007970:	4605      	mov	r5, r0
 8007972:	460c      	mov	r4, r1
 8007974:	4616      	mov	r6, r2
 8007976:	d505      	bpl.n	8007984 <__swrite+0x1e>
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	2302      	movs	r3, #2
 800797e:	2200      	movs	r2, #0
 8007980:	f000 f8d0 	bl	8007b24 <_lseek_r>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800798a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	4632      	mov	r2, r6
 8007992:	463b      	mov	r3, r7
 8007994:	4628      	mov	r0, r5
 8007996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800799a:	f000 b8e7 	b.w	8007b6c <_write_r>

0800799e <__sseek>:
 800799e:	b510      	push	{r4, lr}
 80079a0:	460c      	mov	r4, r1
 80079a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a6:	f000 f8bd 	bl	8007b24 <_lseek_r>
 80079aa:	1c43      	adds	r3, r0, #1
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	bf15      	itete	ne
 80079b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079ba:	81a3      	strheq	r3, [r4, #12]
 80079bc:	bf18      	it	ne
 80079be:	81a3      	strhne	r3, [r4, #12]
 80079c0:	bd10      	pop	{r4, pc}

080079c2 <__sclose>:
 80079c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c6:	f000 b89d 	b.w	8007b04 <_close_r>

080079ca <__swbuf_r>:
 80079ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079cc:	460e      	mov	r6, r1
 80079ce:	4614      	mov	r4, r2
 80079d0:	4605      	mov	r5, r0
 80079d2:	b118      	cbz	r0, 80079dc <__swbuf_r+0x12>
 80079d4:	6a03      	ldr	r3, [r0, #32]
 80079d6:	b90b      	cbnz	r3, 80079dc <__swbuf_r+0x12>
 80079d8:	f7ff ff0e 	bl	80077f8 <__sinit>
 80079dc:	69a3      	ldr	r3, [r4, #24]
 80079de:	60a3      	str	r3, [r4, #8]
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	071a      	lsls	r2, r3, #28
 80079e4:	d501      	bpl.n	80079ea <__swbuf_r+0x20>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	b943      	cbnz	r3, 80079fc <__swbuf_r+0x32>
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 f82b 	bl	8007a48 <__swsetup_r>
 80079f2:	b118      	cbz	r0, 80079fc <__swbuf_r+0x32>
 80079f4:	f04f 37ff 	mov.w	r7, #4294967295
 80079f8:	4638      	mov	r0, r7
 80079fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	6922      	ldr	r2, [r4, #16]
 8007a00:	1a98      	subs	r0, r3, r2
 8007a02:	6963      	ldr	r3, [r4, #20]
 8007a04:	b2f6      	uxtb	r6, r6
 8007a06:	4283      	cmp	r3, r0
 8007a08:	4637      	mov	r7, r6
 8007a0a:	dc05      	bgt.n	8007a18 <__swbuf_r+0x4e>
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 fd38 	bl	8008484 <_fflush_r>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d1ed      	bne.n	80079f4 <__swbuf_r+0x2a>
 8007a18:	68a3      	ldr	r3, [r4, #8]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	60a3      	str	r3, [r4, #8]
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	6022      	str	r2, [r4, #0]
 8007a24:	701e      	strb	r6, [r3, #0]
 8007a26:	6962      	ldr	r2, [r4, #20]
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d004      	beq.n	8007a38 <__swbuf_r+0x6e>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	07db      	lsls	r3, r3, #31
 8007a32:	d5e1      	bpl.n	80079f8 <__swbuf_r+0x2e>
 8007a34:	2e0a      	cmp	r6, #10
 8007a36:	d1df      	bne.n	80079f8 <__swbuf_r+0x2e>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 fd22 	bl	8008484 <_fflush_r>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d0d9      	beq.n	80079f8 <__swbuf_r+0x2e>
 8007a44:	e7d6      	b.n	80079f4 <__swbuf_r+0x2a>
	...

08007a48 <__swsetup_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4b29      	ldr	r3, [pc, #164]	@ (8007af0 <__swsetup_r+0xa8>)
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	460c      	mov	r4, r1
 8007a52:	b118      	cbz	r0, 8007a5c <__swsetup_r+0x14>
 8007a54:	6a03      	ldr	r3, [r0, #32]
 8007a56:	b90b      	cbnz	r3, 8007a5c <__swsetup_r+0x14>
 8007a58:	f7ff fece 	bl	80077f8 <__sinit>
 8007a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a60:	0719      	lsls	r1, r3, #28
 8007a62:	d422      	bmi.n	8007aaa <__swsetup_r+0x62>
 8007a64:	06da      	lsls	r2, r3, #27
 8007a66:	d407      	bmi.n	8007a78 <__swsetup_r+0x30>
 8007a68:	2209      	movs	r2, #9
 8007a6a:	602a      	str	r2, [r5, #0]
 8007a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	e033      	b.n	8007ae0 <__swsetup_r+0x98>
 8007a78:	0758      	lsls	r0, r3, #29
 8007a7a:	d512      	bpl.n	8007aa2 <__swsetup_r+0x5a>
 8007a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a7e:	b141      	cbz	r1, 8007a92 <__swsetup_r+0x4a>
 8007a80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a84:	4299      	cmp	r1, r3
 8007a86:	d002      	beq.n	8007a8e <__swsetup_r+0x46>
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 f8af 	bl	8007bec <_free_r>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f043 0308 	orr.w	r3, r3, #8
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	b94b      	cbnz	r3, 8007ac2 <__swsetup_r+0x7a>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ab8:	d003      	beq.n	8007ac2 <__swsetup_r+0x7a>
 8007aba:	4621      	mov	r1, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	f000 fd2f 	bl	8008520 <__smakebuf_r>
 8007ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac6:	f013 0201 	ands.w	r2, r3, #1
 8007aca:	d00a      	beq.n	8007ae2 <__swsetup_r+0x9a>
 8007acc:	2200      	movs	r2, #0
 8007ace:	60a2      	str	r2, [r4, #8]
 8007ad0:	6962      	ldr	r2, [r4, #20]
 8007ad2:	4252      	negs	r2, r2
 8007ad4:	61a2      	str	r2, [r4, #24]
 8007ad6:	6922      	ldr	r2, [r4, #16]
 8007ad8:	b942      	cbnz	r2, 8007aec <__swsetup_r+0xa4>
 8007ada:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ade:	d1c5      	bne.n	8007a6c <__swsetup_r+0x24>
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	0799      	lsls	r1, r3, #30
 8007ae4:	bf58      	it	pl
 8007ae6:	6962      	ldrpl	r2, [r4, #20]
 8007ae8:	60a2      	str	r2, [r4, #8]
 8007aea:	e7f4      	b.n	8007ad6 <__swsetup_r+0x8e>
 8007aec:	2000      	movs	r0, #0
 8007aee:	e7f7      	b.n	8007ae0 <__swsetup_r+0x98>
 8007af0:	2000002c 	.word	0x2000002c

08007af4 <memset>:
 8007af4:	4402      	add	r2, r0
 8007af6:	4603      	mov	r3, r0
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d100      	bne.n	8007afe <memset+0xa>
 8007afc:	4770      	bx	lr
 8007afe:	f803 1b01 	strb.w	r1, [r3], #1
 8007b02:	e7f9      	b.n	8007af8 <memset+0x4>

08007b04 <_close_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d06      	ldr	r5, [pc, #24]	@ (8007b20 <_close_r+0x1c>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	602b      	str	r3, [r5, #0]
 8007b10:	f7fc f8e0 	bl	8003cd4 <_close>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_close_r+0x1a>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_close_r+0x1a>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	20025d54 	.word	0x20025d54

08007b24 <_lseek_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d07      	ldr	r5, [pc, #28]	@ (8007b44 <_lseek_r+0x20>)
 8007b28:	4604      	mov	r4, r0
 8007b2a:	4608      	mov	r0, r1
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	2200      	movs	r2, #0
 8007b30:	602a      	str	r2, [r5, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f7fc f8f5 	bl	8003d22 <_lseek>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_lseek_r+0x1e>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_lseek_r+0x1e>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	20025d54 	.word	0x20025d54

08007b48 <_read_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d07      	ldr	r5, [pc, #28]	@ (8007b68 <_read_r+0x20>)
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	4608      	mov	r0, r1
 8007b50:	4611      	mov	r1, r2
 8007b52:	2200      	movs	r2, #0
 8007b54:	602a      	str	r2, [r5, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f7fc f883 	bl	8003c62 <_read>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_read_r+0x1e>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_read_r+0x1e>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20025d54 	.word	0x20025d54

08007b6c <_write_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d07      	ldr	r5, [pc, #28]	@ (8007b8c <_write_r+0x20>)
 8007b70:	4604      	mov	r4, r0
 8007b72:	4608      	mov	r0, r1
 8007b74:	4611      	mov	r1, r2
 8007b76:	2200      	movs	r2, #0
 8007b78:	602a      	str	r2, [r5, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f7fc f88e 	bl	8003c9c <_write>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_write_r+0x1e>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_write_r+0x1e>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	20025d54 	.word	0x20025d54

08007b90 <__errno>:
 8007b90:	4b01      	ldr	r3, [pc, #4]	@ (8007b98 <__errno+0x8>)
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	2000002c 	.word	0x2000002c

08007b9c <__libc_init_array>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007bd4 <__libc_init_array+0x38>)
 8007ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8007bd8 <__libc_init_array+0x3c>)
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	42a6      	cmp	r6, r4
 8007baa:	d109      	bne.n	8007bc0 <__libc_init_array+0x24>
 8007bac:	4d0b      	ldr	r5, [pc, #44]	@ (8007bdc <__libc_init_array+0x40>)
 8007bae:	4c0c      	ldr	r4, [pc, #48]	@ (8007be0 <__libc_init_array+0x44>)
 8007bb0:	f000 fd24 	bl	80085fc <_init>
 8007bb4:	1b64      	subs	r4, r4, r5
 8007bb6:	10a4      	asrs	r4, r4, #2
 8007bb8:	2600      	movs	r6, #0
 8007bba:	42a6      	cmp	r6, r4
 8007bbc:	d105      	bne.n	8007bca <__libc_init_array+0x2e>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc4:	4798      	blx	r3
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__libc_init_array+0xc>
 8007bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bce:	4798      	blx	r3
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	e7f2      	b.n	8007bba <__libc_init_array+0x1e>
 8007bd4:	08009864 	.word	0x08009864
 8007bd8:	08009864 	.word	0x08009864
 8007bdc:	08009864 	.word	0x08009864
 8007be0:	08009868 	.word	0x08009868

08007be4 <__retarget_lock_init_recursive>:
 8007be4:	4770      	bx	lr

08007be6 <__retarget_lock_acquire_recursive>:
 8007be6:	4770      	bx	lr

08007be8 <__retarget_lock_release_recursive>:
 8007be8:	4770      	bx	lr
	...

08007bec <_free_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4605      	mov	r5, r0
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	d041      	beq.n	8007c78 <_free_r+0x8c>
 8007bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bf8:	1f0c      	subs	r4, r1, #4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfb8      	it	lt
 8007bfe:	18e4      	addlt	r4, r4, r3
 8007c00:	f000 f8e0 	bl	8007dc4 <__malloc_lock>
 8007c04:	4a1d      	ldr	r2, [pc, #116]	@ (8007c7c <_free_r+0x90>)
 8007c06:	6813      	ldr	r3, [r2, #0]
 8007c08:	b933      	cbnz	r3, 8007c18 <_free_r+0x2c>
 8007c0a:	6063      	str	r3, [r4, #4]
 8007c0c:	6014      	str	r4, [r2, #0]
 8007c0e:	4628      	mov	r0, r5
 8007c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c14:	f000 b8dc 	b.w	8007dd0 <__malloc_unlock>
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	d908      	bls.n	8007c2e <_free_r+0x42>
 8007c1c:	6820      	ldr	r0, [r4, #0]
 8007c1e:	1821      	adds	r1, r4, r0
 8007c20:	428b      	cmp	r3, r1
 8007c22:	bf01      	itttt	eq
 8007c24:	6819      	ldreq	r1, [r3, #0]
 8007c26:	685b      	ldreq	r3, [r3, #4]
 8007c28:	1809      	addeq	r1, r1, r0
 8007c2a:	6021      	streq	r1, [r4, #0]
 8007c2c:	e7ed      	b.n	8007c0a <_free_r+0x1e>
 8007c2e:	461a      	mov	r2, r3
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	b10b      	cbz	r3, 8007c38 <_free_r+0x4c>
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	d9fa      	bls.n	8007c2e <_free_r+0x42>
 8007c38:	6811      	ldr	r1, [r2, #0]
 8007c3a:	1850      	adds	r0, r2, r1
 8007c3c:	42a0      	cmp	r0, r4
 8007c3e:	d10b      	bne.n	8007c58 <_free_r+0x6c>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	4401      	add	r1, r0
 8007c44:	1850      	adds	r0, r2, r1
 8007c46:	4283      	cmp	r3, r0
 8007c48:	6011      	str	r1, [r2, #0]
 8007c4a:	d1e0      	bne.n	8007c0e <_free_r+0x22>
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	6053      	str	r3, [r2, #4]
 8007c52:	4408      	add	r0, r1
 8007c54:	6010      	str	r0, [r2, #0]
 8007c56:	e7da      	b.n	8007c0e <_free_r+0x22>
 8007c58:	d902      	bls.n	8007c60 <_free_r+0x74>
 8007c5a:	230c      	movs	r3, #12
 8007c5c:	602b      	str	r3, [r5, #0]
 8007c5e:	e7d6      	b.n	8007c0e <_free_r+0x22>
 8007c60:	6820      	ldr	r0, [r4, #0]
 8007c62:	1821      	adds	r1, r4, r0
 8007c64:	428b      	cmp	r3, r1
 8007c66:	bf04      	itt	eq
 8007c68:	6819      	ldreq	r1, [r3, #0]
 8007c6a:	685b      	ldreq	r3, [r3, #4]
 8007c6c:	6063      	str	r3, [r4, #4]
 8007c6e:	bf04      	itt	eq
 8007c70:	1809      	addeq	r1, r1, r0
 8007c72:	6021      	streq	r1, [r4, #0]
 8007c74:	6054      	str	r4, [r2, #4]
 8007c76:	e7ca      	b.n	8007c0e <_free_r+0x22>
 8007c78:	bd38      	pop	{r3, r4, r5, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20025d60 	.word	0x20025d60

08007c80 <sbrk_aligned>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	4e0f      	ldr	r6, [pc, #60]	@ (8007cc0 <sbrk_aligned+0x40>)
 8007c84:	460c      	mov	r4, r1
 8007c86:	6831      	ldr	r1, [r6, #0]
 8007c88:	4605      	mov	r5, r0
 8007c8a:	b911      	cbnz	r1, 8007c92 <sbrk_aligned+0x12>
 8007c8c:	f000 fca6 	bl	80085dc <_sbrk_r>
 8007c90:	6030      	str	r0, [r6, #0]
 8007c92:	4621      	mov	r1, r4
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 fca1 	bl	80085dc <_sbrk_r>
 8007c9a:	1c43      	adds	r3, r0, #1
 8007c9c:	d103      	bne.n	8007ca6 <sbrk_aligned+0x26>
 8007c9e:	f04f 34ff 	mov.w	r4, #4294967295
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	bd70      	pop	{r4, r5, r6, pc}
 8007ca6:	1cc4      	adds	r4, r0, #3
 8007ca8:	f024 0403 	bic.w	r4, r4, #3
 8007cac:	42a0      	cmp	r0, r4
 8007cae:	d0f8      	beq.n	8007ca2 <sbrk_aligned+0x22>
 8007cb0:	1a21      	subs	r1, r4, r0
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 fc92 	bl	80085dc <_sbrk_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d1f2      	bne.n	8007ca2 <sbrk_aligned+0x22>
 8007cbc:	e7ef      	b.n	8007c9e <sbrk_aligned+0x1e>
 8007cbe:	bf00      	nop
 8007cc0:	20025d5c 	.word	0x20025d5c

08007cc4 <_malloc_r>:
 8007cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cc8:	1ccd      	adds	r5, r1, #3
 8007cca:	f025 0503 	bic.w	r5, r5, #3
 8007cce:	3508      	adds	r5, #8
 8007cd0:	2d0c      	cmp	r5, #12
 8007cd2:	bf38      	it	cc
 8007cd4:	250c      	movcc	r5, #12
 8007cd6:	2d00      	cmp	r5, #0
 8007cd8:	4606      	mov	r6, r0
 8007cda:	db01      	blt.n	8007ce0 <_malloc_r+0x1c>
 8007cdc:	42a9      	cmp	r1, r5
 8007cde:	d904      	bls.n	8007cea <_malloc_r+0x26>
 8007ce0:	230c      	movs	r3, #12
 8007ce2:	6033      	str	r3, [r6, #0]
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007dc0 <_malloc_r+0xfc>
 8007cee:	f000 f869 	bl	8007dc4 <__malloc_lock>
 8007cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cf6:	461c      	mov	r4, r3
 8007cf8:	bb44      	cbnz	r4, 8007d4c <_malloc_r+0x88>
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f7ff ffbf 	bl	8007c80 <sbrk_aligned>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	4604      	mov	r4, r0
 8007d06:	d158      	bne.n	8007dba <_malloc_r+0xf6>
 8007d08:	f8d8 4000 	ldr.w	r4, [r8]
 8007d0c:	4627      	mov	r7, r4
 8007d0e:	2f00      	cmp	r7, #0
 8007d10:	d143      	bne.n	8007d9a <_malloc_r+0xd6>
 8007d12:	2c00      	cmp	r4, #0
 8007d14:	d04b      	beq.n	8007dae <_malloc_r+0xea>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	4639      	mov	r1, r7
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	eb04 0903 	add.w	r9, r4, r3
 8007d20:	f000 fc5c 	bl	80085dc <_sbrk_r>
 8007d24:	4581      	cmp	r9, r0
 8007d26:	d142      	bne.n	8007dae <_malloc_r+0xea>
 8007d28:	6821      	ldr	r1, [r4, #0]
 8007d2a:	1a6d      	subs	r5, r5, r1
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7ff ffa6 	bl	8007c80 <sbrk_aligned>
 8007d34:	3001      	adds	r0, #1
 8007d36:	d03a      	beq.n	8007dae <_malloc_r+0xea>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	442b      	add	r3, r5
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	bb62      	cbnz	r2, 8007da0 <_malloc_r+0xdc>
 8007d46:	f8c8 7000 	str.w	r7, [r8]
 8007d4a:	e00f      	b.n	8007d6c <_malloc_r+0xa8>
 8007d4c:	6822      	ldr	r2, [r4, #0]
 8007d4e:	1b52      	subs	r2, r2, r5
 8007d50:	d420      	bmi.n	8007d94 <_malloc_r+0xd0>
 8007d52:	2a0b      	cmp	r2, #11
 8007d54:	d917      	bls.n	8007d86 <_malloc_r+0xc2>
 8007d56:	1961      	adds	r1, r4, r5
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	6025      	str	r5, [r4, #0]
 8007d5c:	bf18      	it	ne
 8007d5e:	6059      	strne	r1, [r3, #4]
 8007d60:	6863      	ldr	r3, [r4, #4]
 8007d62:	bf08      	it	eq
 8007d64:	f8c8 1000 	streq.w	r1, [r8]
 8007d68:	5162      	str	r2, [r4, r5]
 8007d6a:	604b      	str	r3, [r1, #4]
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 f82f 	bl	8007dd0 <__malloc_unlock>
 8007d72:	f104 000b 	add.w	r0, r4, #11
 8007d76:	1d23      	adds	r3, r4, #4
 8007d78:	f020 0007 	bic.w	r0, r0, #7
 8007d7c:	1ac2      	subs	r2, r0, r3
 8007d7e:	bf1c      	itt	ne
 8007d80:	1a1b      	subne	r3, r3, r0
 8007d82:	50a3      	strne	r3, [r4, r2]
 8007d84:	e7af      	b.n	8007ce6 <_malloc_r+0x22>
 8007d86:	6862      	ldr	r2, [r4, #4]
 8007d88:	42a3      	cmp	r3, r4
 8007d8a:	bf0c      	ite	eq
 8007d8c:	f8c8 2000 	streq.w	r2, [r8]
 8007d90:	605a      	strne	r2, [r3, #4]
 8007d92:	e7eb      	b.n	8007d6c <_malloc_r+0xa8>
 8007d94:	4623      	mov	r3, r4
 8007d96:	6864      	ldr	r4, [r4, #4]
 8007d98:	e7ae      	b.n	8007cf8 <_malloc_r+0x34>
 8007d9a:	463c      	mov	r4, r7
 8007d9c:	687f      	ldr	r7, [r7, #4]
 8007d9e:	e7b6      	b.n	8007d0e <_malloc_r+0x4a>
 8007da0:	461a      	mov	r2, r3
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	42a3      	cmp	r3, r4
 8007da6:	d1fb      	bne.n	8007da0 <_malloc_r+0xdc>
 8007da8:	2300      	movs	r3, #0
 8007daa:	6053      	str	r3, [r2, #4]
 8007dac:	e7de      	b.n	8007d6c <_malloc_r+0xa8>
 8007dae:	230c      	movs	r3, #12
 8007db0:	6033      	str	r3, [r6, #0]
 8007db2:	4630      	mov	r0, r6
 8007db4:	f000 f80c 	bl	8007dd0 <__malloc_unlock>
 8007db8:	e794      	b.n	8007ce4 <_malloc_r+0x20>
 8007dba:	6005      	str	r5, [r0, #0]
 8007dbc:	e7d6      	b.n	8007d6c <_malloc_r+0xa8>
 8007dbe:	bf00      	nop
 8007dc0:	20025d60 	.word	0x20025d60

08007dc4 <__malloc_lock>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	@ (8007dcc <__malloc_lock+0x8>)
 8007dc6:	f7ff bf0e 	b.w	8007be6 <__retarget_lock_acquire_recursive>
 8007dca:	bf00      	nop
 8007dcc:	20025d58 	.word	0x20025d58

08007dd0 <__malloc_unlock>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	@ (8007dd8 <__malloc_unlock+0x8>)
 8007dd2:	f7ff bf09 	b.w	8007be8 <__retarget_lock_release_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	20025d58 	.word	0x20025d58

08007ddc <__sfputc_r>:
 8007ddc:	6893      	ldr	r3, [r2, #8]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	b410      	push	{r4}
 8007de4:	6093      	str	r3, [r2, #8]
 8007de6:	da08      	bge.n	8007dfa <__sfputc_r+0x1e>
 8007de8:	6994      	ldr	r4, [r2, #24]
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	db01      	blt.n	8007df2 <__sfputc_r+0x16>
 8007dee:	290a      	cmp	r1, #10
 8007df0:	d103      	bne.n	8007dfa <__sfputc_r+0x1e>
 8007df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df6:	f7ff bde8 	b.w	80079ca <__swbuf_r>
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	1c58      	adds	r0, r3, #1
 8007dfe:	6010      	str	r0, [r2, #0]
 8007e00:	7019      	strb	r1, [r3, #0]
 8007e02:	4608      	mov	r0, r1
 8007e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <__sfputs_r>:
 8007e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	460f      	mov	r7, r1
 8007e10:	4614      	mov	r4, r2
 8007e12:	18d5      	adds	r5, r2, r3
 8007e14:	42ac      	cmp	r4, r5
 8007e16:	d101      	bne.n	8007e1c <__sfputs_r+0x12>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e007      	b.n	8007e2c <__sfputs_r+0x22>
 8007e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e20:	463a      	mov	r2, r7
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffda 	bl	8007ddc <__sfputc_r>
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	d1f3      	bne.n	8007e14 <__sfputs_r+0xa>
 8007e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e30 <_vfiprintf_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	460d      	mov	r5, r1
 8007e36:	b09d      	sub	sp, #116	@ 0x74
 8007e38:	4614      	mov	r4, r2
 8007e3a:	4698      	mov	r8, r3
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	b118      	cbz	r0, 8007e48 <_vfiprintf_r+0x18>
 8007e40:	6a03      	ldr	r3, [r0, #32]
 8007e42:	b90b      	cbnz	r3, 8007e48 <_vfiprintf_r+0x18>
 8007e44:	f7ff fcd8 	bl	80077f8 <__sinit>
 8007e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e4a:	07d9      	lsls	r1, r3, #31
 8007e4c:	d405      	bmi.n	8007e5a <_vfiprintf_r+0x2a>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	059a      	lsls	r2, r3, #22
 8007e52:	d402      	bmi.n	8007e5a <_vfiprintf_r+0x2a>
 8007e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e56:	f7ff fec6 	bl	8007be6 <__retarget_lock_acquire_recursive>
 8007e5a:	89ab      	ldrh	r3, [r5, #12]
 8007e5c:	071b      	lsls	r3, r3, #28
 8007e5e:	d501      	bpl.n	8007e64 <_vfiprintf_r+0x34>
 8007e60:	692b      	ldr	r3, [r5, #16]
 8007e62:	b99b      	cbnz	r3, 8007e8c <_vfiprintf_r+0x5c>
 8007e64:	4629      	mov	r1, r5
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff fdee 	bl	8007a48 <__swsetup_r>
 8007e6c:	b170      	cbz	r0, 8007e8c <_vfiprintf_r+0x5c>
 8007e6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e70:	07dc      	lsls	r4, r3, #31
 8007e72:	d504      	bpl.n	8007e7e <_vfiprintf_r+0x4e>
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	b01d      	add	sp, #116	@ 0x74
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	89ab      	ldrh	r3, [r5, #12]
 8007e80:	0598      	lsls	r0, r3, #22
 8007e82:	d4f7      	bmi.n	8007e74 <_vfiprintf_r+0x44>
 8007e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e86:	f7ff feaf 	bl	8007be8 <__retarget_lock_release_recursive>
 8007e8a:	e7f3      	b.n	8007e74 <_vfiprintf_r+0x44>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e90:	2320      	movs	r3, #32
 8007e92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e9a:	2330      	movs	r3, #48	@ 0x30
 8007e9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800804c <_vfiprintf_r+0x21c>
 8007ea0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ea4:	f04f 0901 	mov.w	r9, #1
 8007ea8:	4623      	mov	r3, r4
 8007eaa:	469a      	mov	sl, r3
 8007eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb0:	b10a      	cbz	r2, 8007eb6 <_vfiprintf_r+0x86>
 8007eb2:	2a25      	cmp	r2, #37	@ 0x25
 8007eb4:	d1f9      	bne.n	8007eaa <_vfiprintf_r+0x7a>
 8007eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eba:	d00b      	beq.n	8007ed4 <_vfiprintf_r+0xa4>
 8007ebc:	465b      	mov	r3, fp
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7ff ffa1 	bl	8007e0a <__sfputs_r>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	f000 80a7 	beq.w	800801c <_vfiprintf_r+0x1ec>
 8007ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed0:	445a      	add	r2, fp
 8007ed2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 809f 	beq.w	800801c <_vfiprintf_r+0x1ec>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee8:	f10a 0a01 	add.w	sl, sl, #1
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	9307      	str	r3, [sp, #28]
 8007ef0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ef4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ef6:	4654      	mov	r4, sl
 8007ef8:	2205      	movs	r2, #5
 8007efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007efe:	4853      	ldr	r0, [pc, #332]	@ (800804c <_vfiprintf_r+0x21c>)
 8007f00:	f7f8 f976 	bl	80001f0 <memchr>
 8007f04:	9a04      	ldr	r2, [sp, #16]
 8007f06:	b9d8      	cbnz	r0, 8007f40 <_vfiprintf_r+0x110>
 8007f08:	06d1      	lsls	r1, r2, #27
 8007f0a:	bf44      	itt	mi
 8007f0c:	2320      	movmi	r3, #32
 8007f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f12:	0713      	lsls	r3, r2, #28
 8007f14:	bf44      	itt	mi
 8007f16:	232b      	movmi	r3, #43	@ 0x2b
 8007f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f22:	d015      	beq.n	8007f50 <_vfiprintf_r+0x120>
 8007f24:	9a07      	ldr	r2, [sp, #28]
 8007f26:	4654      	mov	r4, sl
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f04f 0c0a 	mov.w	ip, #10
 8007f2e:	4621      	mov	r1, r4
 8007f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f34:	3b30      	subs	r3, #48	@ 0x30
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d94b      	bls.n	8007fd2 <_vfiprintf_r+0x1a2>
 8007f3a:	b1b0      	cbz	r0, 8007f6a <_vfiprintf_r+0x13a>
 8007f3c:	9207      	str	r2, [sp, #28]
 8007f3e:	e014      	b.n	8007f6a <_vfiprintf_r+0x13a>
 8007f40:	eba0 0308 	sub.w	r3, r0, r8
 8007f44:	fa09 f303 	lsl.w	r3, r9, r3
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	46a2      	mov	sl, r4
 8007f4e:	e7d2      	b.n	8007ef6 <_vfiprintf_r+0xc6>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	1d19      	adds	r1, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	9103      	str	r1, [sp, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bfbb      	ittet	lt
 8007f5c:	425b      	neglt	r3, r3
 8007f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f62:	9307      	strge	r3, [sp, #28]
 8007f64:	9307      	strlt	r3, [sp, #28]
 8007f66:	bfb8      	it	lt
 8007f68:	9204      	strlt	r2, [sp, #16]
 8007f6a:	7823      	ldrb	r3, [r4, #0]
 8007f6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f6e:	d10a      	bne.n	8007f86 <_vfiprintf_r+0x156>
 8007f70:	7863      	ldrb	r3, [r4, #1]
 8007f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f74:	d132      	bne.n	8007fdc <_vfiprintf_r+0x1ac>
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	1d1a      	adds	r2, r3, #4
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	9203      	str	r2, [sp, #12]
 8007f7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f82:	3402      	adds	r4, #2
 8007f84:	9305      	str	r3, [sp, #20]
 8007f86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800805c <_vfiprintf_r+0x22c>
 8007f8a:	7821      	ldrb	r1, [r4, #0]
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	4650      	mov	r0, sl
 8007f90:	f7f8 f92e 	bl	80001f0 <memchr>
 8007f94:	b138      	cbz	r0, 8007fa6 <_vfiprintf_r+0x176>
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	eba0 000a 	sub.w	r0, r0, sl
 8007f9c:	2240      	movs	r2, #64	@ 0x40
 8007f9e:	4082      	lsls	r2, r0
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	3401      	adds	r4, #1
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007faa:	4829      	ldr	r0, [pc, #164]	@ (8008050 <_vfiprintf_r+0x220>)
 8007fac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fb0:	2206      	movs	r2, #6
 8007fb2:	f7f8 f91d 	bl	80001f0 <memchr>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d03f      	beq.n	800803a <_vfiprintf_r+0x20a>
 8007fba:	4b26      	ldr	r3, [pc, #152]	@ (8008054 <_vfiprintf_r+0x224>)
 8007fbc:	bb1b      	cbnz	r3, 8008006 <_vfiprintf_r+0x1d6>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	f023 0307 	bic.w	r3, r3, #7
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fcc:	443b      	add	r3, r7
 8007fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fd0:	e76a      	b.n	8007ea8 <_vfiprintf_r+0x78>
 8007fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	2001      	movs	r0, #1
 8007fda:	e7a8      	b.n	8007f2e <_vfiprintf_r+0xfe>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	3401      	adds	r4, #1
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f04f 0c0a 	mov.w	ip, #10
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fee:	3a30      	subs	r2, #48	@ 0x30
 8007ff0:	2a09      	cmp	r2, #9
 8007ff2:	d903      	bls.n	8007ffc <_vfiprintf_r+0x1cc>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0c6      	beq.n	8007f86 <_vfiprintf_r+0x156>
 8007ff8:	9105      	str	r1, [sp, #20]
 8007ffa:	e7c4      	b.n	8007f86 <_vfiprintf_r+0x156>
 8007ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008000:	4604      	mov	r4, r0
 8008002:	2301      	movs	r3, #1
 8008004:	e7f0      	b.n	8007fe8 <_vfiprintf_r+0x1b8>
 8008006:	ab03      	add	r3, sp, #12
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	462a      	mov	r2, r5
 800800c:	4b12      	ldr	r3, [pc, #72]	@ (8008058 <_vfiprintf_r+0x228>)
 800800e:	a904      	add	r1, sp, #16
 8008010:	4630      	mov	r0, r6
 8008012:	f3af 8000 	nop.w
 8008016:	4607      	mov	r7, r0
 8008018:	1c78      	adds	r0, r7, #1
 800801a:	d1d6      	bne.n	8007fca <_vfiprintf_r+0x19a>
 800801c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800801e:	07d9      	lsls	r1, r3, #31
 8008020:	d405      	bmi.n	800802e <_vfiprintf_r+0x1fe>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d402      	bmi.n	800802e <_vfiprintf_r+0x1fe>
 8008028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800802a:	f7ff fddd 	bl	8007be8 <__retarget_lock_release_recursive>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	065b      	lsls	r3, r3, #25
 8008032:	f53f af1f 	bmi.w	8007e74 <_vfiprintf_r+0x44>
 8008036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008038:	e71e      	b.n	8007e78 <_vfiprintf_r+0x48>
 800803a:	ab03      	add	r3, sp, #12
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	462a      	mov	r2, r5
 8008040:	4b05      	ldr	r3, [pc, #20]	@ (8008058 <_vfiprintf_r+0x228>)
 8008042:	a904      	add	r1, sp, #16
 8008044:	4630      	mov	r0, r6
 8008046:	f000 f879 	bl	800813c <_printf_i>
 800804a:	e7e4      	b.n	8008016 <_vfiprintf_r+0x1e6>
 800804c:	08009828 	.word	0x08009828
 8008050:	08009832 	.word	0x08009832
 8008054:	00000000 	.word	0x00000000
 8008058:	08007e0b 	.word	0x08007e0b
 800805c:	0800982e 	.word	0x0800982e

08008060 <_printf_common>:
 8008060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008064:	4616      	mov	r6, r2
 8008066:	4698      	mov	r8, r3
 8008068:	688a      	ldr	r2, [r1, #8]
 800806a:	690b      	ldr	r3, [r1, #16]
 800806c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008070:	4293      	cmp	r3, r2
 8008072:	bfb8      	it	lt
 8008074:	4613      	movlt	r3, r2
 8008076:	6033      	str	r3, [r6, #0]
 8008078:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800807c:	4607      	mov	r7, r0
 800807e:	460c      	mov	r4, r1
 8008080:	b10a      	cbz	r2, 8008086 <_printf_common+0x26>
 8008082:	3301      	adds	r3, #1
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	0699      	lsls	r1, r3, #26
 800808a:	bf42      	ittt	mi
 800808c:	6833      	ldrmi	r3, [r6, #0]
 800808e:	3302      	addmi	r3, #2
 8008090:	6033      	strmi	r3, [r6, #0]
 8008092:	6825      	ldr	r5, [r4, #0]
 8008094:	f015 0506 	ands.w	r5, r5, #6
 8008098:	d106      	bne.n	80080a8 <_printf_common+0x48>
 800809a:	f104 0a19 	add.w	sl, r4, #25
 800809e:	68e3      	ldr	r3, [r4, #12]
 80080a0:	6832      	ldr	r2, [r6, #0]
 80080a2:	1a9b      	subs	r3, r3, r2
 80080a4:	42ab      	cmp	r3, r5
 80080a6:	dc26      	bgt.n	80080f6 <_printf_common+0x96>
 80080a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	3b00      	subs	r3, #0
 80080b0:	bf18      	it	ne
 80080b2:	2301      	movne	r3, #1
 80080b4:	0692      	lsls	r2, r2, #26
 80080b6:	d42b      	bmi.n	8008110 <_printf_common+0xb0>
 80080b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080bc:	4641      	mov	r1, r8
 80080be:	4638      	mov	r0, r7
 80080c0:	47c8      	blx	r9
 80080c2:	3001      	adds	r0, #1
 80080c4:	d01e      	beq.n	8008104 <_printf_common+0xa4>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	6922      	ldr	r2, [r4, #16]
 80080ca:	f003 0306 	and.w	r3, r3, #6
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	bf02      	ittt	eq
 80080d2:	68e5      	ldreq	r5, [r4, #12]
 80080d4:	6833      	ldreq	r3, [r6, #0]
 80080d6:	1aed      	subeq	r5, r5, r3
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	bf0c      	ite	eq
 80080dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e0:	2500      	movne	r5, #0
 80080e2:	4293      	cmp	r3, r2
 80080e4:	bfc4      	itt	gt
 80080e6:	1a9b      	subgt	r3, r3, r2
 80080e8:	18ed      	addgt	r5, r5, r3
 80080ea:	2600      	movs	r6, #0
 80080ec:	341a      	adds	r4, #26
 80080ee:	42b5      	cmp	r5, r6
 80080f0:	d11a      	bne.n	8008128 <_printf_common+0xc8>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e008      	b.n	8008108 <_printf_common+0xa8>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4652      	mov	r2, sl
 80080fa:	4641      	mov	r1, r8
 80080fc:	4638      	mov	r0, r7
 80080fe:	47c8      	blx	r9
 8008100:	3001      	adds	r0, #1
 8008102:	d103      	bne.n	800810c <_printf_common+0xac>
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810c:	3501      	adds	r5, #1
 800810e:	e7c6      	b.n	800809e <_printf_common+0x3e>
 8008110:	18e1      	adds	r1, r4, r3
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	2030      	movs	r0, #48	@ 0x30
 8008116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800811a:	4422      	add	r2, r4
 800811c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008120:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008124:	3302      	adds	r3, #2
 8008126:	e7c7      	b.n	80080b8 <_printf_common+0x58>
 8008128:	2301      	movs	r3, #1
 800812a:	4622      	mov	r2, r4
 800812c:	4641      	mov	r1, r8
 800812e:	4638      	mov	r0, r7
 8008130:	47c8      	blx	r9
 8008132:	3001      	adds	r0, #1
 8008134:	d0e6      	beq.n	8008104 <_printf_common+0xa4>
 8008136:	3601      	adds	r6, #1
 8008138:	e7d9      	b.n	80080ee <_printf_common+0x8e>
	...

0800813c <_printf_i>:
 800813c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008140:	7e0f      	ldrb	r7, [r1, #24]
 8008142:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008144:	2f78      	cmp	r7, #120	@ 0x78
 8008146:	4691      	mov	r9, r2
 8008148:	4680      	mov	r8, r0
 800814a:	460c      	mov	r4, r1
 800814c:	469a      	mov	sl, r3
 800814e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008152:	d807      	bhi.n	8008164 <_printf_i+0x28>
 8008154:	2f62      	cmp	r7, #98	@ 0x62
 8008156:	d80a      	bhi.n	800816e <_printf_i+0x32>
 8008158:	2f00      	cmp	r7, #0
 800815a:	f000 80d2 	beq.w	8008302 <_printf_i+0x1c6>
 800815e:	2f58      	cmp	r7, #88	@ 0x58
 8008160:	f000 80b9 	beq.w	80082d6 <_printf_i+0x19a>
 8008164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800816c:	e03a      	b.n	80081e4 <_printf_i+0xa8>
 800816e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008172:	2b15      	cmp	r3, #21
 8008174:	d8f6      	bhi.n	8008164 <_printf_i+0x28>
 8008176:	a101      	add	r1, pc, #4	@ (adr r1, 800817c <_printf_i+0x40>)
 8008178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800817c:	080081d5 	.word	0x080081d5
 8008180:	080081e9 	.word	0x080081e9
 8008184:	08008165 	.word	0x08008165
 8008188:	08008165 	.word	0x08008165
 800818c:	08008165 	.word	0x08008165
 8008190:	08008165 	.word	0x08008165
 8008194:	080081e9 	.word	0x080081e9
 8008198:	08008165 	.word	0x08008165
 800819c:	08008165 	.word	0x08008165
 80081a0:	08008165 	.word	0x08008165
 80081a4:	08008165 	.word	0x08008165
 80081a8:	080082e9 	.word	0x080082e9
 80081ac:	08008213 	.word	0x08008213
 80081b0:	080082a3 	.word	0x080082a3
 80081b4:	08008165 	.word	0x08008165
 80081b8:	08008165 	.word	0x08008165
 80081bc:	0800830b 	.word	0x0800830b
 80081c0:	08008165 	.word	0x08008165
 80081c4:	08008213 	.word	0x08008213
 80081c8:	08008165 	.word	0x08008165
 80081cc:	08008165 	.word	0x08008165
 80081d0:	080082ab 	.word	0x080082ab
 80081d4:	6833      	ldr	r3, [r6, #0]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6032      	str	r2, [r6, #0]
 80081dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081e4:	2301      	movs	r3, #1
 80081e6:	e09d      	b.n	8008324 <_printf_i+0x1e8>
 80081e8:	6833      	ldr	r3, [r6, #0]
 80081ea:	6820      	ldr	r0, [r4, #0]
 80081ec:	1d19      	adds	r1, r3, #4
 80081ee:	6031      	str	r1, [r6, #0]
 80081f0:	0606      	lsls	r6, r0, #24
 80081f2:	d501      	bpl.n	80081f8 <_printf_i+0xbc>
 80081f4:	681d      	ldr	r5, [r3, #0]
 80081f6:	e003      	b.n	8008200 <_printf_i+0xc4>
 80081f8:	0645      	lsls	r5, r0, #25
 80081fa:	d5fb      	bpl.n	80081f4 <_printf_i+0xb8>
 80081fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008200:	2d00      	cmp	r5, #0
 8008202:	da03      	bge.n	800820c <_printf_i+0xd0>
 8008204:	232d      	movs	r3, #45	@ 0x2d
 8008206:	426d      	negs	r5, r5
 8008208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800820c:	4859      	ldr	r0, [pc, #356]	@ (8008374 <_printf_i+0x238>)
 800820e:	230a      	movs	r3, #10
 8008210:	e011      	b.n	8008236 <_printf_i+0xfa>
 8008212:	6821      	ldr	r1, [r4, #0]
 8008214:	6833      	ldr	r3, [r6, #0]
 8008216:	0608      	lsls	r0, r1, #24
 8008218:	f853 5b04 	ldr.w	r5, [r3], #4
 800821c:	d402      	bmi.n	8008224 <_printf_i+0xe8>
 800821e:	0649      	lsls	r1, r1, #25
 8008220:	bf48      	it	mi
 8008222:	b2ad      	uxthmi	r5, r5
 8008224:	2f6f      	cmp	r7, #111	@ 0x6f
 8008226:	4853      	ldr	r0, [pc, #332]	@ (8008374 <_printf_i+0x238>)
 8008228:	6033      	str	r3, [r6, #0]
 800822a:	bf14      	ite	ne
 800822c:	230a      	movne	r3, #10
 800822e:	2308      	moveq	r3, #8
 8008230:	2100      	movs	r1, #0
 8008232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008236:	6866      	ldr	r6, [r4, #4]
 8008238:	60a6      	str	r6, [r4, #8]
 800823a:	2e00      	cmp	r6, #0
 800823c:	bfa2      	ittt	ge
 800823e:	6821      	ldrge	r1, [r4, #0]
 8008240:	f021 0104 	bicge.w	r1, r1, #4
 8008244:	6021      	strge	r1, [r4, #0]
 8008246:	b90d      	cbnz	r5, 800824c <_printf_i+0x110>
 8008248:	2e00      	cmp	r6, #0
 800824a:	d04b      	beq.n	80082e4 <_printf_i+0x1a8>
 800824c:	4616      	mov	r6, r2
 800824e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008252:	fb03 5711 	mls	r7, r3, r1, r5
 8008256:	5dc7      	ldrb	r7, [r0, r7]
 8008258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800825c:	462f      	mov	r7, r5
 800825e:	42bb      	cmp	r3, r7
 8008260:	460d      	mov	r5, r1
 8008262:	d9f4      	bls.n	800824e <_printf_i+0x112>
 8008264:	2b08      	cmp	r3, #8
 8008266:	d10b      	bne.n	8008280 <_printf_i+0x144>
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	07df      	lsls	r7, r3, #31
 800826c:	d508      	bpl.n	8008280 <_printf_i+0x144>
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	6861      	ldr	r1, [r4, #4]
 8008272:	4299      	cmp	r1, r3
 8008274:	bfde      	ittt	le
 8008276:	2330      	movle	r3, #48	@ 0x30
 8008278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800827c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008280:	1b92      	subs	r2, r2, r6
 8008282:	6122      	str	r2, [r4, #16]
 8008284:	f8cd a000 	str.w	sl, [sp]
 8008288:	464b      	mov	r3, r9
 800828a:	aa03      	add	r2, sp, #12
 800828c:	4621      	mov	r1, r4
 800828e:	4640      	mov	r0, r8
 8008290:	f7ff fee6 	bl	8008060 <_printf_common>
 8008294:	3001      	adds	r0, #1
 8008296:	d14a      	bne.n	800832e <_printf_i+0x1f2>
 8008298:	f04f 30ff 	mov.w	r0, #4294967295
 800829c:	b004      	add	sp, #16
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	f043 0320 	orr.w	r3, r3, #32
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	4833      	ldr	r0, [pc, #204]	@ (8008378 <_printf_i+0x23c>)
 80082ac:	2778      	movs	r7, #120	@ 0x78
 80082ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	6831      	ldr	r1, [r6, #0]
 80082b6:	061f      	lsls	r7, r3, #24
 80082b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80082bc:	d402      	bmi.n	80082c4 <_printf_i+0x188>
 80082be:	065f      	lsls	r7, r3, #25
 80082c0:	bf48      	it	mi
 80082c2:	b2ad      	uxthmi	r5, r5
 80082c4:	6031      	str	r1, [r6, #0]
 80082c6:	07d9      	lsls	r1, r3, #31
 80082c8:	bf44      	itt	mi
 80082ca:	f043 0320 	orrmi.w	r3, r3, #32
 80082ce:	6023      	strmi	r3, [r4, #0]
 80082d0:	b11d      	cbz	r5, 80082da <_printf_i+0x19e>
 80082d2:	2310      	movs	r3, #16
 80082d4:	e7ac      	b.n	8008230 <_printf_i+0xf4>
 80082d6:	4827      	ldr	r0, [pc, #156]	@ (8008374 <_printf_i+0x238>)
 80082d8:	e7e9      	b.n	80082ae <_printf_i+0x172>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	f023 0320 	bic.w	r3, r3, #32
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	e7f6      	b.n	80082d2 <_printf_i+0x196>
 80082e4:	4616      	mov	r6, r2
 80082e6:	e7bd      	b.n	8008264 <_printf_i+0x128>
 80082e8:	6833      	ldr	r3, [r6, #0]
 80082ea:	6825      	ldr	r5, [r4, #0]
 80082ec:	6961      	ldr	r1, [r4, #20]
 80082ee:	1d18      	adds	r0, r3, #4
 80082f0:	6030      	str	r0, [r6, #0]
 80082f2:	062e      	lsls	r6, r5, #24
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	d501      	bpl.n	80082fc <_printf_i+0x1c0>
 80082f8:	6019      	str	r1, [r3, #0]
 80082fa:	e002      	b.n	8008302 <_printf_i+0x1c6>
 80082fc:	0668      	lsls	r0, r5, #25
 80082fe:	d5fb      	bpl.n	80082f8 <_printf_i+0x1bc>
 8008300:	8019      	strh	r1, [r3, #0]
 8008302:	2300      	movs	r3, #0
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	4616      	mov	r6, r2
 8008308:	e7bc      	b.n	8008284 <_printf_i+0x148>
 800830a:	6833      	ldr	r3, [r6, #0]
 800830c:	1d1a      	adds	r2, r3, #4
 800830e:	6032      	str	r2, [r6, #0]
 8008310:	681e      	ldr	r6, [r3, #0]
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	2100      	movs	r1, #0
 8008316:	4630      	mov	r0, r6
 8008318:	f7f7 ff6a 	bl	80001f0 <memchr>
 800831c:	b108      	cbz	r0, 8008322 <_printf_i+0x1e6>
 800831e:	1b80      	subs	r0, r0, r6
 8008320:	6060      	str	r0, [r4, #4]
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	6123      	str	r3, [r4, #16]
 8008326:	2300      	movs	r3, #0
 8008328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800832c:	e7aa      	b.n	8008284 <_printf_i+0x148>
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	4632      	mov	r2, r6
 8008332:	4649      	mov	r1, r9
 8008334:	4640      	mov	r0, r8
 8008336:	47d0      	blx	sl
 8008338:	3001      	adds	r0, #1
 800833a:	d0ad      	beq.n	8008298 <_printf_i+0x15c>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	079b      	lsls	r3, r3, #30
 8008340:	d413      	bmi.n	800836a <_printf_i+0x22e>
 8008342:	68e0      	ldr	r0, [r4, #12]
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	4298      	cmp	r0, r3
 8008348:	bfb8      	it	lt
 800834a:	4618      	movlt	r0, r3
 800834c:	e7a6      	b.n	800829c <_printf_i+0x160>
 800834e:	2301      	movs	r3, #1
 8008350:	4632      	mov	r2, r6
 8008352:	4649      	mov	r1, r9
 8008354:	4640      	mov	r0, r8
 8008356:	47d0      	blx	sl
 8008358:	3001      	adds	r0, #1
 800835a:	d09d      	beq.n	8008298 <_printf_i+0x15c>
 800835c:	3501      	adds	r5, #1
 800835e:	68e3      	ldr	r3, [r4, #12]
 8008360:	9903      	ldr	r1, [sp, #12]
 8008362:	1a5b      	subs	r3, r3, r1
 8008364:	42ab      	cmp	r3, r5
 8008366:	dcf2      	bgt.n	800834e <_printf_i+0x212>
 8008368:	e7eb      	b.n	8008342 <_printf_i+0x206>
 800836a:	2500      	movs	r5, #0
 800836c:	f104 0619 	add.w	r6, r4, #25
 8008370:	e7f5      	b.n	800835e <_printf_i+0x222>
 8008372:	bf00      	nop
 8008374:	08009839 	.word	0x08009839
 8008378:	0800984a 	.word	0x0800984a

0800837c <__sflush_r>:
 800837c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	0716      	lsls	r6, r2, #28
 8008386:	4605      	mov	r5, r0
 8008388:	460c      	mov	r4, r1
 800838a:	d454      	bmi.n	8008436 <__sflush_r+0xba>
 800838c:	684b      	ldr	r3, [r1, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	dc02      	bgt.n	8008398 <__sflush_r+0x1c>
 8008392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	dd48      	ble.n	800842a <__sflush_r+0xae>
 8008398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800839a:	2e00      	cmp	r6, #0
 800839c:	d045      	beq.n	800842a <__sflush_r+0xae>
 800839e:	2300      	movs	r3, #0
 80083a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083a4:	682f      	ldr	r7, [r5, #0]
 80083a6:	6a21      	ldr	r1, [r4, #32]
 80083a8:	602b      	str	r3, [r5, #0]
 80083aa:	d030      	beq.n	800840e <__sflush_r+0x92>
 80083ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	0759      	lsls	r1, r3, #29
 80083b2:	d505      	bpl.n	80083c0 <__sflush_r+0x44>
 80083b4:	6863      	ldr	r3, [r4, #4]
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083ba:	b10b      	cbz	r3, 80083c0 <__sflush_r+0x44>
 80083bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	2300      	movs	r3, #0
 80083c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b0      	blx	r6
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	d106      	bne.n	80083de <__sflush_r+0x62>
 80083d0:	6829      	ldr	r1, [r5, #0]
 80083d2:	291d      	cmp	r1, #29
 80083d4:	d82b      	bhi.n	800842e <__sflush_r+0xb2>
 80083d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008480 <__sflush_r+0x104>)
 80083d8:	410a      	asrs	r2, r1
 80083da:	07d6      	lsls	r6, r2, #31
 80083dc:	d427      	bmi.n	800842e <__sflush_r+0xb2>
 80083de:	2200      	movs	r2, #0
 80083e0:	6062      	str	r2, [r4, #4]
 80083e2:	04d9      	lsls	r1, r3, #19
 80083e4:	6922      	ldr	r2, [r4, #16]
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	d504      	bpl.n	80083f4 <__sflush_r+0x78>
 80083ea:	1c42      	adds	r2, r0, #1
 80083ec:	d101      	bne.n	80083f2 <__sflush_r+0x76>
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	b903      	cbnz	r3, 80083f4 <__sflush_r+0x78>
 80083f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80083f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f6:	602f      	str	r7, [r5, #0]
 80083f8:	b1b9      	cbz	r1, 800842a <__sflush_r+0xae>
 80083fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083fe:	4299      	cmp	r1, r3
 8008400:	d002      	beq.n	8008408 <__sflush_r+0x8c>
 8008402:	4628      	mov	r0, r5
 8008404:	f7ff fbf2 	bl	8007bec <_free_r>
 8008408:	2300      	movs	r3, #0
 800840a:	6363      	str	r3, [r4, #52]	@ 0x34
 800840c:	e00d      	b.n	800842a <__sflush_r+0xae>
 800840e:	2301      	movs	r3, #1
 8008410:	4628      	mov	r0, r5
 8008412:	47b0      	blx	r6
 8008414:	4602      	mov	r2, r0
 8008416:	1c50      	adds	r0, r2, #1
 8008418:	d1c9      	bne.n	80083ae <__sflush_r+0x32>
 800841a:	682b      	ldr	r3, [r5, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0c6      	beq.n	80083ae <__sflush_r+0x32>
 8008420:	2b1d      	cmp	r3, #29
 8008422:	d001      	beq.n	8008428 <__sflush_r+0xac>
 8008424:	2b16      	cmp	r3, #22
 8008426:	d11e      	bne.n	8008466 <__sflush_r+0xea>
 8008428:	602f      	str	r7, [r5, #0]
 800842a:	2000      	movs	r0, #0
 800842c:	e022      	b.n	8008474 <__sflush_r+0xf8>
 800842e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008432:	b21b      	sxth	r3, r3
 8008434:	e01b      	b.n	800846e <__sflush_r+0xf2>
 8008436:	690f      	ldr	r7, [r1, #16]
 8008438:	2f00      	cmp	r7, #0
 800843a:	d0f6      	beq.n	800842a <__sflush_r+0xae>
 800843c:	0793      	lsls	r3, r2, #30
 800843e:	680e      	ldr	r6, [r1, #0]
 8008440:	bf08      	it	eq
 8008442:	694b      	ldreq	r3, [r1, #20]
 8008444:	600f      	str	r7, [r1, #0]
 8008446:	bf18      	it	ne
 8008448:	2300      	movne	r3, #0
 800844a:	eba6 0807 	sub.w	r8, r6, r7
 800844e:	608b      	str	r3, [r1, #8]
 8008450:	f1b8 0f00 	cmp.w	r8, #0
 8008454:	dde9      	ble.n	800842a <__sflush_r+0xae>
 8008456:	6a21      	ldr	r1, [r4, #32]
 8008458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800845a:	4643      	mov	r3, r8
 800845c:	463a      	mov	r2, r7
 800845e:	4628      	mov	r0, r5
 8008460:	47b0      	blx	r6
 8008462:	2800      	cmp	r0, #0
 8008464:	dc08      	bgt.n	8008478 <__sflush_r+0xfc>
 8008466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008478:	4407      	add	r7, r0
 800847a:	eba8 0800 	sub.w	r8, r8, r0
 800847e:	e7e7      	b.n	8008450 <__sflush_r+0xd4>
 8008480:	dfbffffe 	.word	0xdfbffffe

08008484 <_fflush_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	4605      	mov	r5, r0
 800848a:	460c      	mov	r4, r1
 800848c:	b913      	cbnz	r3, 8008494 <_fflush_r+0x10>
 800848e:	2500      	movs	r5, #0
 8008490:	4628      	mov	r0, r5
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	b118      	cbz	r0, 800849e <_fflush_r+0x1a>
 8008496:	6a03      	ldr	r3, [r0, #32]
 8008498:	b90b      	cbnz	r3, 800849e <_fflush_r+0x1a>
 800849a:	f7ff f9ad 	bl	80077f8 <__sinit>
 800849e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f3      	beq.n	800848e <_fflush_r+0xa>
 80084a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084a8:	07d0      	lsls	r0, r2, #31
 80084aa:	d404      	bmi.n	80084b6 <_fflush_r+0x32>
 80084ac:	0599      	lsls	r1, r3, #22
 80084ae:	d402      	bmi.n	80084b6 <_fflush_r+0x32>
 80084b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084b2:	f7ff fb98 	bl	8007be6 <__retarget_lock_acquire_recursive>
 80084b6:	4628      	mov	r0, r5
 80084b8:	4621      	mov	r1, r4
 80084ba:	f7ff ff5f 	bl	800837c <__sflush_r>
 80084be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084c0:	07da      	lsls	r2, r3, #31
 80084c2:	4605      	mov	r5, r0
 80084c4:	d4e4      	bmi.n	8008490 <_fflush_r+0xc>
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	059b      	lsls	r3, r3, #22
 80084ca:	d4e1      	bmi.n	8008490 <_fflush_r+0xc>
 80084cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ce:	f7ff fb8b 	bl	8007be8 <__retarget_lock_release_recursive>
 80084d2:	e7dd      	b.n	8008490 <_fflush_r+0xc>

080084d4 <__swhatbuf_r>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	460c      	mov	r4, r1
 80084d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084dc:	2900      	cmp	r1, #0
 80084de:	b096      	sub	sp, #88	@ 0x58
 80084e0:	4615      	mov	r5, r2
 80084e2:	461e      	mov	r6, r3
 80084e4:	da0d      	bge.n	8008502 <__swhatbuf_r+0x2e>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084ec:	f04f 0100 	mov.w	r1, #0
 80084f0:	bf14      	ite	ne
 80084f2:	2340      	movne	r3, #64	@ 0x40
 80084f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084f8:	2000      	movs	r0, #0
 80084fa:	6031      	str	r1, [r6, #0]
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	b016      	add	sp, #88	@ 0x58
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	466a      	mov	r2, sp
 8008504:	f000 f848 	bl	8008598 <_fstat_r>
 8008508:	2800      	cmp	r0, #0
 800850a:	dbec      	blt.n	80084e6 <__swhatbuf_r+0x12>
 800850c:	9901      	ldr	r1, [sp, #4]
 800850e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008512:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008516:	4259      	negs	r1, r3
 8008518:	4159      	adcs	r1, r3
 800851a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800851e:	e7eb      	b.n	80084f8 <__swhatbuf_r+0x24>

08008520 <__smakebuf_r>:
 8008520:	898b      	ldrh	r3, [r1, #12]
 8008522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008524:	079d      	lsls	r5, r3, #30
 8008526:	4606      	mov	r6, r0
 8008528:	460c      	mov	r4, r1
 800852a:	d507      	bpl.n	800853c <__smakebuf_r+0x1c>
 800852c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	6123      	str	r3, [r4, #16]
 8008534:	2301      	movs	r3, #1
 8008536:	6163      	str	r3, [r4, #20]
 8008538:	b003      	add	sp, #12
 800853a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800853c:	ab01      	add	r3, sp, #4
 800853e:	466a      	mov	r2, sp
 8008540:	f7ff ffc8 	bl	80084d4 <__swhatbuf_r>
 8008544:	9f00      	ldr	r7, [sp, #0]
 8008546:	4605      	mov	r5, r0
 8008548:	4639      	mov	r1, r7
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff fbba 	bl	8007cc4 <_malloc_r>
 8008550:	b948      	cbnz	r0, 8008566 <__smakebuf_r+0x46>
 8008552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008556:	059a      	lsls	r2, r3, #22
 8008558:	d4ee      	bmi.n	8008538 <__smakebuf_r+0x18>
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	f043 0302 	orr.w	r3, r3, #2
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	e7e2      	b.n	800852c <__smakebuf_r+0xc>
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	6020      	str	r0, [r4, #0]
 800856a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	9b01      	ldr	r3, [sp, #4]
 8008572:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008576:	b15b      	cbz	r3, 8008590 <__smakebuf_r+0x70>
 8008578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800857c:	4630      	mov	r0, r6
 800857e:	f000 f81d 	bl	80085bc <_isatty_r>
 8008582:	b128      	cbz	r0, 8008590 <__smakebuf_r+0x70>
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f023 0303 	bic.w	r3, r3, #3
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	431d      	orrs	r5, r3
 8008594:	81a5      	strh	r5, [r4, #12]
 8008596:	e7cf      	b.n	8008538 <__smakebuf_r+0x18>

08008598 <_fstat_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4d07      	ldr	r5, [pc, #28]	@ (80085b8 <_fstat_r+0x20>)
 800859c:	2300      	movs	r3, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	4611      	mov	r1, r2
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	f7fb fba1 	bl	8003cec <_fstat>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	d102      	bne.n	80085b4 <_fstat_r+0x1c>
 80085ae:	682b      	ldr	r3, [r5, #0]
 80085b0:	b103      	cbz	r3, 80085b4 <_fstat_r+0x1c>
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
 80085b6:	bf00      	nop
 80085b8:	20025d54 	.word	0x20025d54

080085bc <_isatty_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d06      	ldr	r5, [pc, #24]	@ (80085d8 <_isatty_r+0x1c>)
 80085c0:	2300      	movs	r3, #0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7fb fba0 	bl	8003d0c <_isatty>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_isatty_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_isatty_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20025d54 	.word	0x20025d54

080085dc <_sbrk_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d06      	ldr	r5, [pc, #24]	@ (80085f8 <_sbrk_r+0x1c>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4604      	mov	r4, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	602b      	str	r3, [r5, #0]
 80085e8:	f7fb fba8 	bl	8003d3c <_sbrk>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_sbrk_r+0x1a>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_sbrk_r+0x1a>
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20025d54 	.word	0x20025d54

080085fc <_init>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	bf00      	nop
 8008600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008602:	bc08      	pop	{r3}
 8008604:	469e      	mov	lr, r3
 8008606:	4770      	bx	lr

08008608 <_fini>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	bf00      	nop
 800860c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860e:	bc08      	pop	{r3}
 8008610:	469e      	mov	lr, r3
 8008612:	4770      	bx	lr
